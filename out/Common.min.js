// Do not modify this page directly; instead build from https://github.com/RopeWiki/commonjs
$("head").prepend('<meta name="viewport" content="width=320, initial-scale=1.0">');

var RWServerUrl = "http://luca.ropewiki.com";

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1e3);
    var expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; path=/ ; " + expires;
}

function getCookie(cname, def) {
    var name = cname + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == " ") c = c.substring(1);
        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
    }
    if (typeof def != "undefined") return def;
    return "";
}

function checkregname() {
    var url = window.location.href.toString().split("?");
    var regnameval = urldecode(getCookie("regnameval"));
    if (url.length < 2 && regnameval != "") {
        var urlp = url[0].split("/");
        var last = urlp[urlp.length - 1];
        if (last == "Beta" || last == "Conditions" || last == "conditions.html"
) window.location.href = url + "?region=" + urlencode(regnameval);
    }
}

checkregname();

function geturl(url) {
    var rw = "http://ropewiki.com";
    var wrw = "http://www.ropewiki.com";
    var local = window.location.href.toString();
    if (local.substr(0, wrw.length) == wrw) if (url.substr(0, rw.length) == rw
) return wrw + url.substr(rw.length);
    return url;
}

function Distance(p1, p2) {
    var e = Math, ra = e.PI / 180;
    var b = p1.lat * ra, c = p2.lat * ra, d = b - c;
    var g = p1.lng * ra - p2.lng * ra;
    var f = 2 * e.asin(e.sqrt(e.pow(e.sin(d / 2), 2) + e.cos(b) * e.cos(c) * e.pow(e.sin(g / 2), 2)));

    return f * 6378.137 * km2mi;
}

var km2mi = .621371;

var mi2ft = 5280;

var m2ft = 3.28084;

function xdeg(slope) {
    return Math.round(Math.atan(slope / 100) * (180 / Math.PI), 1);
}

function ftxmi(ftpermile) {
    if (metric) return Math.round(ftpermile / m2ft * km2mi).toLocaleString(
) + "m/km"; else return Math.round(ftpermile).toLocaleString() + "ft/mi";
}

function ft(feet, space) {
    if (isNaN(feet)) return "";
    if (metric) return Math.round(feet / m2ft).toLocaleString() + (space ? "&nbsp;" : ""
) + "m"; else return Math.round(feet).toLocaleString() + (space ? "&nbsp;" : "") + "ft";
}

function mi(miles, space) {
    if (isNaN(miles)) return "";
    if (metric) return (Math.round(miles / km2mi * 10) / 10).toLocaleString() + (
space ? "&nbsp;" : "") + "km"; else return (Math.round(miles * 10) / 10).toLocaleString() + (
space ? "&nbsp;" : "") + "mi";
}

function rap(raps, space) {
    if (isNaN(raps)) return "";
    return raps + (space ? "&nbsp;" : "") + "r";
}

function uconv(str, cnv) {
    if (str == null || str == "") return "";
    var sep = "↕";
    var vstr = str.split(sep);
    if (vstr.length > 0) vstr[0] = cnv(parseFloat(vstr[0]), str.indexOf("&nbsp;") > 0);
    if (vstr.length > 1) vstr[1] = ft(parseFloat(vstr[1]), str.indexOf("&nbsp;") > 0);
    return vstr.join(" " + sep);
}

function acaconv(str, more) {
    var end = str.indexOf(")");
    if (end < 0) return str;
    var start = str.indexOf("*") + 1;
    while (start < end && !(str.charAt(start) >= "1" && str.charAt(start) <= "4")) ++start;
    if (start >= 3 && str.substr(start - 3, 3) == "<i>") start -= 3;
    var rating = str.substr(start, end - start).split("(");
    if (rating.length < 2) return str;
    var val = rating[french ? 1 : 0].trim();
    if (more) val += " (" + rating[french ? 0 : 1].trim() + ")";
    return str.substr(0, start) + val + str.substr(end + 1);
}

function smallstyle() {
    WebViewStyle();
    $("#p-logo a").attr("href", "#");
}

var skinuser = "";

function loadSkin() {
    var toption = document.getElementsByClassName("toption");
    for (var i = 0; i < toption.length; ++i) toption[i].style.display = "block";
    var skinconfig = urldecode(getCookie("skinconfig"));
    var elem = document.getElementById("skinconfig");
    if (elem != null) {
        skinconfig = urldecode(elem.innerHTML);
        setCookie("skinconfig", urlencode(skinconfig));
    }
    if (skinconfig != "") {
        var str = skinconfig.split(",");
        skinuser = str[0];
        if ((elem = document.getElementById("skinuser")) != null) if (
elem.innerHTML == "" && skinuser != "") {
            var str = window.location.href;
            if (str.indexOf("?") >= 0) str += "&"; else str += "?";
            document.body.style.display = "none";
            window.location.href = str + "skinuser=" + skinuser;
        }
        if (str.length > 1 && str[1] != "") {
            if ((elem = document.body) != null) {
                elem.style.backgroundColor = str[1];
            }
            if ((elem = document.getElementById("mw-page-base")) != null) {
                elem.style.backgroundColor = str[1];
                elem.style.backgroundImage = "none";
            }
        }
        if (str.length > 2 && str[2] != "") {
            var str2 = str[2].split("|");
            if ((elem = document.getElementById("p-logo")) != null) elem.innerHTML = '<a href="' + str2[0] + '"><img src="' + str2[1] + '"/></a>';

        }
        for (var n = 3; n < str.length; ++n) {
            var navdiv = "";
            var str2 = str[n].split("*");
            var base = str2[0].split("|");
            for (var i = 1; i < str2.length; ++i) {
                var line = str2[i].split("|");
                navdiv += '<li id="n-' + i + '"><a href="' + line[0] + '">' + line[1] + "</a></li>";
            }
            if ((elem = document.getElementById(base[0])) != null) if (navdiv != "") elem.innerHTML = "<h3>" + base[1] + '</h3><div class="body"><ul>' + navdiv + "</ul></div>"; else elem.innerHTML = "";

        }
    }
}

var gtrans = null;

var gtrans2 = "x";

var glist, genlist;

function textTranslation(text, pre, post) {
    if (!glist) return text;
    if (!pre) pre = "";
    if (!post) post = "";
    for (var k = 0; k < glist.length; ++k) text = text.replace(genlist[k], pre + glist[k] + post);
    return text;
}

function loadTranslation() {
    gtrans = getCookie("googtrans").split("/");
    if (gtrans.length >= 3) gtrans = gtrans[2]; else gtrans = null;
    if (gtrans == gtrans2) return;
    gtrans2 = gtrans;
    var gtranslist = [
 "en,Introduction,Approach,Descent,Exit,Red tape,Background,Credits,Beta sites,Trip reports and media,Time,Raps,Shuttle,Start,End,Road,Parking,(Upper),(Middle),(Lower)"
,
 "es,Descripci�n,Aproximaci�n,Descenso,Retorno,Regulaciones,Historia,Cr�ditos,Referencias,Informes del recorrido y fotos,Horario,R�peles,Combinaci�n,Inicio,Final,Carretera,Parking,(Superior),(Intermedio),(Inferior)"
,
 "pt,Descri��o,Aproxima��o,Descida,Retorno,Regulamentos,Hist�ria,Cr�ditos,Refer�ncias,Relat�rios de viagens e fotos,Tempos,Rapeis,Combina��o,Entrada,Sa�da,Estrada,Parking,(Superior),(Intermedi�rio),(Inferior)"
,
 "it,Descrizione,Avvicinamento,Discesa,Rientro,Normativa,Storia,Crediti,Siti web,Report di viaggio e foto,Tempi,Calate,Navetta,Entrata,Uscita,Strada,Parking,(Superiore),(Intermedio),(Inferiore)"
,
 "fr,Description,Approche,Descente,Retour,R�glements,Historique,Cr�dits,Sites internet,Rapports de voyage et photos,Temps,Rappels,Navette,Depart,Arrivee,Route,Parking,(Sup�rieur),(Interm�diaire),(Inf�rieur)"
,
 "de,Einleitung,Zustieg,Zejscie,R�ckweg,Vorschriften,Hintergrund,Credits,Weblinks,Reiseberichte und fotos,Zeit,Abseilen,Schiffchen,Einleitung,Ausstieg,Strasse,Parking,(H�her),(Intermedi�r),(Untere)"
,
 "ca,Descripci�,Aproximaci�,Descens,Retorn,Regulacions,Hist�ria,Cr�dits,Refer�ncies,Informes del recorregut i fotos,Horari,R�pels,Combinaci�,Inici,Final,Carretera,Parking,(Superior),(Intermedi),(Inferior)" ];

    glist = null;
    genlist = (gtranslist[0].substr(3) + gtranslist[0].substr(2).toLowerCase()).split(",");
    for (var g = 0; g < gtranslist.length; ++g) if (gtranslist[g].substr(0, 2) == gtrans) {
        glist = (gtranslist[g].substr(3) + gtranslist[g].substr(2).toLowerCase()).split(",");
        break;
    }
    var list = document.getElementsByClassName("ctranslate");
    for (var j = 0; j < list.length; j++) {
        var lj = list[j];
        var text = lj.innerHTML;
        if (!lj.oinnerHTML) lj.oinnerHTML = text; else text = lj.oinnerHTML;
        lj.innerHTML = textTranslation(text, '<span class="notranslate"> ', " </span>");
    }
    var links = document.getElementsByClassName("external");
    for (var j = 0; j < links.length; j++) {
        var rwext = "ext=.rw";
        var link = links[j];
        if (!link.href) continue;
        var url = link.href;
        if (url.indexOf("translate.google.com") < 0 && url.indexOf(rwext) < 0) continue;
        var text = link.innerHTML;
        if (!link.ohref) {
            link.ohref = url;
            link.oinnerHTML = text;
        } else {
            url = link.ohref;
            text = link.oinnerHTML;
        }
        if (url.indexOf(rwext) >= 0) {
            link.href = url = rwlink(url, "");
            continue;
        }
        var urlpos = url.indexOf("&u=http");
        if (urlpos < 0) continue;
        var ourl = url.substr(urlpos + 3);
        var to = "en";
        var from = "auto";
        var urlpos = url.indexOf("&sl=");
        if (urlpos >= 0) {
            from = url.substr(urlpos + 4, 2);
            if (from == "au") from = "auto";
        }
        if (gtrans) to = gtrans;
        if (from != to) {
            link.style.display = "inline";
            link.href = "http://translate.google.com/translate?" + "&hl=" + to + "&sl=" + from + "&tl=" + to + "&u=" + ourl;
        } else {
            link.style.display = "none";
        }
    }
}

loadSkin();

var url = window.location.href.toString();

var debug = url.indexOf("debug=") >= 0;

if (url[url.length - 3] == "#") {
    setCookie("metric", "on", 360 * 10);
    setCookie("french", "on", 360 * 10);
    setCookie("country", "on", 360 * 10);
    setCookie("googtrans", "/en/" + url.substr(url.length - 2), 360 * 10);
}

if (!getCookie("country")) {
    var url = "http://freegeoip.net/json/";
    $.getJSON(geturl(url), function(data) {
        if (data && data.country_code) {
            setCookie("country", "on", 360 * 10);
            console.log("country:" + data.country_code);
            if (data.country_code != "US") {
                setCookie("metric", "on", 360 * 10);
                setCookie("french", "on", 360 * 10);
                window.location.reload();
            }
        }
    });
}

var metric = getCookie("metric");

var french = getCookie("french");

var urlcheckbox = getCookie("urlcheckbox");

var weather = getCookie("weather");

var watershed = getCookie("watershed");

var sheet = document.createElement("style");

sheet.id = "french";

sheet.innerHTML = french ? " .uaca0 { display: none ; }" : " .uaca1 { display: none ; }";

if (document.body) document.body.appendChild(sheet);

var starrate = getCookie("starrate");

if (window.location.href.toString().indexOf("starratechk=") >= 0) starrate = true;

var labels = getCookie("labels");

var slideshowchk = getCookie("slideshowchk", "undefined");

if (slideshowchk == "undefined") slideshowchk = "on";

slideshowchk = slideshowchk != "";

function toggleMetric(force) {
    metric = !metric;
    setCookie("metric", metric ? "on" : "", 360 * 10);
    document.body.style.cursor = "wait";
    window.location.reload();
}

function toggleFrench(force) {
    french = !french;
    setCookie("french", french ? "on" : "", 360 * 10);
    document.body.style.cursor = "wait";
    window.location.reload();
}

function toggleUrlcheckbox(elem) {
    urlcheckbox = setparam(urlcheckbox, elem.id, elem.checked ? "on" : "off");
    setCookie("urlcheckbox", urlcheckbox, 360 * 10);
    gtrans2 = "x";
    loadTranslation();
}

function togglewchk(varname) {
    var varval = !eval(varname);
    setCookie(varname, varval ? "on" : "", 360 * 10);
    document.body.style.cursor = "wait";
    window.location.reload();
}

function toggleStarrate(force) {
    starrate = !starrate;
    setCookie("starrate", starrate ? "on" : "", 360 * 10);
    if (starrate) {
        LoadStars();
    } else {
        document.body.style.cursor = "wait";
        window.location.reload();
    }
}

function toggleLabels(force) {
    labels = !labels;
    setCookie("labels", labels ? "on" : "", 360 * 10);
    document.body.style.cursor = "wait";
    window.location.reload();
}

function toggleSlideshow(force) {
    slideshowchk = !slideshowchk;
    if (typeof force != "undefined") slideshowchk = force;
    setCookie("slideshowchk", slideshowchk ? "on" : "", 360 * 10);
    var elems = document.getElementsByClassName("slideshow");
    for (var i = 0; i < elems.length; i++) elems[i].style.display = slideshowchk ? "" : "none";
    var elems = document.getElementsByClassName("slideshowschk");
    for (var i = 0; i < elems.length; i++) elems[i].checked = slideshowchk;
    if (!slideshowchk) {
        document.body.style.zIndex = 1;
        document.body.style.zoom = 1.0000001;
    } else {
        document.body.style.zIndex = 0;
        document.body.style.zoom = 1;
    }
}

function noextraction(name) {
    return name.indexOf("roadtripryan.com") >= 0;
}

function getdomain(link) {
    var base = link.split("http");
    if (link.length <= 0) return link;
    var domain = base[base.length - 1].split("/");
    if (domain.length <= 2) return link;
    return domain[2];
}

var lastlinks = [];

function loadSource(link, domain) {
    var optdiv = document.getElementById("myddOptsDiv");
    var opttext = document.getElementById("myddOptsText");
    if (!opttext || !optdiv) return;
    optdiv.style.display = "none";
    opttext.innerHTML = domain;
    gxml.overlayman.Hide();
    var isropewiki = link.indexOf("ropewiki.com") >= 0;
    var kmlfile = link;
    if (!isropewiki) kmlfile = "http://d5a.net/rwr?gpx=off&filename=tmp&kmlnfx&kmlx=" + kmlfile;
    var kmlfilep = document.getElementById("kmlfilep");
    if (kmlfilep) kmlfilep.innerHTML = kmlfile;
    if (lastlinks.indexOf(link) >= 0) {
        gxml.overlayman.Show(link);
    } else {
        gxml.load(kmlfile, link);
        lastlinks.push(link);
    }
    var noex = noextraction(link);
    var dlist = [ "rw", "ex", "noex" ];
    var dshow = [ isropewiki, !isropewiki && !noex, !isropewiki && noex ];
    for (var i = 0; i < dlist.length; ++i) {
        var elem = document.getElementsByClassName("display" + dlist[i]);
        for (var e = 0; e < elem.length; ++e) elem[e].style.display = dshow[i] ? "block" : "none";
    }
    var dlist2 = [ "ex", "noex" ];
    for (var i = 0; i < dlist2.length; ++i) {
        var elem = document.getElementsByClassName("display" + dlist2[i]);
        for (var e = 0; e < elem.length; e++) {
            var links = elem[e].getElementsByTagName("A");
            for (var l = 0; l < links.length; ++l) {
                var clink = links[l].href;
                if (clink.indexOf("caltopo.com") > 0) {
                    var prefix = "kmlx%253D";
                    var postfix = "ext%253D.kml";
                    var start = clink.indexOf(prefix);
                    var end = clink.indexOf(postfix, start + 1);
                    links[l].href = clink.substr(0, start + prefix.length) + urlencode(link + "&"
) + clink.substr(end);
                } else if (clink.indexOf("d5a.net") > 0) {
                    var prefix = "kmlx%3D";
                    var postfix = "ext%3D.kml";
                    var start = clink.indexOf(prefix);
                    var end = clink.indexOf(postfix, start + 1);
                    links[l].href = clink.substr(0, start + prefix.length
) + link + "&" + clink.substr(end);
                } else if (clink.indexOf("/Map?pagename=") < 0) {
                    links[l].href = link;
                    links[l].innerHTML = domain;
                }
            }
        }
    }
}

var lastfrom = "", lastto = "";

function displaydirectionsto(loc) {
    lastto = loc.join();
    window.open("http://maps.google.com/?output=classic&saddr=" + lastfrom + "&daddr=" + lastto,
 "_blank");
}

function displaydirectionsfrom(loc) {
    lastfrom = loc.join();
    if (lastto == "") alert("Click on a 'Directions To' link to get the full route"
); else window.open("http://maps.google.com/?output=classic&saddr=" + lastfrom + "&daddr=" + lastto,
 "_blank");
}

function displaycoordenates(loc) {
    window.prompt("Copy to clipboard with Ctrl+C, Cmd-C, Click&Hold or other methods.", loc.join());
}

function displaydirections(lat, lng, extra) {
    var ret = "<div><i>";
    ret += '<a href="javascript:displaydirectionsto([' + lat + "," + lng + ']);">Directions To</a> - <a href="javascript:displaydirectionsfrom([' + lat + "," + lng + ']);">Directions From</a>';
    if (!!extra) ret += extra;
    ret += "</i></div>";
    return ret;
}

function displaylocation(lat, lng, extra) {
    var ret = '<div class="textselect">';
    var lat = parseFloat(lat);
    var lng = parseFloat(lng);
    var coordtxt = Math.round(lat * 1e5) / 1e5 + "," + Math.round(lng * 1e5) / 1e5;
    ret += 'Coords: <a href="http://maps.google.com/maps?q=loc:' + coordtxt + '" target="_blank">' + coordtxt + "</a>";
    if (!!extra) ret += extra;
    ret += "</div>";
    return ret;
}

function setfield(id) {
    var list = $("#setfieldtarget input");
    if (list.length > 0 && id) list[0].value = id.innerHTML;
}

var geoelevationService;

function getgeoelevation(LatLng, element, label, endlabel) {
    if (!geoelevationService) geoelevationService = new google.maps.ElevationService();
    if (geoelevationService && LatLng) {
        var latlngs = [];
        latlngs.push(LatLng);
        geoelevationService.getElevationForLocations({
            locations: latlngs
        }, function(results) {
            if (results[0]) {
                if (!label) label = "";
                if (!endlabel) endlabel = "";
                var elev = results[0].elevation * m2ft;
                var res = document.getElementById(element);
                if (res) res.innerHTML = label + '<span class="notranslate">' + ft(elev) + "</span>" + endlabel;

            }
        });
    }
}

function getgeocode(lat, lng, element) {
    var url = "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat.toString().trim(
) + "," + lng.toString().trim();
    $.getJSON(geturl(url), function(data) {
        if (data && data.results) {
            var list = [];
            for (var r = 0; r < data.results.length; ++r) for (
var c = 0; c < data.results[r].address_components.length; ++c) {
                var comp = data.results[r].address_components[c];
                if (comp.types.indexOf("political") >= 0) if (list.indexOf(comp.long_name) < 0
) list.push(comp.long_name);
            }
            var res = document.getElementById(element);
            if (res) res.innerHTML = "Geocode:" + list.join(", ");
        }
    });
}

function suggestregion() {
    var coordinates = document.getElementsByName("Canyon[Coordinates]");
    if (coordinates.length > 0 && coordinates[0].value) return suggestregioncoords(
coordinates[0].value);
    var geocode = document.getElementsByName("Canyon[Geolocation]");
    if (geocode.length > 0 && geocode[0].value) return suggestregiongeocode(geocode[0].value);
}

function suggestregiongeocode(geocode) {
    var url = "https://maps.googleapis.com/maps/api/geocode/json?address=" + geocode;
    $.getJSON(geturl(url), function(data) {
        if (data && data.results) {
            for (var i = 0; i < data.results.length; ++i) if (
data.results[i].geometry && data.results[i].geometry.location && data.results[i].geometry.location.lat && data.results[i].geometry.location.lng) {

                suggestregioncoords(
data.results[i].geometry.location.lat + "," + data.results[i].geometry.location.lng);
                return;
            }
        }
    });
}

function suggestregioncoords(coords) {
    coords = coords.split(" ").join("");
    var url = "http://ropewiki.com/api.php?action=ask&format=json&query=[[Category:Canyons]][[Has coordinates::" + coords + " (50000)]]" + "|%3FHas_coordinates|%3FLocated_in_region|limit=1000";
    $.getJSON(geturl(url), function(data) {
        var list = getrwlist(data);
        var ll = coords.split(",");
        var pt = {
            lat: parseFloat(ll[0]),
            lng: parseFloat(ll[1])
        };
        for (var i = 0; i < list.length; ++i) list[i].dist = Distance(pt, list[i].location);
        list.sort(function(a, b) {
            return a.dist - b.dist;
        });
        var rlist = [];
        for (var i = 1; i < list.length && rlist.length < 3; ++i) if (rlist.indexOf(list[i].region
) < 0) rlist.push(list[i].region);
        var res = document.getElementById("suggestednearby");
        if (res) res.innerHTML = "Nearby:" + rlist.join(", ");
        var region = document.getElementsByName("Canyon[Region]");
        if (region && region.length > 0 && rlist.length > 0) region[0].value = rlist[0];
    });
}

var starlist = [ "http://ropewiki.com/images/9/9d/GoldStar0.png",
 "http://ropewiki.com/images/8/86/GoldStar1.png", "http://ropewiki.com/images/f/fd/GoldStar2.png",
 "http://ropewiki.com/images/8/8d/GoldStar3.png", "http://ropewiki.com/images/4/41/GoldStar4.png" ];

function GetStar(num, size) {
    var pre = '<img width="' + size + 'px" height="' + size + 'px" src="', pos = '"/>';
    return pre + starlist[4] + pos;
}

function GetStarFraction(num) {
    if (num >= .875) return 4; else if (num >= .625) return 3; else if (num >= .375
) return 2; else if (num >= .125) return 1; else return 0;
}

function GetStars(num, ratings, size) {
    var line = '<span style="white-space: nowrap;">';
    for (var i = 0; i < 5; ++i) {
        line += '<img width="' + size + 'px" height="' + size + 'px" src="' + starlist[GetStarFraction(
num)] + '"/>';
        num -= 1;
    }
    if (ratings > 0) line += '<span class="starsub">' + ratings + "</span>";
    line += "</span>";
    return line;
}

function GetStarsVote(num, unum, ratings, size) {
    var line = '<span class="starRate" style="white-space: nowrap;">';
    var text = [ "Delete", "Not worth doing", "Worthwhile", "Ok", "Great", "Among the best" ];
    if (!document.getElementById("curuser")) for (var i = 0; i <= 5; ++i) text[i] = "Log in to rate";

    for (var i = 1; i <= 5; ++i) {
        line += '<b id="' + i + '" class="starRate' + GetStarFraction(num) + '" style="cursor:pointer" onclick="StarVote(this)"><span class="starText starvText">' + text[i] + "</span></b>";

        num -= 1;
    }
    if (unum > 0
) line += '<b id="0" class="starx starsub" style="color:red;cursor:pointer;" onclick="StarVote(this)">X<span class="starText starvText">' + text[0] + "</span></b>"; else if (
ratings > 0) line += '<span class="starsub">' + ratings + "</span>";
    line += "</span>";
    return line;
}

function GetStarsId(elem) {
    var tr = elem.parentNode;
    while (tr != null && tr.nodeName != "TR") tr = tr.parentNode;
    if (tr == null) return null;
    var link = tr.getElementsByTagName("A");
    if (link && link[0]) return link[0].innerHTML;
    return null;
}

function StarVote(elem) {
    var stars = elem.id;
    var id = GetStarsId(elem);
    var euser = document.getElementById("curuser");
    if (stars && id && euser) {
        var user = euser.innerHTML;
        var fr = document.createElement("IFRAME");
        var target = "Votes:" + id + "/" + user;
        if (stars == "0") {
            stars = "";
            user = "";
        }
        fr.src = "http://ropewiki.com/api.php?action=sfautoedit&form=Page_rating&target=" + target + "&query=Page_rating[Page]=" + id + "%26Page_rating[Rating]=" + stars + "%26Page_rating[User]=" + user;
        fr.style.display = "none";
        document.body.appendChild(fr);
        var parent = elem.parentNode;
        while (parent != null && parent.className.indexOf("starv") < 0) parent = parent.parentNode;
        if (parent) {
            parent.innerHTML = GetStarsVote(stars, stars, -1, 16);
            parent.className = "starv votedrow";
        }
    }
}

function LoadStars() {
    var url = window.location.href.toString();
    var onlyuser = starrate || url.indexOf("onlyuser=") > 0 || url.indexOf("starratechk=") > 0;
    var starsv = document.getElementsByClassName("starv");
    for (var i = 0; i < starsv.length; i++) {
        var starsvstr;
        if (typeof starsv[i].starsvstr == "undefined") starsvstr = starsv[i].starsvstr = starsv[i].innerHTML; else starsvstr = starsv[i].starsvstr;

        var str = starsvstr.split("*");
        if (str.length < 2) continue;
        var stars = parseFloat(str[0]);
        var id = GetStarsId(starsv[i]);
        if (id != null) {
            var ratings = -1;
            var ustars = -1;
            ustars = parseFloat(str[1]);
            var strp = str[1].split("#");
            if (strp.length > 1) ratings = parseInt(strp[1]);
            if (onlyuser && ustars > 0) {
                stars = ustars;
                ratings = 0;
            }
            if (starrate) {
                starsv[i].innerHTML = GetStarsVote(stars, ustars, ratings, 16);
                if (ustars > 0) starsv[i].className = "starv votedrow";
            } else {
                starsv[i].innerHTML = '<a href="http://ropewiki.com/List_ratings?location=' + id + '">' + GetStars(
stars, ratings, 16) + "</a>";
                starsv[i].title = stars + "*" + (ratings <= 0 ? "" : " (" + ratings + " ratings)");
                if (ustars > 0) starsv[i].className = "starv votedsub";
            }
        } else {
            starsv[i].innerHTML = GetStars(stars, 0, 16);
        }
    }
}

function loadcredits(pagename, mode, divid) {
    var div = document.getElementById(divid);
    if (!div) return;
    var size = 0;
    var lastuser;
    var users = [];
    var origurl = geturl(
"http://ropewiki.com/api.php?format=json&action=query&prop=revisions&rvexcludeuser=BetaRobot&redirects=&continue=");

    switch (mode) {
      case "P":
        origurl += "&rvprop=user|size&titles=" + pagename + "&rvlimit=max&rvdir=newer";
        break;

      case "K":
        origurl += "&rvprop=user|comment&titles=File:" + pagename + ".kml&rvlimit=max&rvdir=newer";
        break;

      case "J":
        origurl = "http://ropewiki.com/api.php?format=json&action=query&titles=File:" + pagename + " Banner.jpg&prop=imageinfo&iiprop=user|comment";
        break;
    }
    function getjs(data) {
        function finduser(user) {
            for (var i = 0; i < users.length; ++i) if (users[i].user == user) return i;
            return -1;
        }
        var bqnlist = [];
        var bqnuser = "Barranquismo.net";
        var bqnelems = document.getElementsByClassName("barranquismonet");
        for (i = 0; i < bqnelems.length; ++i) bqnlist.push(bqnelems[i].innerHTML);
        var addid = "addcredit";
        var addlist = [];
        var addelems = document.getElementsByClassName(addid);
        for (i = 0; i < addelems.length; ++i) addlist.push(addelems[i].innerHTML);
        $.each(data.query.pages, function(i, item) {
            var rev = item.revisions;
            if (!rev) rev = item.imageinfo;
            if (rev != null && rev.length != null) {
                for (var i = 0; i < rev.length; ++i) {
                    if (bqnlist.length > 0 && rev[i].user == "BetaRobot2") rev[i].user = bqnuser;
                    if (addlist.length > 0 && rev[i].user == "BetaRobot2") rev[i].user = addid;
                    if (bqnlist.length == 0 && rev[i].user.search(bqnuser) >= 0) continue;
                    if (mode == "J" && rev[i].comment) {
                        var by = rev[i].comment.split(" by ");
                        if (by.length > 1) {
                            rev[i].user = by[1];
                            rev[i].comment = "";
                        }
                    }
                    if (rev[i].user.search("Robot") >= 0) continue;
                    if (mode == "J") users.splice(0, users.length);
                    var u = finduser(rev[i].user);
                    if (u < 0) {
                        users.push({
                            user: rev[i].user,
                            size: 0
                        });
                        u = users.length - 1;
                    }
                    if (rev[i].size != null) {
                        users[u].size += rev[i].size - size;
                        size = rev[i].size;
                    }
                    if (rev[i].comment != null) users[u].comment = rev[i].comment;
                }
            }
            if (typeof data["continue"] != "undefined") {
                $.getJSON(origurl + "&rvcontinue=" + data["continue"].rvcontinue, getjs);
                return;
            }
            function credit(users, size) {
                if (users.length == 0) return;
                for (var u = 0; u < users.length; ++u) {
                    if (users[u].user == addid) credits += addlist.join(" & ").split("(").join("["
).split(")").join("]"); else if (users[u].user.indexOf("http") > 0) {
                        var userlink = users[u].user.split("http");
                        credits += userlink[0].link("http" + userlink[1]);
                    } else credits += users[u].user.link("http://ropewiki.com/User:" + users[u].user);

                    if (users[u].user == bqnuser) credits += "[" + bqnlist.join(", "
) + "]"; else if (size > 0) credits += " (" + Math.round(users[u].size / size * 100) + "%)";
                    if (u < users.length - 1) credits += u < users.length - 2 ? ", " : " & ";
                }
                var comment = users[users.length - 1].comment;
                if (comment != null && comment.indexOf("[[File:") > 0) {
                    var pcomment;
                    if ((pcomment = comment.indexOf(": ")) > 0) comment = comment.substr(
pcomment + 2); else comment = "";
                }
                if (comment != null && comment != "") credits += " (" + comment + ")";
            }
            var credits = "";
            if (size == 0) credit(users, size); else {
                var usize = 0;
                for (var u = 0; u < users.length; ++u) {
                    if (users[u].size > 0) usize += users[u].size;
                    if (users[u].size < 0) users.splice(u--, 1);
                }
                var major = [], minor = [];
                for (var u = 0; u < users.length; ++u) if (
u == 0 || usize == 0 || users[u].size / usize > 5 / 100) major.push(users[u]); else minor.push(
users[u]);
                credit(major, major.length > 1 ? usize : 0);
                if (minor.length > 0) {
                    credits += " with minor contributions by ";
                    credit(minor, 0);
                }
            }
            if (credits) {
                var div = document.getElementById(divid);
                if (div) div.innerHTML = credits;
            }
        });
    }
    $.getJSON(origurl, getjs);
}

function aref(url, label, title, attribs) {
    if (typeof title == "undefined") title = "";
    if (typeof attribs == "undefined") attribs = "";
    return '<A href="' + url + '" title="' + title + '" ' + attribs + ">" + label + "</A>";
}

function getLinkLang(node) {
    for (var i = 1; i < 3 && node; ++i) {
        node = node.previousSibling;
        if (node && node.nodeName == "IMG") {
            var s, e;
            var src = node.src;
            if ((s = src.indexOf("Rwl_")) > 0 && (e = src.indexOf(".", s)) > 0) return src.substr(
s + 4, e - s - 4);
        }
    }
    return null;
}

function popupwin(url, width, height) {
    if (typeof width == "undefined") width = 600;
    if (typeof height == "undefined") height = 500;
    if (url.substr(0, 4) == "java") return url;
    if (url.indexOf("ropewiki") >= 0) url += (url.indexOf("?") >= 0 ? "&" : "?") + "action=render";
    return "javascript:popupwindow('" + url + "'," + width + "," + height + ");";
}

function popupwindow(url, width, height) {
    window.open(url, "_blank",
 "width=" + width + ",height=" + height + ",scrollbars=yes,menubar=yes,resizable=yes,toolbar=yes");
}

function rwlink(url, opts) {
    var rwext = "ext=.rw";
    var urlopts = urlcheckbox;
    var olist = opts.split("&");
    for (var i = 0; i < olist.length; ++i) {
        var idval = olist[i].split("=");
        if (idval.length != 2) continue;
        urlopts = setparam(urlopts, idval[0], idval[1]);
    }
    if (metric) url = url.replace(rwext, "metric=on&" + rwext);
    if (french) url = url.replace(rwext, "french=on&" + rwext);
    if (gtrans) url = url.replace(rwext, "gtrans=" + gtrans + "&" + rwext);
    if (urlopts) url = url.replace("&" + rwext, urlopts + "&" + rwext);
    if (urlopts.indexOf("smallscreen=on") < 0) url = url.replace(rwext, "docwidth=" + $(window
).width() + "&" + rwext);
    return url;
}

var locdist = "locdist=";

function nearbyselect(elem) {
    var a = elem.parentNode.getElementsByTagName("A")[0];
    var href = a.href;
    var e = href.indexOf(locdist);
    var url = href.substring(0, e) + locdist + elem.value;
    document.body.style.cursor = "wait";
    window.location.href = url;
}

function pdfselect(elem) {
    var url = "", file = "";
    var count = 15;
    var base = RWServerUrl + "/rwr?";
    var pdf = document.getElementById("idcredits");
    if (!pdf) return;
    var id = pdf.innerHTML;
    if (!id || id == "") return;
    id = urldecode(id).split(" ").join("_");
    var opts = "";
    var opt = elem.value;
    if (opt == "P") file = id + ".pdf", url = base + "filename=" + file + "&pdfx=" + id + "&ext=.rw"
, opts = "summary=off"; else if (opt == "PM") file = id + "_MAP.pdf",
 url = base + "filename=" + file + "&pdfx=Map?pagename=" + id + "&ext=.rw",
 opts = "summary=off"; else if (opt == "KM") file = id + ".kml", url = $("#kmlfilep").html(),
 count = 1; else if (opt == "GM") file = id + ".gpx", url = $("#kmlfilep").html().split("gpx%3Doff"
).join("gpx%3Don"), count = 1; else if (opt == "ZPM") file = id + ".zip",
 url = base + "filename=" + file + "&zipx=" + id + "&ext=.rw",
 opts = "bslinks=off&trlinks=off&summary=off"; else if (opt == "ZALL") file = id + "+.zip",
 url = base + "filename=" + file + "&zipx=" + id + "&ext=.rw",
 opts = "bslinks=on&summary=off"; else if (opt == "S") url = "http://ropewiki.com/PDFDownload?pagename=" + id + "&ext=.rw";

    url = rwlink(url, opts);
    if (url == "") return;
    elem.value = "";
    elem.blur();
    var on = true, oncount = 0;
    setCookie("rwfilename", "");
    var interval = setInterval(function() {
        on = !on;
        oncount++;
        $("#ptext").css("opacity", on ? "1.0" : "0.5");
        if (getCookie("rwfilename", "") != "" || oncount > count) {
            clearInterval(interval);
            $("#ptext").css("display", "none");
        }
    }, 1e3);
    $("#ptext").css("display", "inline");
    window.location.href = url;
}

function getDomainFaviconURL(linkurl) {
    var domain = linkurl.match(/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/);
    domain = RegExp.$2;
    var img = new Image();
    var faviconurl = "http://" + domain + "/favicon.ico";
    var faviconurl = "http://www.google.com/s2/favicons?domain=" + domain;
    return faviconurl;
}

function openfavlinks() {
    var str = "";
    var favlinks = document.getElementsByClassName("favlinks");
    for (i = 0; i < favlinks.length; ++i) {
        var href = favlinks[i].getElementsByTagName("A")[0].href;
        str += '<hr><h2>From <a href="' + href + '">' + href + '</a>:</h2><iframe src="' + href + '" frameborder="0" width="100%" min-height="3000px" style="font-size:smaller;"></iframe>';
    }
    var div = document.getElementById("allfavlinks");
    if (!div) {
        div = document.createElement("DIV");
        div.id = "allfavlinks";
        var body = document.getElementById("content");
        if (body == null) body = document.body;
        body.appendChild(div);
    }
    if (div) div.innerHTML = str;
}

function loadUserInterface(document) {
    $("title").addClass("notranslate");
    $(".firstHeading span").addClass("notranslate");
    $("#searchform").addClass("notranslate");
    $(".suggestions").addClass("notranslate");
    $(".mw-headline").addClass("ctranslate");
    $(".toctext").addClass("ctranslate");
    var colgroup = document.getElementsByClassName("colgroup");
    for (var i = 0; i < colgroup.length; ++i) {
        var table = colgroup[i];
        var list = table.id.split(".");
        findtag(table.childNodes, "TR", function addrow(item) {
            var l = 0;
            var cols = item.childNodes;
            for (var i = 0; i < cols.length && l < list.length; ++i) {
                var td = cols[i];
                if (td.nodeName == "TD") {
                    var c = list[l];
                    if (c.length > 0) if (td.getElementsByClassName(c).length == 0) td.className += " " + c;

                    ++l;
                }
            }
        });
    }
    var sections = document.getElementsByName("_section[Background]");
    for (var i = 0; i < sections.length; i++) {
        var text = sections[i].innerHTML;
        if (text.trim().split(" ").join() == "==Background==") sections[i].innerHTML = "";
    }
    var jslink = document.getElementsByClassName("jslink");
    for (var i = 0; i < jslink.length; i++) jslink[i].innerHTML = '<a href="javascript:' + jslink[i].id + '();">' + jslink[i].innerHTML + "</a>";

    var tablinks = document.getElementsByClassName("tablinks");
    for (var i = 0; i < tablinks.length; i++) {
        var links = tablinks[i].getElementsByTagName("A");
        for (var j = 0; j < links.length; j++) {
            var link = links[j];
            link.target = "tabIframe2";
        }
    }
    var tabmain = document.getElementsByClassName("tabMain");
    if (tablinks.length > 0 && tabmain.length > 0) {
        var tablink1 = tablinks[0].getElementsByTagName("A");
        if (tablink1.length > 0) tabmain[0].innerHTML = '<div class="tabIframeWrapper"><iframe class="tabContent" name="tabIframe2" src="' + tablink1[0].href + '" marginheight="8" marginwidth="8" frameborder="0"></iframe></div>';

    }
    var nofollow = document.getElementsByClassName("nofollow");
    for (var i = 0; i < nofollow.length; i++) {
        var links = nofollow[i].getElementsByTagName("A");
        {
            for (var j = 0; j < links.length; j++) {
                var link = links[j];
                link.rel = "nofollow";
            }
        }
    }
    var popups = document.getElementsByClassName("popwin");
    for (var i = 0; i < popups.length; i++) {
        var links = popups[i].getElementsByTagName("A");
        {
            for (var j = 0; j < links.length; j++) {
                var link = links[j];
                var url = link.href;
                link.href = popupwin(url);
            }
        }
    }
    var popups = document.getElementsByClassName("pops");
    for (var i = 0; i < popups.length; i++) {
        var links = popups[i].getElementsByTagName("A");
        {
            for (var j = 0; j < links.length; j++) {
                var link = links[j];
                link.target = "_blank";
            }
        }
    }
    var elems = document.getElementsByClassName("popforms");
    for (var i = 0; i < elems.length; i++) {
        var links = elems[i].getElementsByTagName("A");
        for (var l = 0; l < links.length; ++l) {
            var href = links[l].attributes["href"];
            if (href) {
                var str = href.value;
                str = str.replace("Special:FormEdit/File", "Special:Upload");
                href.value = str;
            }
        }
    }
    var setfield = $("ul.setfield");
    for (var i = 0; i < setfield.length; i++) {
        var sp = setfield[i].innerHTML.split("<li>");
        for (var j = 1; j < sp.length; ++j) {
            var spj = sp[j].split("<");
            var name = spj[0].trim();
            spj[0] = '<span onclick="setfield(this)" style="cursor:pointer;" >' + name + "</span>";
            sp[j] = spj.join("<");
        }
        setfield[i].innerHTML = sp.join("<li>");
    }
    var setfield = $("ul.regioncount");
    for (var i = 0; i < setfield.length; i++) {
        var sp = setfield[i].innerHTML.split("<li>");
        for (var j = 1; j < sp.length; ++j) {
            var len = sp[j].indexOf("<", sp[j].indexOf("</a") + 1);
            var text = sp[j].substring(0, len).trim().replace("(i)", '<hr id="vri">');
            text = '<span class="regioncount">' + text + "</span>";
            sp[j] = text + sp[j].substring(len);
        }
        setfield[i].innerHTML = sp.join("<li>");
    }
    var readmore = document.getElementsByClassName("readmore");
    for (var i = 0; i < readmore.length; i++) {
        var text = readmore[i].innerHTML;
        readmore[i].innerHTML = '<a href="#overviewstart" class="readmorebutton">' + text + "</a>";
    }
    LoadStars();
    var months = document.getElementsByClassName("monthv");
    for (var i = 0; i < months.length; i++) {
        var str = months[i].innerHTML;
        if (str.length == 0) continue;
        var out = '<table class="wikitable bst mbst nostranslate"><tr>';
        for (var s = 0; s < str.length; ++s) switch (str.charAt(s)) {
          case ",":
            out += '<td class="bss"></td>';
            break;

          case "X":
            out += '<td class="bsg"></td>';
            break;

          case "x":
            out += '<td class="bsy"></td>';
            break;

          case ".":
            out += "<td></td>";
            break;
        }
        out += "</tr></table>";
        months[i].innerHTML = out;
        months[i].style.display = "block";
    }
    if (metric) {
        var texts = document.getElementsByClassName("uft");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, ft);
        texts = document.getElementsByClassName("umi");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, mi);
        texts = document.getElementsByClassName("urap");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, rap);
    }
    {
        var texts = document.getElementsByClassName("uaca");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = acaconv(texts[i].innerHTML);
        var texts = document.getElementsByClassName("uacamore");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = acaconv(texts[i].innerHTML, true);

    }
    elem = document.getElementsByClassName("urlcheckbox");
    for (var i = 0; i < elem.length; i++) {
        var on = getparam(urlcheckbox, elem[i].id, elem[i].innerHTML);
        elem[i].className += " notranslate";
        elem[i].innerHTML = '<input id="' + elem[i].id + '" class="gmnoprint" type="checkbox" onclick="toggleUrlcheckbox(this)" ' + (
on == "on" ? "checked" : "") + ">";
    }
    elem = document.getElementsByClassName("uchk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleMetric()" ' + (
metric ? "checked" : "") + ">Metric</label>";
    }
    elem = document.getElementsByClassName("fchk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        var label = elem[i].innerHTML;
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleFrench()" ' + (
french ? "checked" : "") + ">" + label + "</label>";
    }
    elem = document.getElementsByClassName("wchk");
    for (var i = 0; i < elem.length; i++) {
        var id = elem[i].id;
        var label = elem[i].innerHTML;
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="togglewchk(\'' + id + "')\" " + (
eval(id) ? "checked" : "") + ">" + label + "</label>";
    }
    elem = document.getElementsByClassName("schk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        var label = elem[i].innerHTML;
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleStarrate()" ' + (
starrate ? "checked" : "") + ">" + label + "</label>";
    }
    elem = document.getElementsByClassName("schkon");
    for (var i = 0; i < elem.length; i++) elem[i].style.display = starrate ? "table-row" : "none";
    elem = document.getElementsByClassName("external");
    for (var i = 0; i < elem.length; i++) {
        var link = elem[i];
        var from = getLinkLang(link);
        if (from) {
            var to = "en";
            var ourl = link.href;
            ourl.replace("&", "%26");
            div = document.createElement("SPAN");
            div.innerHTML = ' <a rel="nofollow" class="external text" style="display:none" href="http://translate.google.com/translate?' + "&hl=" + to + "&sl=" + from + "&tl=" + to + "&u=" + ourl + '">' + "[Translated]</a>";
            link.parentNode.insertBefore(div, link.nextSibling);
        }
    }
    var fbuser = document.getElementById("fbuser");
    if (fbuser) fbuser.innerHTML = '<input class="submitoff" type="submit" onclick="fbusersearch()" value="' + fbuser.innerHTML + '">';

    var hdr = document.getElementById("firstHeading");
    var pdf = document.getElementById("idcredits");
    var kml = document.getElementById("kmlmapdisplay");
    var edit = window.location.href.toString().indexOf("&action=") > 0;
    if (hdr && pdf && kml && !edit) {
        var text = ' <select class="notranslate" style="width:27px;height:32px;background-image:url(http://ropewiki.com/images/a/ad/DownIcon.png);" id="pdfselect" value="" onchange="pdfselect(this)">';
        text += '<option selected disabled hidden style="display: none" value=""></option>';
        text += '<option value="P">PDF: Page</option>';
        text += '<option value="PM">PDF: Map</option><option value="KM">KML: Map</option><option value="GM">GPX: Map</option>';
        text += '<option value="ZPM">ZIP: Page + Maps</option><option value="ZALL">ZIP: P + M + Links</option>';
        text += '<option value="S">*: Settings</option></select>';
        text += '<img id="ptext" height="32" style="display:none;vertical-align:top" src="http://ropewiki.com/extensions/SemanticForms/skins/loading.gif"/>';
        var div = document.createElement("SPAN");
        div.className = "gmnoprint";
        div.title = "Download";
        div.id = "pdfbutton";
        div.innerHTML = text;
        hdr.appendChild(div);
    }
    var creditsline = document.getElementById("idcredits");
    if (creditsline) {
        var pagename = creditsline.innerHTML;
        loadcredits(pagename, "K", "Kcredits");
        loadcredits(pagename, "P", "Pcredits");
        loadcredits(pagename, "J", "Jcredits");
    }
    var referencepic = document.getElementById("referencepic");
    if (referencepic) {
        var approach = document.getElementById("Approach");
        if (approach) {
            var h2 = approach.parentNode;
            while (h2 != null && h2.nodeName != "H2") h2 = h2.parentNode;
            if (h2 != null) {
                h2.parentNode.insertBefore(referencepic, h2);
                referencepic.style.display = "block";
            }
        }
    }
    elem = document.getElementsByClassName("titleuser");
    if (elem.length > 0) {
        var floatdiv = "";
        for (var i = 0; i < elem.length; i++) {
            var str = elem[i].innerHTML.split(",");
            var img = '<img src="' + str[0] + '"/>';
            if (str.length > 1) floatdiv += '<a href="' + str[1] + '" title="Visit the main page">' + img + "</a>"; else floatdiv += img;

        }
        elem = document.getElementById("firstHeading");
        if (elem) {
            var src = elem.innerHTML;
            elem.innerHTML = '<div style="float:right;clear:right">' + floatdiv + "</div>" + src;
        }
    }
    var wdir = 1, wval = 255, wstep = 128;
    var wtimer = setInterval(function() {
        wval += wdir;
        if (wval > 255) {
            wval = 255;
            wdir = -wstep;
        }
        if (wval < 239) {
            wval = 239;
            wdir = wstep;
        }
        var welem = document.getElementsByClassName("rwwarning");
        var color = "#" + ((wval << 16) + (wval << 8)).toString(16);
        for (var i = 0; i < welem.length; ++i) {
            welem[i].style.backgroundColor = color;
            var wchild = welem[i].childNodes;
            for (var j = 0; j < wchild.length; ++j) if (wchild[j].style) wchild[j].style.backgroundColor = color;

        }
        var welem2 = document.getElementsByClassName("rwwarningbox");
        for (var i = 0; i < welem2.length; ++i) if (welem2[i].style) welem2[i].style.backgroundColor = color;

    }, 1e3);
    var realnames = document.getElementById("userrealnames");
    if (realnames) {
        var userids = [], usernames = [];
        var list = realnames.innerHTML.split('title="User:');
        for (var i = 1; i < list.length; ++i) {
            var id = list[i].split('"')[0].split(" (page")[0];
            var name = list[i].split("<")[0].split(">")[1];
            userids.push(id);
            usernames.push(name);
        }
        elem = document.getElementsByClassName("userid");
        for (var i = 0; i < elem.length; i++) {
            var id = elem[i].innerHTML;
            var n = userids.indexOf(id);
            if (n >= 0) {
                elem[i].innerHTML = usernames[n];
                elem[i].style.display = "block";
            }
        }
    }
    var autorefresh = document.getElementById("autorefresh");
    if (autorefresh != null) {
        var id = autorefresh.innerHTML;
        var fr = document.createElement("IFRAME");
        fr.src = "http://ropewiki.com/api.php?action=sfautoedit&form=AutoRefresh&target=Votes:AutoRefresh&query=AutoRefresh[Location]=" + id;
        fr.style.display = "none";
        document.body.appendChild(fr);
    }
    var kmlicons = document.getElementById("kmlicons");
    if (kmlicons != null) kmliconlist = kmlicons.innerHTML.split(",");
    var lines = document.getElementsByClassName("pinmap");
    for (var i = 0; i < lines.length; i++) {
        var icon;
        if (lines[i].id) {
            var idlist = lines[i].id.split(".");
            if (idlist.length > 1) icon = kmliconlist[Number(idlist[1]) * 6 + Number(idlist[0])];
        }
        var link = lines[i].parentNode.getElementsByTagName("A")[0];
        lines[i].id = id = link.innerHTML;
        lines[i].innerHTML = pinicon(lines[i].id, icon) + lines[i].innerHTML;
    }
    var domains = document.getElementsByClassName("favicon");
    for (var i = 0; i < domains.length; i++) {
        var links = domains[i].getElementsByTagName("A");
        {
            var link = links[0];
            var href = link.href;
            var fvcurl = getDomainFaviconURL(href);
            var img = '<img width="32px" height="32px" style="vertical-align:middle;margin-left:0px;margin-top:0px;width:32px;height:32px" src="' + fvcurl + '"/>';
            link.innerHTML = img + '<span style="vertical-align: middle;"> ' + link.innerHTML + "</span>";
        }
    }
    var fav = document.getElementById("favlinks");
    if (fav) fav.innerHTML = '<a href="javascript:openfavlinks();">' + fav.innerHTML + "</a>";
    var fav = document.getElementById("allfavlinks");
    if (fav) openfavlinks();
    var coords = "";
    var kmlmarker = document.getElementById("kmlmarker");
    if (kmlmarker) coords = kmlmarker.innerHTML.toString().split(" ").join("");
    var staticdebug = typeof staticscripts != "undefined";
    var weatherdiv = document.getElementById("weatherdiv");
    if (coords.length > 0 && weatherdiv && weather) {
        var url = "http://api.wunderground.com/api/bc1f237fb64ef165/alerts/forecast10day/geolookup/q/" + coords + ".json";
        if (staticdebug) url = "http://localhost/rw/umpqua.json";
        $.getJSON(geturl(url), function(data) {
            if (
data && data.forecast && data.forecast.simpleforecast && data.forecast.simpleforecast.forecastday && data.forecast.simpleforecast.forecastday.length > 0) {

                var link;
                var a = weatherdiv.getElementsByTagName("A");
                if (a && a.length > 0 && a[0].href) link = a[0].href;
                var periods = data.forecast.simpleforecast.forecastday;
                var w = "";
                w += '<div class="wstlogo noprint">';
                if (link) w += '<a href="' + link + '">';
                w += '<span class="notranslate">';
                var station, station2;
                if (
data.location && data.location.nearby_weather_stations && data.location.nearby_weather_stations.pws && data.location.nearby_weather_stations.pws.station && data.location.nearby_weather_stations.pws.station.length > 0) {

                    station = data.location.nearby_weather_stations.pws.station[0];
                    station.name = "((&#9899;)) " + station.id;
                }
                if (
data.location && data.location.nearby_weather_stations && data.location.nearby_weather_stations.airport && data.location.nearby_weather_stations.airport.station && data.location.nearby_weather_stations.airport.station.length > 0) {

                    station2 = data.location.nearby_weather_stations.airport.station[0];
                    station2.name = "&#9992;" + station2.city;
                }
                var ll = coords.split(",");
                if (ll.length >= 2) {
                    var distance = 1e15, distance2 = 1e15;
                    if (station) distance = Distance({
                        lat: ll[0],
                        lng: ll[1]
                    }, {
                        lat: station.lat,
                        lng: station.lon
                    });
                    if (station2) if ((distance2 = Distance({
                        lat: ll[0],
                        lng: ll[1]
                    }, {
                        lat: station2.lat,
                        lng: station2.lon
                    })) < distance) station = station2, distance = distance2;
                    w += "~" + mi(distance) + " ";
                    if (map && station) {
                        var stationinfo = [];
                        if (station.neighborhood) stationinfo.push(station.neighborhood);
                        if (station.city) stationinfo.push(station.city);
                        if (station.state) stationinfo.push(station.state); else if (station.country
) stationinfo.push(station.country);
                        var myLatlng = new google.maps.LatLng(station.lat, station.lon);
                        var infowindow = new google.maps.InfoWindow({
                            content: "<b>" + station.name + "</b>" + '<div class="textselect">' + stationinfo.join(
", ") + "</div>" + '<div class="textselect">' + displaylocation(station.lat, station.lon) + '<div id="elevation"></div>' + "</div>"

                        });
                        var marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            infowindow: infowindow,
                            optimized: false,
                            zIndex: 10,
                            icon: {
                                url: "https://icons.wxug.com/logos/PNG/wundergroundLogo_4c.png",
                                scaledSize: new google.maps.Size(45, 32)
                            }
                        });
                        google.maps.event.addListener(marker, "click", function() {
                            this.infowindow.open(map, this);
                            getgeoelevation(this.getPosition(), "elevation", "Elevation: ");
                        });
                    }
                }
                if (station) w += " " + station.name;
                var e = periods.length - 1;
                w += ": " + periods[0].date.day + " " + periods[0].date.monthname_short + " - " + periods[e].date.day + " " + periods[e].date.monthname_short + " ";
                w += "</span>";
                w += '<div style="position:relative"><img style="position:absolute;left:-75px;width:75px" src="https://icons.wxug.com/logos/PNG/wundergroundLogo_4c.png"/></div>';
                if (link) w += "</a>";
                w += "</div>";
                w += '<table class="wikitable wst bst notranslate"><tr style="line-height:5px">';
                for (var i = 0; i < periods.length; ++i) {
                    w += "<th>" + periods[i].date.weekday_short + "<br>";
                    w += "</th>";
                }
                w += "</tr><tr>";
                for (var i = 0; i < periods.length; ++i) {
                    var h = metric ? periods[i].high.celsius : periods[i].high.fahrenheit;
                    var l = metric ? periods[i].low.celsius : periods[i].low.fahrenheit;
                    w += '<td title="' + periods[i].date.day + " " + periods[i].date.monthname + " : " + periods[i].conditions + ", Max " + h + " Min " + l + '">';
                    w += '<div><img class="weatherimg" src="' + periods[i].icon_url + '"/></div>';
                    w += '<div class="weatherh">' + h + '</div><div class="weatherl">' + l + "</div>";
                    w += "</td>";
                }
                w += "</tr>";
                if (data.alerts && data.alerts.length > 0) {
                    w += '<tr><td colspan="' + periods.length + '" style="padding:0;">';
                    var list = [];
                    for (var i = 0; i < data.alerts.length; ++i) list.push(
data.alerts[i].description + "!");
                    if (link) w += '<a href="' + link + '">';
                    w += '<div class="weatheralt rwwarningbox">' + list.join("<br>") + "</div>";
                    if (link) w += "</a>";
                    w += "</td></tr>";
                }
                w += "</table>";
                weatherdiv.innerHTML = "<div>" + w + "</div>";
            }
        });
    }
    var maptype = document.getElementById("kmltype");
    var waterflowdiv = document.getElementById("waterflowdiv");
    if (coords.length > 0 && waterflowdiv) if (maptype && (
maptype.innerHTML == "topo" || staticdebug)) {
        function extractVal(str, label) {
            var s = str.indexOf(label);
            if (s < 0) return "";
            s = str.indexOf(":", s);
            if (s < 0) return "";
            var e = str.indexOf(" ", s);
            return str.substring(s + 1, e);
        }
        var url = "http://d5a.net/rwr?waterflow=winfo=" + coords;
        if (staticdebug) url = "http://d5a.net/rwr?waterflow=winfo=" + "33.7717,-111.1197";
        $.getJSON(geturl(url), function(data) {
            var w = "";
            if (data && data.list && data.list.length > 0) {
                var str = data.list[0];
                var num = parseInt(extractVal(str, "Drain"));
                if (!isNaN(num)) {
                    if (metric) w = Math.round(num) + "km<sup>2</sup>"; else w = Math.round(
num * .386) + "mi<sup>2</sup>";
                    w = '<span class="notranslate">~' + w + "</span>";
                    if (num > 100
) w += '<hr id="cd5" title="May massively flood with heavy rains and keep flooded for many days afterwards">'; else if (
num > 50) w += '<hr id="cd4" title="May massively flood with heavy rains">'; else if (num > 25) w += '<hr id="cd3" title="May flood with heavy rains">';

                }
            }
            waterflowdiv.className = "";
            waterflowdiv.innerHTML += " " + w;
        });
    }
    var tt, it, isrc = null, ttmove = 0, ttshow = 0;
    var boxes = document.getElementsByClassName("galleryboxview");
    document.onmousemove = function() {
        if (tt && it && ttmove > 0) {
            tt.style.display = "none";
            it.src = "";
        }
        ++ttmove;
        ttshow = -3;
    };
    for (var i = 0; i < boxes.length; i++) {
        boxes[i].onmouseout = function() {
            isrc = null;
        };
        boxes[i].onmouseover = function() {
            var img = $(this).find("#highres");
            if (!img || img.length == 0) return;
            isrc = img[0].innerHTML;
            if (!tt) {
                tt = document.createElement("div");
                tt.style.cssText = "background-color:none; position: fixed; top:5%; left:5%; zIndex:9999; width:90%; height: 90%; text-align:center; display:none";
                it = document.createElement("img");
                it.style.cssText = "width:auto; height:100%;border: 1px solid #404040;margin:10px;background-color:#f0f0f0";
                it.src = isrc;
                it.alt = "LOADING...";
                tt.appendChild(it);
                document.body.appendChild(tt);
            }
        };
    }
}

function deftext(str) {
    return str == null || str == "" || str[0] == "&" || str[0] == " " || str.charCodeAt(0) == 160;
}

function urldecode(str) {
    return decodeURIComponent(str).split("+").join(" ");
}

function urlencode(str) {
    return encodeURIComponent(str);
}

function urlget(url, idstr, defstr) {
    var str = defstr;
    var pos = url.indexOf(idstr);
    if (pos >= 0) {
        pos += idstr.length;
        var posend = url.indexOf("&", pos);
        if (posend > 0) str = url.substring(pos, posend); else str = url.substring(pos);
        str = urldecode(str);
    }
    return str;
}

function addparam(param, id, val) {
    var pid = "&" + id + "=";
    var i = param.indexOf(pid);
    if (i < 0) param += pid + val; else {
        var a = param.substr(0, i);
        var b = param.substr(i + pid.length);
        param = a + pid + val;
        if (b != val) {
            if (b.length > 0 && b[0] != "&") param += ",";
            param += b;
        }
    }
    return param;
}

function getparam(param, id, def) {
    var idstr = "&" + id + "=";
    return urlget(param, idstr, def);
}

function setparam(param, id, val) {
    var pid = "&" + id + "=";
    var i = param.indexOf(pid);
    if (i >= 0) {
        var b = "";
        var a = param.substr(0, i);
        var l = param.indexOf("&", i + 1);
        if (l >= 0) b = param.substr(l);
        param = a + b;
    }
    param += pid + val;
    return param;
}

var sortby = "";

function loadFormInterface() {
    function setinput(id, inputstr, keysubmit) {
        elem = document.getElementById(id);
        if (!elem) return;
        var str = getparam(url, id, elem.innerHTML);
        var color;
        color = "black";
        if (deftext(str)) color = "silver";
        elem.innerHTML = inputstr + "color:" + color + ';" onfocus="inputfocus(this)" onkeydown="inputkey(event,' + keysubmit + ')" value="' + str + '">';
    }
    var url = window.location.href.toString();
    var locfind = document.getElementById("locfind");
    if (locfind) {
        setinput("locname",
 '<input id="locnameval" class="submitoff" autocomplete="on" style="width:90%;', "locsearch");
        setinput("locdist",
 '<input id="locdistval" class="submitoff" autocomplete="on" size="15" style="', "locsearch");
        locfind.innerHTML = '<input class="submitoff" type="submit" onclick="locsearch()" value="' + locfind.innerHTML + '">';
        var mapfind = document.getElementById("mapfind");
        if (mapfind) mapfind.innerHTML = '<input class="submitoff" type="submit" onclick="mapsearch()" value="' + mapfind.innerHTML + '">';

    }
    var regfind = document.getElementById("regfind");
    if (regfind) {
        setinput("regname",
 '<input id="regnameval" class="submitoff" autocomplete="on" style="width:30em;', "regsearch");
        regfind.innerHTML = '<input class="submitoff" type="submit" onclick="regsearch()" value="' + regfind.innerHTML + '">';
        var regnameval = urldecode(getCookie("regnameval"));
        if (regnameval != "") {
            var elem = document.getElementById("regnameval");
            elem.value = regnameval;
            if (url.split("?").length > 1) elem.focus();
        }
    }
    var filters = document.getElementById("filters");
    if (filters) {
        var chks = document.getElementsByClassName("optionchk");
        for (var i = 0; i < chks.length; i++) {
            var id = chks[i].id + "chk";
            var checked = url.indexOf("&" + id) > 0;
            chks[i].innerHTML = '<label style="white-space: nowrap;"><input id="' + id + '" class="optionschk submitoff" type="checkbox" onclick="toggle' + id + "(" + "'" + id + "'" + ')" ' + (
checked ? "checked" : "") + ">" + chks[i].innerHTML + "</label>";
            toggleOption(id, checked);
        }
    }
    if (filters) {
        var chks = document.getElementsByClassName("rwSort");
        var sortbydiv = document.getElementById("sortby");
        if (sortbydiv) sortby = sortbydiv.innerHTML;
        for (var i = 0; i < chks.length; i++) {
            var img = "rwsortud.gif";
            if (chks[i].id == sortby) img = "rwsortdn.gif";
            if ("-" + chks[i].id == sortby) img = "rwsortup.gif";
            chks[i].className += " notranslate";
            chks[i].style.cssText += "cursor: pointer; background-repeat: no-repeat; background-position: center right; padding-right:9px; padding-left:0px; background-image: url(http://sites.google.com/site/rwicons/" + img + ");";
            chks[i].onclick = function rwsort(event) {
                var offset = $(this).offset();
                var height = $(this).height();
                var top = offset.top;
                var center = top + height / 2;
                if (event.pageY < center) {
                    psortby = "-" + this.id;
                    nsortby = this.id;
                } else {
                    psortby = this.id;
                    nsortby = "-" + this.id;
                }
                sortby = sortby == psortby ? nsortby : psortby;
                filtersearch();
            };
        }
    }
    var chks = document.getElementsByClassName("filtersel");
    for (var i = 0; i < chks.length; i++) {
        var mid = chks[i].id + "flt";
        var list = chks[i].innerHTML.split(",");
        var str = "";
        var param = urlget(url, chks[i].id + "=", "").split(",");
        var cookie = getCookie(mid).split(",");
        for (var l = 0; l < list.length; ++l) {
            var checked = cookie.indexOf(list[l]) >= 0;
            if (param.length > 0 && param[0] != "") checked = param.indexOf(list[l]) >= 0;
            str += "<option " + (checked ? 'selected="selected"' : "") + 'value="' + list[l] + '">' + list[l] + "</option>";

            if (checked) {
                var subopt = document.getElementsByClassName(mid + list[l]);
                for (var c = 0; c < subopt.length; c++) subopt[c].style.display = "";
            }
        }
        chks[i].innerHTML = '<select id="' + mid + '" class="' + mid + '" onclick="toggleFilterSel(this)">' + str + "</select>";
    }
    var chks = document.getElementsByClassName("filterchk");
    for (var i = 0; i < chks.length; i++) {
        var mid = chks[i].id + "flt";
        var list = chks[i].innerHTML.split(",");
        var icons = document.getElementById(chks[i].id + "icons");
        var str = "";
        var param = urlget(url, chks[i].id + "=", "").split(",");
        for (var l = 0; l < list.length; ++l) {
            var id = mid + "_" + list[l];
            var checked = getCookie(id) != "";
            if (param.length > 0 && param[0] != "") checked = param.indexOf(list[l]) >= 0;
            if (icons
) str += " " + '<label title="' + icons.childNodes[l].title + '"><input id="' + id + '" class="' + mid + '" style="margin:0;padding=0" type="checkbox" onclick="toggleFilter(' + "'" + id + "'" + ')" ' + (
checked ? "checked" : ""
) + ">" + icons.childNodes[l].innerHTML + "</label>"; else str += " " + '<label title="' + list[l] + '"><input id="' + id + '" class="' + mid + '" style="" type="checkbox" onclick="toggleFilter(' + "'" + id + "'" + ')" ' + (
checked ? "checked" : "") + ">" + list[l] + "</label>";
        }
        chks[i].innerHTML = str;
    }
    var filter = document.getElementById("filterbutton");
    if (filter) filter.innerHTML = '<input class="submitoff" type="submit" onclick="filtersearch()" value="' + filter.innerHTML + '">';

    var starsh = document.getElementById("starshowhide");
    if (starsh && filters) {
        var links = starsh.getElementsByTagName("A");
        for (var i = 0; i < links.length; ++i) links[i].removeAttribute("href");
        var border = "border:2px solid #0070B0";
        var children = starsh.getElementsByTagName("IMG");
        for (var i = 0; i < children.length; ++i) {
            children[i].style.cssText = border;
            children[i].removeAttribute("href");
            children[i].active = true;
            children[i].q = 0;
            if (children[i].alt) children[i].q = Number(children[i].alt);
            children[i].onclick = function showhide(event) {
                this.active = !this.active;
                this.style.cssText = this.active ? border : "";
                var qmap = qmaps[this.q] = this.active ? map : null;
                for (var j = 0; j < markers.length; ++j) {
                    if (markers[j].q == this.q) {
                        markers[j].setMap(qmap);
                        if (markers[j].highlight) markers[j].highlight.setMap(qmap);
                    }
                }
            };
        }
    }
    var locdefault = document.getElementById("locdefault");
    if (locdefault) {
        var id = "locsearchchk";
        toggleOption(id, true);
    }
    var chks = document.getElementsByClassName("slideshowchk");
    for (var i = 0; i < chks.length; i++
) chks[i].innerHTML = '<label style="white-space: nowrap;"><input class="slideshowschk submitoff" type="checkbox" onclick="toggleSlideshow()" ' + (
slideshowchk ? "checked" : "") + ">" + chks[i].innerHTML + "</label>";
    toggleSlideshow(slideshowchk);
    var elems = document.getElementsByClassName("optionform");
    var urllink = window.location.href;
    var urllink = urllink.split("#")[0].split("?");
    if (urllink.length > 1) {
        var ulink = urllink[1].replace("&locname=", "&noloc=").replace("&locsearchchk=on", "");
        for (var i = 0; i < elems.length; i++) {
            var links = elems[i].getElementsByTagName("A");
            for (var l = 0; l < links.length; ++l) {
                var href = links[l].attributes["href"];
                if (href && href.value) {
                    var str = href.value;
                    if (str.indexOf("?") >= 0) str += "&" + ulink; else str += "?" + ulink;
                    href.value = str;
                }
            }
        }
    }
    CollapsibleLists.apply();
}

var searchmapn = -1;

var searchmappt = [];

function searchmap() {
    map.setOptions({
        draggableCursor: "crosshair"
    });
    var element = document.getElementById("searchinfo");
    if (element) element.innerHTML = '<span class="rwwarningbox"><b>CLICK ON MAP TO DEFINE SEARCH AREA</b></span>';

    searchmapn = 0;
}

var searchmaprectangle;

function searchmaprun() {
    map.setOptions({
        draggableCursor: ""
    });
    searchmapn = -1;
    searchmappt = [];
    var element = document.getElementById("searchinfo");
    if (element) element.innerHTML = '<span class="rwwarningbox"><b>SEARCHING...</b></span>';
    mapsearchbounds(searchmaprectangle.bounds, -1);
}

function mapsearchbounds(bounds, zoom) {
    var locsearchchk = document.getElementById("locsearchchk");
    if (map != null && locsearchchk != null) {
        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();
        locsearchchk.checked = true;
        var v = "Coord:" + Math.round(sw.lat() * 1e3) / 1e3 + "," + Math.round(sw.lng() * 1e3
) / 1e3 + "," + Math.round(ne.lat() * 1e3) / 1e3 + "," + Math.round(ne.lng() * 1e3) / 1e3;
        if (zoom >= 0) v += "," + zoom;
        document.getElementById("locnameval").value = v;
    }
    filtersearch();
}

function mapsearch() {
    mapsearchbounds(map.getBounds(), map.getZoom());
}

function fbusersearch() {
    var user = prompt("Please enter your Facebook name", getCookie("fbuser"));
    if (user) {
        setCookie("fbuser", user);
        document.body.style.cursor = "wait";
        window.location.href = "http://ropewiki.com/Location?onlycuser=" + user.split(" ").join("") + "%40Facebook&sortby=-Has_condition_date";

    }
}

function regsearch() {
    var regnameval = document.getElementById("regnameval");
    if (regnameval.value != "" && deftext(regnameval.value)) return;
    var url = window.location.href;
    var url = url.split("#")[0].split("?")[0];
    var val = regnameval.value;
    if (val.length > 0) url += "?region=" + urlencode(val);
    setCookie("regnameval", urlencode(val));
    var buttons = document.getElementsByClassName("submitoff");
    for (var i = 0; i < buttons.length; i++) buttons[i].disabled = true;
    document.body.style.cursor = "wait";
    window.location.href = url;
}

function filtersearch(linkurl) {
    var url = window.location.href;
    if (typeof linkurl != "undefined") url = linkurl;
    var url = url.split("#")[0].split("?")[0];
    var param = "";
    var optionschks = document.getElementsByClassName("optionschk");
    if (optionschks != null) for (var i = 0; i < optionschks.length; i++) if (optionschks[i].checked
) param = addparam(param, optionschks[i].id, "on");
    var filterschk = document.getElementById("filterschk");
    if (filterschk != null && filterschk.checked) {
        var chks = document.getElementsByClassName("filtersel");
        for (var i = 0; i < chks.length; i++) if (chks[i].style.display != "none") {
            var mid = chks[i].id + "flt";
            var list = chks[i].getElementsByClassName(mid);
            for (var l = 0; l < list.length; ++l) {
                var x = list[l].selectedIndex;
                var y = list[l].options;
                param = addparam(param, chks[i].id, y[x].text);
            }
        }
        var chks = document.getElementsByClassName("filterchk");
        for (var i = 0; i < chks.length; i++) {
            var mid = chks[i].id + "flt";
            var list = document.getElementsByClassName(mid);
            var attr = [];
            for (var l = 0; l < list.length; l++) if (list[l].checked) attr.push(
list[l].id.substring(list[l].id.lastIndexOf("_") + 1));
            param = addparam(param, chks[i].id, attr.join());
        }
    }
    var locsearchchk = document.getElementById("locsearchchk");
    if (typeof linkurl == "undefined") if (locsearchchk != null && locsearchchk.checked) {
        var locnameval = document.getElementById("locnameval").value;
        if (!deftext(locnameval)) {
            var locdistval = document.getElementById("locdistval").value;
            if (deftext(locdistval)) if (locnameval.substr(0, 6) != "Coord:") locdistval = "50mi";
            url = "http://ropewiki.com/Location";
            param = addparam(param, "locname", urlencode(locnameval));
            if (!deftext(locdistval)) param = addparam(param, "locdist", urlencode(locdistval));
        }
    }
    var optionsurl = document.getElementsByClassName("optionsurl");
    if (optionsurl != null) for (var i = 0; i < optionsurl.length; i++) {
        var val = optionsurl[i].innerHTML;
        if (val.length > 0) param = addparam(param, optionsurl[i].id, val);
    }
    if (sortby) param = addparam(param, "sortby", sortby);
    if (param != "") url += "?jform" + param;
    if (typeof linkurl != "undefined") return url;
    var buttons = document.getElementsByClassName("submitoff");
    for (var i = 0; i < buttons.length; i++) buttons[i].disabled = true;
    document.body.style.cursor = "wait";
    window.location.href = url;
}

function locsearch() {
    var locnameval = document.getElementById("locnameval");
    if (locnameval != null && deftext(locnameval.value)) return;
    filtersearch();
}

function toggleFilterSel(elem, checked) {
    var x = elem.selectedIndex;
    var y = elem.options;
    if (checked == null) checked = y[x].text;
    elem.value = checked;
    for (var l = 0; l < y.length; ++l) if (y[l].text != "") {
        var text = y[l].text;
        var chks = document.getElementsByClassName(elem.id + text);
        for (var i = 0; i < chks.length; i++) chks[i].style.display = text == checked ? "" : "none";
    }
    setCookie(elem.id, checked);
    return checked;
}

function toggleFilter(id, checked) {
    if (checked == null) checked = document.getElementById(id).checked;
    document.getElementById(id).checked = checked;
    if (checked) setCookie(id, "on"); else setCookie(id, "");
    return checked;
}

function toggleOption(id, forcechecked) {
    checked = toggleFilter(id, forcechecked);
    elems = document.getElementsByClassName(id.split("chk").join("on"));
    for (var i = 0; i < elems.length; i++) elems[i].style.display = checked ? "" : "none";
    elems = document.getElementsByClassName(id.split("chk").join("off"));
    for (var i = 0; i < elems.length; i++) elems[i].style.display = checked ? "none" : "";
    return checked;
}

function togglelocsearchchk(id) {
    toggleOption(id);
}

function togglefilterschk(id) {
    if (!toggleOption(id)) {
        filtersearch();
    }
}

function toggledisplayschk(id) {
    if (!toggleOption(id)) {
        elems = document.getElementsByClassName(id.split("chk").join("on"));
        for (var i = 0; i < elems.length; i++) toggleFilter(elems[i].id + "chk", false);
        filtersearch();
    }
}

function togglenomapchk(id) {
    filtersearch();
}

function togglefulltablechk(id) {
    filtersearch();
}

function addhighlight(idlist) {
    for (var i = 0; i < markers.length; ++i) if (idlist.indexOf(markers[i].name) >= 0) {
        var m = markers[i];
        if (m.highlight) continue;
        var iconsize = 16;
        var highlight = new google.maps.Marker({
            position: m.getPosition(),
            icon: "http://ropewiki.com/images/e/e6/Starn_y.png",
            draggable: false,
            clickable: false,
            optimized: false,
            zIndex: m.zIndex - 1
        });
        highlight.setMap(qmaps[m.q]);
        m.highlight = highlight;
        if (m.infowindow && m.infowindow.content
) m.infowindow.content = m.infowindow.content.replace('value="+"', 'value="*"');
    }
    var pinicons = document.getElementsByClassName("pinicon");
    for (var i = 0; i < pinicons.length; ++i) if (idlist.indexOf(pinicons[i].id) >= 0) pinicons[i].style.backgroundImage = "url(http://ropewiki.com/images/e/e6/Starn_y.png)";

}

var oldid = "@";

function addbutton(id) {
    function reattribute(elem) {
        var elems = elem.childNodes;
        for (var e = 0; e < elems.length; ++e) {
            var elem = elems[e];
            if (elem.attributes) for (var a = 0; a < elem.attributes.length; ++a) {
                if (elem.attributes[a].value.indexOf(oldid) >= 0
) elem.attributes[a].value = elem.attributes[a].value.split(oldid).join(id);
            }
            reattribute(elem);
        }
    }
    var kmladdbutton = document.getElementById("kmladdbutton");
    if (kmladdbutton) {
        reattribute(kmladdbutton);
        var kmlform = kmladdbutton.getElementsByTagName("BUTTON");
        if (kmlform.length > 0) kmlform[0].click();
        if (lastinfowindow) lastinfowindow.close();
        var idlist = [ id ];
        addhighlight(idlist);
        oldid = id;
    }
}

function inputkey(event, submitfunc) {
    if (event.which == 13) submitfunc();
}

function inputfocus(elem) {
    elem.style.color = "black";
    if (deftext(elem.value)) {
        elem.value = "";
    }
}

function getTextFromHyperlink(linkText) {
    var start = linkText.search("href=");
    var str = linkText.slice(start).split('"')[1];
    return str;
}

var map;

var gxml;

var zindex = 0;

var markers = [];

var handlekeys = false;

var lastinfowindow = null;

function displayinfowindow(marker) {
    tooltip.hide();
    if (lastinfowindow) lastinfowindow.close();
    marker.infowindow.setZIndex(++zindex);
    marker.infowindow.open(map, marker);
    getgeoelevation(marker.getPosition(), "infoelevation", "~");
    lastinfowindow = marker.infowindow;
}

function pinicon(id, icon) {
    if (!icon || typeof icon == "undefined") icon = "http://ropewiki.com/images/8/86/PinMap.png";
    return '<img src="' + icon + '" id="' + id + '" class="pinicon" title="Show location on map" style="cursor:pointer;vertical-align:middle" onclick=\'pinmap(this.id)\'/>';
}

function pinmap(id) {
    for (var i = 0; i < markers.length; ++i) if (markers[i].name == id) {
        var mapboxoffset = $("#mapbox").offset().top;
        if (mapboxoffset < $(window).scrollTop()) window.scrollTo(0, mapboxoffset);
        $("#mapcover").css({
            display: "none"
        });
        map.panTo(markers[i].position);
        window.setTimeout(function() {
            displayinfowindow(markers[i]);
        }, 500);
        return;
    }
}

var kmliconlist = [ "http://ropewiki.com/images/7/75/Starn00.png",
 "http://ropewiki.com/images/8/87/Starn10.png", "http://ropewiki.com/images/1/15/Starn20.png",
 "http://ropewiki.com/images/d/d3/Starn30.png", "http://ropewiki.com/images/a/a0/Starn40.png",
 "http://ropewiki.com/images/c/cc/Starn50.png", "http://ropewiki.com/images/b/b6/Starn01.png",
 "http://ropewiki.com/images/1/12/Starn11.png", "http://ropewiki.com/images/b/b7/Starn21.png",
 "http://ropewiki.com/images/2/2e/Starn31.png", "http://ropewiki.com/images/1/1d/Starn41.png",
 "http://ropewiki.com/images/f/fe/Starn51.png", "http://ropewiki.com/images/3/3a/Starn02.png",
 "http://ropewiki.com/images/a/a4/Starn12.png", "http://ropewiki.com/images/1/13/Starn22.png",
 "http://ropewiki.com/images/3/32/Starn32.png", "http://ropewiki.com/images/7/77/Starn42.png",
 "http://ropewiki.com/images/1/11/Starn52.png", "http://ropewiki.com/images/b/bd/Starn03.png",
 "http://ropewiki.com/images/0/09/Starn13.png", "http://ropewiki.com/images/9/98/Starn23.png",
 "http://ropewiki.com/images/0/07/Starn33.png", "http://ropewiki.com/images/f/fb/Starn43.png",
 "http://ropewiki.com/images/d/dc/Starn53.png", "http://ropewiki.com/images/2/25/Starn04.png",
 "http://ropewiki.com/images/7/73/Starn14.png", "http://ropewiki.com/images/e/ea/Starn24.png",
 "http://ropewiki.com/images/6/6a/Starn34.png", "http://ropewiki.com/images/3/31/Starn44.png",
 "http://ropewiki.com/images/2/27/Starn54.png", "http://ropewiki.com/images/2/29/Starn05.png",
 "http://ropewiki.com/images/d/d9/Starn15.png", "http://ropewiki.com/images/e/e0/Starn25.png",
 "http://ropewiki.com/images/0/09/Starn35.png", "http://ropewiki.com/images/8/81/Starn45.png",
 "http://ropewiki.com/images/3/37/Starn55.png" ];

var nlist = 1e4;

var qmaps = [];

function loadlist(list, fitbounds) {
    if (qmaps.length == 0) for (var i = 0; i < 6; ++i) qmaps.push(map);
    var kmlstarlist;
    var kmlstars = document.getElementById("kmlstars");
    if (kmlstars != null) kmlstarlist = kmlstars.innerHTML.split(",");
    var kmladdbutton = document.getElementById("kmladdbutton");
    var calcnearby = document.getElementById("kmlnearby");
    if (calcnearby) {
        for (i = 0; i < list.length; ++i) {
            var o = list[i];
            var sortlist = [];
            for (ic = 0; ic < list.length; ++ic) sortlist.push({
                id: list[ic].id.split(" ")[0],
                distance: Distance(o.location, list[ic].location)
            });
            sortlist.sort(function(a, b) {
                return a.distance - b.distance;
            });
            var distlist = [];
            for (ic = 1; ic < sortlist.length && ic <= 5 && sortlist[ic].distance < 20; ++ic
) distlist.push(sortlist[ic].id);
            id = o.id.substr(1).split(" ")[0];
            if (!id || id == "") continue;
            elems = document.getElementsByClassName("nearby");
            for (var e = 0; e < elems.length && elems[e].id != id; ++e) ;
            if (e < elems.length) elems[e].innerHTML = "~" + distlist.join();
        }
    }
    var i, n = list.length;
    for (i = 0; i < list.length; ++i) {
        var item = list[i];
        if (!item.id || item.id == "") continue;
        ++n;
        --nlist;
        var zindexm = 5e3 + nlist;
        if (item.q) zindexm += item.q * 1e3;
        var iconm = "";
        if (item.icon) iconm = item.icon;
        var descm = "", sdescm = "";
        if (item.description) {
            str = item.description;
            if (metric) {
                var pk = str.split(" ");
                for (var p = 0; p < pk.length; ++p) {
                    var pre = "";
                    var ps = pk[p];
                    var idot = ps.indexOf(":");
                    if (i >= 0) {
                        pre = ps.substr(0, idot + 1);
                        ps = ps.substr(idot + 1);
                    }
                    if (ps[0] >= "0" && ps[0] <= "9") {
                        var unit = ps.slice(-2);
                        if (unit == "mi") pk[p] = pre + uconv(ps, mi); else if (unit == "ft"
) pk[p] = pre + uconv(ps, ft);
                    }
                }
                str = pk.join(" ");
            }
            str = acaconv(str);
            descm = sdescm = str;
        }
        sdescm = '<div class="notranslate">' + sdescm.split("*").join("&#9733;") + "</div>";
        var iwheight = "50px";
        if (item.thumbnail) {
            var style = "";
            var width = "";
            var height = 'height="150px"';
            var fsplit = item.thumbnail.split("/");
            if (fsplit.length > 0) {
                var fname = fsplit[fsplit.length - 1];
                var w = parseInt(fname);
                if (w > 0) {
                    width = 'width="' + w + 'px"';
                    style = 'style="border:1px solid #808080"';
                    iwheight = "200px";
                }
            }
            sdescm += "<div><img " + style + " " + width + " " + height + ' src="' + item.thumbnail + '"/></div>';
        }
        {
            if (item.kmlfile && item.kmlfile != "") {
                sdescm += "<div><i>";
                sdescm += "<a href=\"javascript:toggleRoutes('" + urlencode(item.kmlfile
) + "','" + urlencode(item.id) + "');\">Show KML Map of the route</a>";
                sdescm += "</i></div>";
            }
            var extra = '<br><span id="infoelevation"></span> - ';
            extra += '<a href="http://ropewiki.com/Weather?pagename=' + item.id + '" target="_blank">Weather</a>';
            extra += ' - <a href="http://ropewiki.com/Location?locdist=30mi&locname=Coord:' + item.location.lat + "," + item.location.lng + '">Search nearby</a>';
            sdescm += displaydirections(item.location.lat, item.location.lng, extra);
        }
        var contentString = '<div style="width:auto;height:auto;overflow:hidden;"><b class="notranslate">' + sitelink(
item.id, nonamespace(item.id)) + "</b>";
        if (kmladdbutton
) contentString += '<input class="submitoff addbutton" type="submit" onclick="addbutton(\'' + item.id.split(
"'").join("%27") + '\')" value="+">';
        contentString += "<hr/>" + sdescm + "</div>";
        if (item.infocontent) contentString = item.infocontent;
        var infowindowm = new google.maps.InfoWindow({
            content: contentString
        });
        var descriptionString = '<b class="nostranslate">' + nonamespace(item.id
) + "</b><br>" + descm.split("*").join("&#9733;");
        if (item.infodescription) descriptionString = item.infodescription;
        var q = -1, qmap = map;
        if (item.q != null) qmap = qmaps[q = item.q];
        var positionm = new google.maps.LatLng(item.location.lat, item.location.lng);
        var marker = new google.maps.Marker({
            position: positionm,
            map: qmap,
            icon: iconm,
            name: nonamespace(item.id),
            description: descriptionString,
            infowindow: infowindowm,
            zIndex: zindexm,
            optimized: false
        });
        marker.q = q;
        marker.oposition = positionm;
        google.maps.event.addListener(marker, "mouseover", function(e) {
            this.highlight = new google.maps.Marker({
                position: this.getPosition(),
                icon: "http://ropewiki.com/images/3/39/Starn_b.png",
                draggable: false,
                clickable: false,
                optimized: false,
                zIndex: this.zIndex - 1
            });
            this.priority = 0;
            this.highlight.setMap(map);
            tooltip.show(this.description, e, this);
        });
        google.maps.event.addListener(marker, "mouseout", function() {
            tooltip.hide(this);
            if (this.highlight != null) {
                this.highlight.setMap(null);
                this.highlight = null;
            }
        });
        markers.push(marker);
        google.maps.event.addListener(marker, "click", function() {
            displayinfowindow(this);
        });
        boundslist.extend(positionm);
    }
    var kmladdlist = document.getElementById("kmladdlist");
    if (kmladdlist) {
        var addlist = kmladdlist.innerHTML.split(";");
        if (addlist.length > 0) addhighlight(addlist);
    }
    if (n > 0 && fitbounds) {
        var ne = boundslist.getNorthEast();
        var sw = boundslist.getSouthWest();
        if (Distance({
            lat: ne.lat(),
            lng: ne.lng()
        }, {
            lat: sw.lat(),
            lng: sw.lng()
        }) < 1) {
            map.setZoom(11);
            map.panTo(markers[0].position);
        } else {
            map.fitBounds(boundslist);
            map.panToBounds(boundslist);
        }
        zindex = 6e3;
    }
    return n;
}

var kmllistn = 0;

var kmllisturl, tablelisturl;

var kmlsummary;

function getrwlist(data) {
    var list = [];
    $.each(data.query.results, function(i, item) {
        var v;
        ++kmllistn;
        var obj = {
            id: item.fulltext
        };
        v = item.printouts["Has coordinates"];
        if (v && v.length > 0) {
            obj.location = {
                lat: v[0].lat,
                lng: v[0].lon
            };
            v = item.printouts["Has star rating"];
            if (v && v.length > 0) {
                obj.q = Number(v[0]);
                v = item.printouts["Has location class"];
                if (v && v.length > 0) obj.icon = kmliconlist[obj.q + Number(v[0]) * 6];
            }
            if (kmlsummary) if (obj.id[0] == "#") {
                var num = obj.id.slice(1).split(" ")[0];
                obj.icon = "http://sites.google.com/site/rwicons/bg" + obj.q + "_" + num + ".png";
            }
            v = item.printouts["Has summary"];
            if (v && v.length > 0) obj.description = v[0];
            v = item.printouts["Has banner image file"];
            if (v && v.length > 0) obj.thumbnail = v[0];
            v = item.printouts["Has KML file"];
            if (v && v.length > 0) obj.kmlfile = v[0];
            v = item.printouts["Located in region"];
            if (v && v.length > 0) obj.region = v[0].fulltext;
            list.push(obj);
        }
    });
    return list;
}

function getkmllist(data) {
    var list = getrwlist(data);
    if (typeof data["query-continue-offset"] == "undefined") morestop();
    loadlist(list, true);
}

function findtag(children, tag, f) {
    function findlist(children, tag) {
        var list = [];
        for (var i = 0; i < children.length; ++i) {
            var item = children[i];
            if (item.nodeName == tag) list.push(item); else list = list.concat(findlist(
item.childNodes, tag));
        }
        return list;
    }
    var list = findlist(children, tag);
    for (var i = 0; i < list.length; ++i) f(list[i]);
}

function morestop() {
    var loccount = document.getElementById("loccount");
    if (loccount) loccount.parentNode.removeChild(loccount);
    var loadmore = document.getElementById("loadmore");
    if (loadmore) loadmore.parentNode.removeChild(loadmore);
    var morelist = $(".loctable .smw-template-furtherresults a");
    if (morelist.length == 1) morelist[0].parentNode.removeChild(morelist[0]);
}

var morestep = 100;

var moremapc = 0, morelistc = 0;

function morekmllist(loccontinue, loctotal) {
    loadingquery = true;
    console.log("loadingquery true");
    ++moremapc;
    map.setOptions({
        draggableCursor: "wait"
    });
    $.getJSON(geturl(kmllisturl + "|offset=" + loccontinue), getkmllist).always(function() {
        setTimeout(function() {
            loadingquery = false;
            console.log("loadingquery false");
        }, 5e3);
        if (--moremapc <= 0) map.setOptions({
            draggableCursor: ""
        });
    });
    if (loccontinue > 0) {
        var tablelist = $(".loctable .loctabledata");
        if (tablelist.length == 1) {
            ++morelistc;
            document.body.style.cursor = "wait";
            $.get(geturl(tablelisturl + "&offset=" + loccontinue), function(data) {
                var newtablelist = $("#morekmllist").html($(data).find(".loctable").html());
                if (newtablelist.length == 1) {
                    var newdocument = newtablelist[0];
                    newdocument.getElementsByName = function(name) {
                        var list = [];
                        return list;
                    };
                    newdocument.getElementById = function(name) {
                        return null;
                    };
                    loadUserInterface(newdocument);
                    findtag(newdocument.childNodes, "TR", function(item) {
                        tablelist[0].appendChild(item);
                    });
                }
            }).always(function() {
                if (--morelistc <= 0) document.body.style.cursor = "";
            });
        }
    }
    loccontinue += morestep;
    if (loccontinue >= loctotal) {
        morestop();
        return;
    }
    var loadmore = document.getElementById("loadmore");
    if (loadmore) loadmore.innerHTML = '<button onclick="morekmllist(' + loccontinue + "," + loctotal + ')">+</button> ';

    var loccount = document.getElementById("loccount");
    if (loccount) loccount.innerHTML = loccontinue + " of ";
    var morelist = $(".loctable .smw-template-furtherresults a");
    if (morelist.length == 1) {
        morelist[0].href = "javascript:morekmllist(" + loccontinue + "," + loctotal + ");";
    }
}

function setmarker(lat, lng, z) {
    var myLatlng = new google.maps.LatLng(lat, lng);
    var infowindowm = new google.maps.InfoWindow({
        content: '<div class="textselect">' + displaylocation(lat, lng
) + '<div id="elevation"></div>' + '<div id="geocode" style="max-width:200px"></div>' + displaydirections(
lat, lng) + "</div>"
    });
    var marker = new google.maps.Marker({
        position: myLatlng,
        map: map,
        infowindow: infowindowm,
        optimized: false,
        zIndex: z
    });
    google.maps.event.addListener(marker, "click", function() {
        this.infowindow.open(map, this);
        getgeoelevation(this.getPosition(), "elevation", "Elevation: ");
        getgeocode(lat, lng, "geocode");
    });
    boundslist.extend(myLatlng);
}

function CLIP(xy, z) {
    return xy % (1 << z);
}

function TYZ(y, z) {
    return (1 << z) - y - 1;
}

function Box(px, py, pz, tsize) {
    function Clip(n, minValue, maxValue) {
        return Math.min(Math.max(n, minValue), maxValue);
    }
    function zxy2LL(size, pixelZ, pixelX, pixelY) {
        var mapSize = size * (1 << pixelZ);
        var tx = Clip(size * pixelX, 0, mapSize - 1) / mapSize - .5;
        var ty = .5 - Clip(size * pixelY, 0, mapSize - 1) / mapSize;
        var p = {
            lat: 90 - 360 * Math.atan(Math.exp(-ty * 2 * Math.PI)) / Math.PI,
            lng: 360 * tx
        };
        return p;
    }
    var p1 = zxy2LL(tsize, pz, px, py);
    var p2 = zxy2LL(tsize, pz, px + 1, py + 1);
    var b = {
        lat1: p1.lat,
        lat2: p2.lat,
        lng1: p1.lng,
        lng2: p2.lng
    };
    return b;
}

function WmsBox(b, epsg, invert) {
    function Wms(epsg, lat, lng) {
        var p = {
            x: lat,
            y: lng
        };
        if (epsg) {
            p.x = lng * 20037508.34 / 180;
            var sy = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
            p.y = sy * 20037508.34 / 180;
        }
        return p;
    }
    var p1 = Wms(epsg, b.lat1, b.lng1);
    var p2 = Wms(epsg, b.lat2, b.lng2);
    var wb = [ p1.x < p2.x ? p1.x : p2.x, p1.y < p2.y ? p1.y : p2.y, p1.x < p2.x ? p2.x : p1.x,
 p1.y < p2.y ? p2.y : p1.y ];
    if (invert) return wb[1] + "," + wb[0] + "," + wb[3] + "," + wb[2]; else return wb[0] + "," + wb[1] + "," + wb[2] + "," + wb[3];

}

var boundslist;

var loadingmap = true, loadingtiles = false, loadingtiles2 = false, loadingkml = false,
 loadingquery = false, loadingquery2 = false;

function isloadingmap() {
    return loadingmap || loadingtiles || loadingtiles2 || loadingkml || loadingquery || loadingquery2;
}

function initializemap() {
    var lasthighlight;
    tooltip = function() {
        var id = "tooltip";
        var top = 3;
        var left = 3;
        var maxw = 300;
        var speed = 10;
        var timer = 20;
        var endalpha = 95;
        var alpha = 0;
        var tt, t, c, b, h;
        var ie = document.all ? true : false;
        return {
            show: function(v, w, highlight) {
                if (!v || v == "") return;
                if (highlight && lasthighlight) if (highlight.highlight && lasthighlight.highlight
) if (highlight.priority > lasthighlight.priority) {
                    highlight.highlight.setMap(null);
                    highlight.highlight = null;
                    return;
                }
                if (lasthighlight && highlight != lasthighlight && lasthighlight.highlight) {
                    lasthighlight.highlight.setMap(null);
                    lasthighlight.highlight = null;
                }
                lasthighlight = highlight;
                if (tt == null) {
                    tt = document.createElement("div");
                    tt.style.backgroundColor = "white";
                    tt.style.padding = "3px";
                    tt.style.position = "absolute";
                    tt.style.zIndex = 6e4;
                    tt.style.fontFamily = "Arial,sans-serif";
                    tt.style.fontSize = "10px";
                    tt.setAttribute("id", id);
                    tt.className = "notranslate";
                    t = document.createElement("div");
                    t.setAttribute("id", id + "top");
                    c = document.createElement("div");
                    c.setAttribute("id", id + "cont");
                    b = document.createElement("div");
                    b.setAttribute("id", id + "bot");
                    tt.appendChild(t);
                    tt.appendChild(c);
                    tt.appendChild(b);
                    document.body.appendChild(tt);
                    tt.style.opacity = 0;
                    tt.style.filter = "alpha(opacity=0)";
                    document.onmousemove = this.pos;
                }
                tt.style.display = "block";
                if (c) c.innerHTML = v;
                tt.style.width = w ? w + "px" : "auto";
                if (!w && ie) {
                    t.style.display = "none";
                    b.style.display = "none";
                    tt.style.width = tt.offsetWidth;
                    t.style.display = "block";
                    b.style.display = "block";
                }
                if (tt.offsetWidth > maxw) {
                    tt.style.width = maxw + "px";
                }
                h = parseInt(tt.offsetHeight) + top;
                clearInterval(tt.timer);
                tt.timer = setInterval(function() {
                    tooltip.fade(1);
                }, timer);
            },
            pos: function(e) {
                var u = ie ? event.clientY + document.documentElement.scrollTop : e.pageY;
                var l = ie ? event.clientX + document.documentElement.scrollLeft : e.pageX;
                tt.style.top = u - h + "px";
                tt.style.left = l + left + "px";
            },
            fade: function(d) {
                var a = alpha;
                if (a != endalpha && d == 1 || a != 0 && d == -1) {
                    var i = speed;
                    if (endalpha - a < speed && d == 1) {
                        i = endalpha - a;
                    } else if (alpha < speed && d == -1) {
                        i = a;
                    }
                    alpha = a + i * d;
                    tt.style.opacity = alpha * .01;
                    tt.style.filter = "alpha(opacity=" + alpha + ")";
                } else {
                    clearInterval(tt.timer);
                    if (d == -1) {
                        tt.style.display = "none";
                    }
                }
            },
            hide: function(highlight) {
                if (highlight) if (highlight != lasthighlight) {
                    return;
                }
                if (typeof tt != "undefined") {
                    if (tt.timer) {
                        clearInterval(tt.timer);
                    }
                    tt.timer = setInterval(function() {
                        tooltip.fade(-1);
                    }, timer);
                }
            }
        };
    }();
    var mapbox = document.getElementById("mapbox");
    if (!mapbox) return;
    var mapOptions = {
        zoom: 13,
        scaleControl: true,
        keyboardShortcuts: false,
        mapTypeId: google.maps.MapTypeId.TERRAIN,
        mapTypeControl: true,
        mapTypeControlOptions: {
            mapTypeIds: [ "topo", "wtopo", "wtopoesri", "ocm", google.maps.MapTypeId.TERRAIN,
 google.maps.MapTypeId.HYBRID, "wsatesri", "mxtopo", "estopo", "frtopo", "chtopo", "nztopo" ],
            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
            position: google.maps.ControlPosition.TOP_RIGHT
        },
        zoomControl: true,
        zoomControlOptions: {
            position: google.maps.ControlPosition.LEFT_CENTER
        },
        streetViewControl: true,
        streetViewControlOptions: {
            position: google.maps.ControlPosition.LEFT_CENTER
        }
    };
    var coverDiv = document.createElement("DIV");
    coverDiv.id = "mapcover";
    coverDiv.className = "gmnoprint";
    coverDiv.style.cssText = "position:fixed;left:0;top:0;width:100%;height:100%;background-color:transparent;border-color:yellow;border-style: inset;border-width:2px";
    $(coverDiv).on("click", function(e) {
        toggleFullScreen(true);
    });
    var creditDiv = document.createElement("DIV");
    creditDiv.style.cssText = "font-size:x-small;";
    var credits = [];
    map = new google.maps.Map(mapbox, mapOptions);
    map.controls[google.maps.ControlPosition.BOTTOM_RIGHT].push(creditDiv);
    credits[google.maps.MapTypeId.TERRAIN] = " ";
    credits[google.maps.MapTypeId.HYBRID] = " ";
    var relief = new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://s3-us-west-1.amazonaws.com/ctrelief/relief/" + z + "/" + CLIP(p.x, z
) + "/" + CLIP(p.y, z) + ".png";
        },
        maxZoom: 16,
        name: "Topo",
        opacity: .25,
        tileSize: new google.maps.Size(256, 256)
    });
    map.mapTypes.set("topo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://s3-us-west-1.amazonaws.com/caltopo/topo/" + z + "/" + CLIP(p.x, z
) + "/" + CLIP(p.y, z) + ".png";
        },
        maxZoom: 16,
        name: "TopoUSA",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["topo"] = "<a href='http://caltopo.com' target='_blank'>Topo map by CalTopo</a>";
    map.mapTypes.set("ocm", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://tile.opencyclemap.org/cycle/" + z + "/" + CLIP(p.x, z) + "/" + CLIP(p.y,
 z) + ".png";
        },
        maxZoom: 18,
        name: "OpenCycle",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["ocm"] = "<a href='http://thunderforest.com' target='_blank'>Topo map by Thunderforest</a>";
    map.mapTypes.set("wtopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://tile.thunderforest.com/outdoors/" + z + "/" + CLIP(p.x, z) + "/" + CLIP(
p.y, z) + ".png?apikey=bdbb04f2d5df40cbb86e9e6e1acff6f7";
        },
        maxZoom: 18,
        name: "TopoWorld",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["wtopo"] = "<a href='http://thunderforest.com' target='_blank'>Topo map by Thunderforest</a>";
    map.mapTypes.set("wtopoesri", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/" + z + "/" + CLIP(
p.y, z) + "/" + CLIP(p.x, z) + ".png";
        },
        maxZoom: 18,
        name: "TopoESRI",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["wtopoesri"] = "<a href='http://arcgisonline.com' target='_blank'>Topo map by ESRI</a>";
    map.mapTypes.set("wsatesri", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/" + z + "/" + CLIP(
p.y, z) + "/" + CLIP(p.x, z) + ".png";
        },
        maxZoom: 18,
        name: "SatESRI",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["wsatesri"] = "<a href='http://arcgisonline.com' target='_blank'>Sat map by ESRI</a>";
    map.mapTypes.set("estopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://www.ign.es/wmts/mapa-raster?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=MTN&STYLE=default&TILEMATRIXSET=GoogleMapsCompatible&TILEMATRIX=" + z + "&TILEROW=" + CLIP(
p.y, z) + "&TILECOL=" + CLIP(p.x, z) + "&FORMAT=image%2Fjpeg";
        },
        maxZoom: 17,
        name: "TopoSpain",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["estopo"] = "<a href='http://sigpac.mapa.es/fega/visor/' target='_blank'>Topo map by IGN</a>";
    map.mapTypes.set("frtopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://RopeWiki:b%40VM709c6Jix@wxs.ign.fr/8m34uuspdybhi9t89lpoeyfl/geoportail/wmts?SERVICE=WMTS&VERSION=1.0.0&REQUEST=GetTile&LAYER=GEOGRAPHICALGRIDSYSTEMS.MAPS&STYLE=normal&FORMAT=image/jpeg&TILEMATRIXSET=PM&TILEMATRIX=" + z + "&TILEROW=" + CLIP(
p.y, z) + "&TILECOL=" + CLIP(p.x, z);
        },
        maxZoom: 16,
        name: "TopoFrance",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["frtopo"] = "<a href='http://www.geoportail.gouv.fr' target='_blank'>Topo map by Geoportail</a>";
    map.mapTypes.set("mxtopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://gaiamapas1.inegi.org.mx/mdmCache/service/wms?LAYERS=MapaBaseTopograficov61_consombreado&FORMAT=image/jpeg&MINZOOMLEVEL=5&ZOOMOFFSET=5&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG:900913&BBOX=" + WmsBox(
Box(CLIP(p.x, z), CLIP(p.y, z), z, 256), true, false) + "&WIDTH=256&HEIGHT=256";
        },
        maxZoom: 16,
        name: "TopoMexico",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["mxtopo"] = "<a href='http://gaia.inegi.org.mx/mdm6/' target='_blank'>Topo map by INEGI</a>";
    map.mapTypes.set("nztopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return z < 13 ? "http://tiles-2.topomap.co.nz/tiles-topo250/" + z + "-" + CLIP(p.x, z
) + "-" + TYZ(CLIP(p.y, z), z
) + ".png" : "http://tiles-2.topomap.co.nz/tiles-topo50/" + z + "-" + CLIP(p.x, z) + "-" + TYZ(CLIP(
p.y, z), z) + ".png";
        },
        maxZoom: 15,
        name: "TopoNewZealand",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["nztopo"] = "<a href='http://www.topomap.co.nz/' target='_blank'>Topo map by Topomap.co.nz</a>";
    map.mapTypes.set("chtopo", new google.maps.ImageMapType({
        getTileUrl: function(p, z) {
            return "http://wmts20.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/3857/" + z + "/" + p.x + "/" + p.y + ".jpeg";
        },
        maxZoom: 18,
        name: "TopoSwiss",
        opacity: 1,
        tileSize: new google.maps.Size(256, 256)
    }));
    credits["chtopo"] = "<a href='http://map.geo.admin.ch' target='_blank'>Topo map by Swisstopo</a>";
    google.maps.event.addListener(map, "maptypeid_changed", function() {
        map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear();
        if (map.getMapTypeId() == "topo") map.overlayMapTypes.setAt(0, relief
); else map.overlayMapTypes.clear();
        var credit = credits[map.getMapTypeId()];
        if (!!credit && !!creditDiv) creditDiv.innerHTML = credit;
    });
    google.maps.event.addListener(map, "mouseout", function() {
        mapcover();
    });
    var maptype = document.getElementById("kmltype");
    if (maptype != null) {
        var mapset = maptype.innerHTML.split("@");
        if (mapset.length > 1) map.mapTypes[mapset[0]].maxZoom = parseInt(mapset[1]);
        map.setMapTypeId(mapset[0]);
    }
    loadingtiles = true;
    console.log("loadingtiles true");
    google.maps.event.addListener(map, "tilesloaded", function(evt) {
        setTimeout(function() {
            loadingtiles = false;
            console.log("loadingtiles false");
        }, 5e3);
    });
    google.maps.event.addListener(map, "bounds_changed", function(evt) {
        loadingtiles2 = true;
        console.log("loadingtiles2 true");
    });
    google.maps.event.addListener(map, "idle", function(evt) {
        setTimeout(function() {
            loadingtiles2 = false;
            console.log("loadingtiles2 false");
        }, 5e3);
    });
    boundslist = new google.maps.LatLngBounds();
    var kmlmap;
    var kmlmarker = document.getElementById("kmlmarker");
    if (kmlmarker != null) {
        console.log("kmlmarker");
        var coords = kmlmarker.innerHTML.split(",");
        if (coords != null && coords.length > 1) {
            kmlmap = "kmlmarker";
            setmarker(coords[0], coords[1], 0);
            map.setZoom(13);
            var latlng = new google.maps.LatLng(coords[0], coords[1]);
            map.panTo(latlng);
            var elevationdiv = document.getElementById("elevationdiv");
            if (elevationdiv) getgeoelevation(latlng, "elevationdiv", " ~");
        }
    }
    var kmlrect = document.getElementById("kmlrect");
    if (kmlrect != null) {
        var coords = kmlrect.innerHTML.split(",");
        if (coords != null && coords.length > 1) {
            kmlmap = "kmlrect";
            var maprectangle = new google.maps.Rectangle({
                strokeColor: "#FF0000",
                strokeOpacity: .5,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: .05,
                map: map,
                bounds: new google.maps.LatLngBounds(new google.maps.LatLng(coords[0], coords[1]),
 new google.maps.LatLng(coords[2], coords[3])),
                draggable: false,
                clickable: false,
                optimized: false
            });
            boundslist = maprectangle.getBounds();
            map.fitBounds(boundslist);
            map.panToBounds(boundslist);
            if (coords.length > 4) {
                setTimeout(function() {
                    map.setZoom(parseInt(coords[4]));
                }, 1e3);
            }
        }
    }
    var kmlcircle = document.getElementById("kmlcircle");
    if (kmlcircle != null) {
        var coords = kmlcircle.innerHTML.split(",");
        if (coords != null && coords.length > 1) {
            kmlmap = "kmlcircle";
            var circleopt = {
                strokeColor: "#FF0000",
                strokeOpacity: .5,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: .05,
                map: map,
                center: new google.maps.LatLng(coords[0], coords[1]),
                radius: Number(coords[2]),
                draggable: false,
                clickable: false,
                optimized: false
            };
            setmarker(coords[0], coords[1], 9e4);
            if (kmlrect == null) {
                var mapcircle = new google.maps.Circle(circleopt);
                boundslist = mapcircle.getBounds();
            }
            map.fitBounds(boundslist);
            map.panToBounds(boundslist);
        }
    }
    kmlsummary = document.getElementById("kmlsummary");
    var kmllist = document.getElementById("kmllist");
    if (kmllist != null) {
        var kmlicons = document.getElementById("kmlicons");
        if (kmlicons != null) kmliconlist = kmlicons.innerHTML.split(",");
        kmlmap = "kmllist";
        var list = kmllist.innerHTML.split("&amp;").join("").split(";");
        var objlist = [];
        for (var i = 0; i < list.length; ++i) {
            if (list[i] == null) continue;
            if (list[i].length <= 0) continue;
            var line = list[i].split(",");
            if (line == null) continue;
            var lat = parseFloat(line[1]);
            var lng = parseFloat(line[2]);
            if (isNaN(lat) || isNaN(lng)) continue;
            var obj = {
                id: urldecode(line[0]),
                location: {
                    lat: lat,
                    lng: lng
                }
            };
            if (line.length > 3) {
                obj.q = Number(line[3]);
                if (line.length > 6) obj.icon = kmliconlist[Number(line[6]) * 6 + obj.q];
            }
            if (kmlsummary) if (obj.id[0] == "#") {
                var num = obj.id.slice(1).split(" ")[0];
                obj.icon = "http://sites.google.com/site/rwicons/bg" + obj.q + "_" + num + ".png";
            }
            if (line.length > 4) obj.description = urldecode(line[4]);
            if (line.length > 5) obj.thumbnail = line[5];
            objlist.push(obj);
        }
        loadlist(objlist, true);
    }
    var kmllistquery = document.getElementById("kmllistquery");
    if (kmllistquery != null) {
        kmlmap = "kmllistquery";
        kmllist = kmllistquery;
        kmllisturl = "http://ropewiki.com/api.php?action=ask&format=json&query=" + kmllistquery.innerHTML + "|%3FHas_coordinates|%3FHas_star_rating|%3FHas_summary|%3FHas_banner_image_file|%3FHas_location_class|%3FHas_KML_file|limit=100";
        tablelisturl = window.location.href.toString();
        tablelisturl = tablelisturl.split("#")[0];
        tablelisturl += (tablelisturl.indexOf("?") < 0 ? "?" : "&") + "nomapchk=on";
        var loctotaldiv = document.getElementById("loctotal");
        if (loctotaldiv) {
            var loctotal = loctotaldiv.innerHTML;
            if (loctotal > 0) ;
            morekmllist(0, loctotal);
        }
    }
    var layer;
    var kmlfile = document.getElementById("kmlfile");
    if (kmlfile != null && !layer) {
        var file = kmlfile.innerHTML;
        if (file != null && file.length > 0) {
            kmlmap = "kmlfile";
            layer = new google.maps.KmlLayer(file);
            layer.setMap(map);
        }
    }
    if (kmlsummary != null) {
        function spiderfy(srepeat) {
            loadingquery2 = true;
            console.log("loadingquery2 true");
            var step = 1;
            var isize2 = 26 / 2;
            var osize = 16;
            if (srepeat == null) srepeat = 100;
            var scale = Math.pow(2, map.getZoom());
            var proj = map.getProjection();
            var bounds = map.getBounds();
            if (!proj || !bounds) {
                console.log("null proj");
                return;
            }
            var nwll = new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getSouthWest(
).lng());
            var nw = proj.fromLatLngToPoint(nwll);
            function fromLatLngToPixel(position) {
                var point = proj.fromLatLngToPoint(position);
                return new google.maps.Point(Math.floor((point.x - nw.x) * scale), Math.floor((
point.y - nw.y) * scale));
            }
            function fromPixelToLatLng(pixel) {
                var point = new google.maps.Point();
                point.x = pixel.x / scale + nw.x;
                point.y = pixel.y / scale + nw.y;
                return proj.fromPointToLatLng(point);
            }
            for (var i = 0; i < markers.length; i++) {
                var m = markers[i];
                m.p = fromLatLngToPixel(m.oposition);
                m.p.y += isize2;
            }
            var overlap = true;
            for (var r = 0; r < srepeat && overlap; ++r) {
                overlap = false;
                for (var i = 0; i < markers.length; i++) for (var j = i + 1; j < markers.length; j++
) if (i != j) {
                    var dx = markers[i].p.x - markers[j].p.x;
                    var dy = markers[i].p.y - markers[j].p.y;
                    var adx = dx < 0 ? -dx : dx;
                    var ady = dy < 0 ? -dy : dy;
                    if (adx < osize && ady < osize) {
                        if (adx < osize) if (dx > 0) {
                            markers[i].p.x += step;
                            markers[j].p.x -= step;
                            overlap = true;
                        } else {
                            markers[i].p.x -= step;
                            markers[j].p.x += step;
                            overlap = true;
                        }
                        if (ady < osize) if (dy > 0) {
                            markers[i].p.y += step;
                            markers[j].p.y -= step;
                            overlap = true;
                        } else {
                            markers[i].p.y -= step;
                            markers[j].p.y += step;
                            overlap = true;
                        }
                    }
                }
            }
            console.log("repetitions:" + r + " overlap:" + overlap + " os:" + osize + " st:" + step);

            for (var i = 0; i < markers.length; i++) {
                var m = markers[i];
                m.p.y -= isize2;
                var pos = fromPixelToLatLng(m.p);
                var ll = {
                    lat: parseFloat(pos.lat()),
                    lng: parseFloat(pos.lng())
                };
                if (!isNaN(ll.lat) && !isNaN(ll.lng)) m.setPosition(ll); else console.log(
"error " + m.name + ":" + m.p + " -> " + ll.lat + "," + ll.lng);
            }
            setTimeout(function() {
                loadingquery2 = false;
                console.log("loadingquery2 false");
            }, 5e3);
        }
        google.maps.event.addListener(map, "zoom_changed", spiderfy);
    }
    if (kmlmap == null) {
        var myLatlng = new google.maps.LatLng(0, 0);
        var infowindowm = new google.maps.InfoWindow({
            content: "UNKNOWN LOCATION"
        });
        var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            infowindow: infowindowm,
            optimized: false
        });
        marker.infowindow.open(map, marker);
        google.maps.event.addListener(marker, "click", function() {
            this.infowindow.open(map, this);
        });
        map.panTo(myLatlng);
        map.setZoom(2);
        map.setMapTypeId(google.maps.MapTypeId.TERRAIN);
    }
    var kmltitle = document.getElementById("kmltitle");
    if (kmltitle != null) {
        var controlsDiv = document.createElement("DIV");
        controlsDiv.style.margin = "4px 4px 4px 4px";
        controlsDiv.innerHTML = '<img src="http://chart.apis.google.com/chart?chst=d_text_outline&chld=000000|32|h|FFFFFF|b|' + urlencode(
kmltitle.innerHTML) + '"/>';
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(controlsDiv);
    }
    {
        var spstart = '<div class="gmnoprint maptopcontrols">', spend = "</div>";
        var controls = spstart + '<img class="gmnoprint" id="fullscreenchk" onclick="toggleFullScreen()" title="Full Screen" src="http://ropewiki.com/images/b/b9/FullscreenIcon.png">' + spend;
        if (kmllist) {
            controls += spstart + '<label><input class="gmnoprint" id="routeschk" type="checkbox" onclick="toggleRoutes()">Show&nbsp;KML&nbsp;</label>' + spend;
            if (document.getElementById("locsearch")) {
                var controlsDiv2 = document.createElement("DIV");
                controlsDiv2.innerHTML = '<div id="searchmap"><span id="searchinfo"></span><button type="search" value="" onclick="searchmap()">Search Map</button></div>';
                map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlsDiv2);
                searchmaprectangle = new google.maps.Rectangle({
                    strokeColor: "#FF0000",
                    strokeOpacity: .5,
                    strokeWeight: 2,
                    fillColor: "#FF0000",
                    fillOpacity: .05,
                    bounds: new google.maps.LatLngBounds(new google.maps.LatLng(0, 0),
 new google.maps.LatLng(0, 0)),
                    draggable: false,
                    clickable: false,
                    optimized: false
                });
                map.addListener("click", function(e) {
                    if (searchmapn >= 0) {
                        var marker = new google.maps.Marker({
                            position: e.latLng,
                            map: map,
                            optimized: false
                        });
                        searchmappt.push(e.latLng);
                        ++searchmapn;
                        var bounds = new google.maps.LatLngBounds();
                        bounds.extend(searchmappt[0]);
                        bounds.extend(searchmappt[searchmappt.length >= 2 ? 1 : 0]);
                        searchmaprectangle.setBounds(bounds);
                        searchmaprectangle.setMap(map);
                        if (searchmapn >= 2) searchmaprun();
                    }
                });
                map.addListener("mousemove", function(e) {
                    if (searchmapn > 0 && searchmapn < 2) {
                        var bounds = new google.maps.LatLngBounds();
                        bounds.extend(searchmappt[0]);
                        bounds.extend(e.latLng);
                        searchmaprectangle.setBounds(bounds);
                        searchmaprectangle.setMap(map);
                    }
                });
            }
        } else {
            if (kmltitle
) controls += spstart + '<label><input class="gmnoprint" id="labelschk" type="checkbox" onclick="toggleLabels()" ' + (
labels ? "checked" : "") + ">TrkLabels&nbsp;</label>" + spend;
        }
        var controlsDiv = document.createElement("DIV");
        controlsDiv.style.cssText = "z-index:9999;";
        controlsDiv.innerHTML = controls;
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlsDiv);
    }
    map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(coverDiv);
    var kmlfilep = document.getElementById("kmlfilep");
    if (kmlfilep != null) {
        loadingkml = true;
        console.log("loadingkml true");
        var file = kmlfilep.innerHTML;
        var filelink = "";
        if (file != null && file.length > 0) {
            kmlmap = "kmlfilep";
            var mapbox = "#mapbox";
            var mapsidebar = "mapsidebar";
            var bskmlfile = document.getElementById("bskmlfile");
            if (bskmlfile != null) {
                var sourceDiv = document.createElement("DIV");
                var text = '<div class = "dropDownOptionsDiv" id="myddOptsDiv">';
                file = file.split("&amp;").join("&");
                var selection = bskmlfile.innerHTML.toString().split("&amp;").join("&").split(",");
                if (urldecode(file).indexOf(urldecode(selection[0])) < 0) selection.unshift(file);
                var domains = [];
                for (var i = 0; i < selection.length; ++i) {
                    var style = "";
                    var link = selection[i];
                    if (noextraction(link)) style = "color:red;";
                    var counter = 0;
                    var domain = getdomain(link);
                    domains.push(domain);
                    for (var d = 0; d < domains.length; ++d) if (domains[d] == domain) ++counter;
                    if (counter > 1) domain += "#" + counter;
                    text += '<div class="dropDownItemDiv" onClick="loadSource(\'' + link + "','" + domain + '\')" style="' + style + '">' + domain + "</div>";
                }
                var big = document.getElementsByTagName("BIG");
                if (big && big.length > 0 && selection.length > 1) {
                    var link = urlencode(big[0].innerHTML);
                    text += '<div class="dropDownItemDiv" onClick="loadSource(\'' + link + "','ALL COMBINED')\" style=\"font-weight:bold\">ALL COMBINED</div>";
                }
                text += "</div>";
                var name = getdomain(selection[0]);
                text += "<div class=\"dropDownControl\" onclick=\"(document.getElementById('myddOptsDiv').style.display == 'block') ? document.getElementById('myddOptsDiv').style.display = 'none' : document.getElementById('myddOptsDiv').style.display = 'block';\"><span id=\"myddOptsText\">" + name + '</span><img class="dropDownArrow" src="http://maps.gstatic.com/mapfiles/arrow-down.png"/></div>';
                lastlinks.push(filelink = selection[0]);
                sourceDiv.className = "dropDownControlDiv";
                sourceDiv.style.zIndex = 1e3;
                sourceDiv.innerHTML = text;
                map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(sourceDiv);
                if (selection.length < 2) sourceDiv.style.display = "none";
            }
            var sidebar = document.createElement("div");
            sidebar.setAttribute("id", mapsidebar);
            sidebar.className = "notranslate";
            document.body.appendChild(sidebar);
            var controlsDiv = document.createElement("DIV");
            controlsDiv.innerHTML = '<div id="legendbar"><label><input class="gmnoprint" id="legendchk" type="checkbox" onclick="toggleLegend()"><span id="legendlabel">Legend</span></label><br><div id="legend" class="notranslate"></div></div><div id="loadlinks"></div>';
            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(controlsDiv);
            controlsDiv.style.maxHeight = "90%";
            controlsDiv.style.overflow = "auto";
            controlsDiv.style.zIndex = 999;
            controlsDiv.style.marginRight = "5px";
            function geoxmlinitp() {
                gxml = new GeoXml("gxml", map, "", {
                    sidebarid: mapsidebar,
                    sortbyname: true,
                    simplelegend: true,
                    suppressallfolders: true,
                    showArrows: true,
                    showLabels: true,
                    showRouteLabels: labels && kmltitle,
                    showElevation: labels && kmltitle,
                    directions: true,
                    dohilite: true,
                    allfoldersopen: true,
                    hilite: {
                        color: "#aaffff",
                        opacity: .8,
                        width: 10,
                        textcolor: "#000000"
                    }
                });
                google.maps.event.addListener(gxml, "loaded", function() {
                    setTimeout(function() {
                        loadingkml = false;
                        console.log("loadingkml false");
                    }, 5e3);
                    if (document.getElementById("hidelegend") == null || showLegend) {
                        var interval = setInterval(function() {
                            if (document.getElementById("legend") != null) {
                                toggleLegend(true);
                                var wlegend = $("#legendbar").width();
                                var hlegend = $("#legendbar").height();
                                var wmap = $("#mapbox").width();
                                var hmap = $("#mapbox").height();
                                if (wlegend * hlegend > wmap * hmap / 4) toggleLegend(false);
                                clearInterval(interval);
                            }
                        }, 500);
                    }
                });
                gxml.load(file, filelink);
            }
            if (typeof staticscripts == "undefined") $.getScript(
typeof geoxmljs != "undefined" ? geoxmljs : geturl(
"http://ropewiki.com/index.php?title=MediaWiki:Geoxml.js&action=raw&ctype=text/javascript"),
 geoxmlinitp); else setTimeout(geoxmlinitp, 100);
        }
    }
    var kmlfilew = document.getElementById("kmlfilew");
    if (kmlfilew != null) {
        var file = kmlfilew.innerHTML;
        if (file != null && file.length > 0) {
            kmlmap = "kmlfilew";
            var mapbox = "#mapbox";
            function geoxmlinitw() {
                gxml = new GeoXml("gxml", map, "", {
                    nozoom: true,
                    simplelegend: true,
                    suppressallfolders: true,
                    showArrows: false,
                    showLabels: false,
                    patchIcons: true,
                    showRouteLabels: false,
                    directions: false,
                    dohilite: false,
                    hilite: {
                        color: "#aaffff",
                        opacity: .8,
                        width: 10,
                        textcolor: "#000000"
                    }
                });
                gxml.load(file, file);
            }
            if (typeof staticscripts == "undefined") $.getScript(
typeof geoxmljs != "undefined" ? geoxmljs : geturl(
"http://ropewiki.com/index.php?title=MediaWiki:Geoxml.js&action=raw&ctype=text/javascript"),
 geoxmlinitw); else setTimeout(geoxmlinitw, 100);
        }
    }
    setTimeout(function() {
        loadingmap = false;
        console.log("loadingmap false");
    }, 5e3);
    $("#mapbox").mouseover(function(event) {
        handlekeys = true;
    });
    $("#mapbox").mouseout(function(event) {
        handlekeys = false;
        mapcover();
    });
    $("#mapbox").mousedown(function(event) {
        event.preventDefault();
    });
    $(document).keydown(function(event) {
        if (handlekeys) {
            var z = 1;
            var o = 128;
            switch (event.which) {
              case 37:
                map.panBy(-o, 0);
                return false;

              case 38:
                map.panBy(0, -o);
                return false;

              case 39:
                map.panBy(o, 0);
                return false;

              case 40:
                map.panBy(0, o);
                return false;

              case 109:
              case 189:
                map.setZoom(z = map.getZoom() - 1);
                return false;

              case 107:
              case 187:
                map.setZoom(z = map.getZoom() + 1);
                return false;

              case 27:
              case 8:
                if (toggleFS != null) backFullScreen();
                return false;

              default:
                break;
            }
        }
    });
    $(window).resize(function() {
        if (toggleFS != null) toggleFullScreen(true); else centermap();
        smallstyle();
        mapcover();
    });
}

var piciconlist = [];

var picloadingmsg = "<img height=12 src='http://ropewiki.com/extensions/SemanticForms/skins/loading.gif'/> Loading... ";

var piclist, picloading, picloadingerr, picloadingn;

function pictureget(linklist) {
    if (linklist.length == 0) return;
    var url = geturl(linklist.shift());
    console.log("getpic " + url);
    $.getJSON(url, function(data) {
        var poilist = [];
        var list = data.list;
        for (var i = 0; i < list.length; ++i) {
            var col = list[i].split(",");
            var node = document.createElement("LI");
            node.className = "gallerybox";
            var content = '<div class="thumbinner" style="width:154px"><a href="' + col[0] + '" target="_blank"><img src="' + col[4] + '" style="width:150px;height:150px;"></a><div class="thumbcaption"><div>' + pinicon(
col[0], piciconlist[col[9]]) + " <b>" + col[6] + "</b></div><div>" + col[8] + "</div><div>" + col[1] + "</div></div></div>";

            node.innerHTML = content;
            node.sortdate = col[5];
            node.locid = col[0];
            var elems = piclist.getElementsByTagName("LI");
            var pos = 0;
            for (pos = 0; pos < elems.length && elems[pos].sortdate >= node.sortdate; ++pos) ;
            if (pos == elems.length) piclist.appendChild(node); else piclist.insertBefore(node,
 elems[pos]);
            var loc = {
                lat: parseFloat(col[2].toString()),
                lng: parseFloat(col[3].toString())
            };
            poilist.push({
                id: col[0],
                location: loc,
                zindex: 100 - i,
                icon: piciconlist[col[9]],
                thumbnail: col[4],
                description: "",
                infodescription: col[6] + " " + col[8],
                infocontent: content
            });
        }
        if (map != null) loadlist(poilist);
        var locids = [];
        var elems = piclist.getElementsByTagName("LI");
        for (var pos = 250; pos < elems.length; ++pos) {
            locids.push(elems[pos].locid);
            piclist.removeChild(elems[pos]);
        }
        for (var i = 0; i < markers.length; ++i) if (locids.indexOf(markers[i].name) >= 0
) markers[i].setMap(null);
    }).error(function() {
        ++picloadingerr;
        console.log("picerror " + url);
    }).always(function() {
        var msg = "";
        if (linklist.length > 0) msg += picloadingmsg + Math.round((picloadingn - linklist.length
) * 100 / picloadingn) + "%";
        if (picloadingerr > 0) msg += ' <span style="color:red">' + picloadingerr + " ERRORS!</span>";

        picloading.innerHTML = msg;
        pictureget(linklist);
    });
}

function pictureinit() {
    piclist = document.getElementById("picture-list");
    var picrect = document.getElementById("picture-rect");
    if (!picrect || !piclist) return;
    picloading = document.createElement("DIV");
    picloading.innerHTML = picloadingmsg;
    piclist.parentNode.insertBefore(picloading, piclist);
    piciconlist["Instagram.com"] = "http://ropewiki.com/images/c/c0/InstaIcon.png";
    piciconlist["Facebook.com"] = "http://ropewiki.com/images/0/03/FacebIcon.png";
    piciconlist["Flickr.com"] = "http://ropewiki.com/images/f/f7/FlickIcon.png";
    piciconlist["Panoramio.com"] = "http://ropewiki.com/images/a/a4/PanorIcon.png";
    var local = window.location.href.toString().indexOf("debug=local") >= 0;
    var preurl = local ? "http://localhost/rwr?pictures=" : "http://d5a.net/rwr?pictures=";
    var url = preurl + picrect.innerHTML;
    $.getJSON(geturl(url), function(data) {
        var list = data.list;
        picloadingerr = 0;
        picloadingn = list.length;
        for (t = 0; t < 3; ++t) {
            setTimeout(function() {
                pictureget(list);
            }, t * 500);
        }
        pictureget(list);
    }).error(function() {
        picloading.innerHTML = '<div style="color:red">ERROR!</div>';
    });
}

function waterflowinit() {
    waterflow();
}

function loadMapInterface() {
    var elem = document.getElementById("mapbox");
    if (elem == null) {
        loadingmap = false;
        $(".locateicon").hide();
        console.log("loadingmap none");
        return;
    }
    if (typeof staticscripts == "undefined") {
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "https://www.google.com/jsapi";
        document.body.appendChild(script);
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "http://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyDdkcexZV-p5Nj8RwgLYTcegm5jorJpbyw&callback=initializemap";
        document.body.appendChild(script);
    } else initializemap();
    pictureinit();
    var table = document.getElementById("waterflow-table");
    if (!table) return;
    if (typeof staticscripts == "undefined") $.getScript(
typeof waterflowjs != "undefined" ? waterflowjs : geturl(
"http://ropewiki.com/index.php?title=MediaWiki:Waterflow.js&action=raw&ctype=text/javascript"),
 waterflowinit); else setTimeout(waterflowinit, 100);
}

function loadmapScript() {
    smallstyle();
    loadSkin();
    loadEditor();
    loadFacebook();
    loadMapInterface();
    loadUserInterface(document);
    loadFormInterface();
    loadTranslation();
    var transtimer = setInterval(function() {
        loadTranslation();
    }, 2e3);
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit";
    document.body.appendChild(script);
}

function googleTranslateElementInit() {
    var hdr = document.getElementById("firstHeading");
    if (hdr) {
        var div = document.createElement("div");
        div.className = "noprint";
        div.style.cssText = "float:right";
        div.id = "google_translate_flags";
        div.innerHTML = '<table class="noprint"><tr><td><img src="http://ropewiki.com/images/c/c9/FlagIcon.png"/></td><td id="google_translate_element"></td></tr></table>';
        hdr.insertBefore(div, hdr.firstChild);
        new google.translate.TranslateElement({
            pageLanguage: "en",
            multilanguagePage: true,
            gaTrack: true,
            gaId: "UA-78683801-1"
        }, "google_translate_element");
    }
}

window.onload = loadmapScript;

var showLegend;

function toggleLegend(force) {
    var idchk = "legendchk";
    var legend = document.getElementById("legend");
    var label = document.getElementById("legendlabel");
    var mapsidebar = document.getElementById("mapsidebar");
    if (showLegend == null || force) {
        if (legend && mapsidebar) {
            legend.style.display = "block";
            legend.innerHTML = legend.innerHTML + mapsidebar.innerHTML;
            mapsidebar.innerHTML = "";
        }
        if (label && showLegend == null) showLegend = label.innerHTML;
    } else {
        if (legend) legend.style.display = "none";
        showLegend = null;
    }
    var chk = document.getElementById(idchk);
    if (chk) chk.checked = showLegend != null;
}

var showRoutes, loadedRoutes;

function toggleRoutes(kmlfile, kmlgroup) {
    idchk = "routeschk";
    var kmlroutes = document.getElementById("kmlroutes");
    if (!kmlroutes) return;
    var group = "KML";
    var url = kmlroutes.innerHTML.split("&amp;").join("&");
    if (!gxml || kmlfile) {
        function geoxmlinitr() {
            gxml = new GeoXml("gxml", map, "", {
                nozoom: true,
                simplelegend: true,
                suppressallfolders: true,
                showArrows: false,
                showLabels: false,
                patchIcons: true,
                showRouteLabels: false,
                directions: true,
                dohilite: true,
                hilite: {
                    color: "#aaffff",
                    opacity: .8,
                    width: 10,
                    textcolor: "#000000"
                }
            });
            var file = kmlfile ? kmlfile : url;
            var group = kmlgroup ? kmlgroup : group;
            gxml.load(file, group, group);
        }
        if (typeof staticscripts == "undefined") $.getScript(
typeof geoxmljs != "undefined" ? geoxmljs : geturl(
"http://ropewiki.com/index.php?title=MediaWiki:Geoxml.js&action=raw&ctype=text/javascript"),
 geoxmlinitr); else setTimeout(geoxmlinitr, 100);
        if (kmlfile) return;
        showRoutes = "on";
        loadedRoutes = "on";
    } else {
        if (showRoutes == null) {
            showRoutes = "on";
            if (loadedRoutes == null) {
                gxml.load(url, group, group);
                loadedRoutes = "on";
            } else {
                gxml.overlayman.Show();
            }
        } else {
            showRoutes = null;
            gxml.overlayman.Hide();
        }
    }
    document.getElementById(idchk).checked = showRoutes != null;
    google.maps.event.trigger(map, "resize");
}

var fshash = "#fullscreen";

$(window).on("hashchange", function() {
    if (toggleFS != null) if (window.location.href.toString().indexOf(fshash) < 0) toggleFullScreen();

});

function backFullScreen() {
    window.history.back();
}

function mapcover() {
    var mw = $("#mapbox").width();
    var dw = $(window).width() - mw;
    if (!toggleFS && (dw < 50 || mw < 500)) $("#mapcover").css({
        display: "block"
    }); else $("#mapcover").css({
        display: "none"
    });
}

function centermap() {
    if (!map) return;
    var center = map.getCenter();
    google.maps.event.trigger(map, "resize");
    map.panTo(center);
}

var toggleFS;

function toggleFullScreen(force) {
    var idchk = "fullscreenchk";
    var ide = document.getElementById("mapbox");
    if (!ide) return;
    if (toggleFS == null || force) {
        if (toggleFS == null) {
            toggleFS = {
                parent: ide.parentNode,
                next: ide.nextSibling,
                cssText: ide.style.cssText,
                className: ide.className,
                sx: window.pageXOffset,
                sy: window.pageYOffset
            };
            window.location.href = window.location.href.toString() + fshash;
            var list = document.body.childNodes;
            for (var i = 0; i < list.length; ++i) if (list[i].tagName == "DIV") {
                list[i].normal_display = list[i].style.display;
                list[i].style.display = "none";
            }
        }
        $(ide).hide();
        ide.className = "";
        $(ide).css({
            position: "fixed",
            top: 0,
            left: 0,
            zIndex: 9999999,
            width: "100%",
            height: "100%"
        });
        document.body.insertBefore(ide, document.body.firstChild);
        window.scrollTo(0, 0);
    } else {
        $(ide).hide();
        var fs = toggleFS;
        ide.style.cssText = fs.cssText;
        ide.className = fs.className;
        fs.parent.insertBefore(ide, fs.next);
        var list = document.body.childNodes;
        for (var i = 0; i < list.length; ++i) if (typeof list[i].normal_display != "undefined") list[i].style.display = list[i].normal_display;

        window.scrollTo(fs.sx, fs.sy);
        toggleFS = null;
    }
    chk = document.getElementById(idchk);
    chk.src = toggleFS == null ? "http://ropewiki.com/images/b/b9/FullscreenIcon.png" : "http://ropewiki.com/images/9/92/SmallscreenIcon.png";
    chk.onclick = toggleFS == null ? toggleFullScreen : backFullScreen;
    mapcover();
    $(ide).show();
    centermap();
}

var clistloading;

var clistcookie = "regionlist";

var CollapsibleLists = new function() {
    this.apply = function(doNotRecurse) {
        clistloading = getCookie(clistcookie);
        if (!clistloading) clistloading = "<World>";
        var uls = document.getElementsByTagName("ul");
        for (var index = 0; index < uls.length; index++) {
            if (uls[index].className.match(/(^| )collapsibleList( |$)/)) {
                this.applyTo(uls[index], true);
                if (!doNotRecurse) {
                    var subUls = uls[index].getElementsByTagName("ul");
                    for (var subIndex = 0; subIndex < subUls.length; subIndex++) {
                        subUls[subIndex].className += " collapsibleList";
                    }
                }
            }
        }
        clistloading = null;
        getregioncount();
    };
    this.applyTo = function(node, doNotRecurse) {
        var lis, tag;
        if ((lis = node.getElementsByTagName(tag = "A")).length == 0
) lis = node.getElementsByTagName(tag = "SPAN");
        var list = [], titles = [];
        for (var index = 0; index < lis.length; index++) list.push(lis[index]);
        for (var index = 0; index < list.length; index++) {
            var dup = -1;
            if (tag == "A") {
                dup = titles.indexOf(list[index].href);
                titles.push(list[index].href);
            } else {
                dup = titles.indexOf(list[index].innerHTML);
                titles.push(list[index].innerHTML);
            }
            if (dup < 0) continue;
            var li1 = list[index];
            while (li1 && li1.tagName != "LI") li1 = li1.parentNode;
            var uls1 = li1.getElementsByTagName("UL");
            var li2 = list[dup];
            while (li2 && li2.tagName != "LI") li2 = li2.parentNode;
            var uls2 = li2.getElementsByTagName("UL");
            if (uls1.length > 0 && uls2.length == 0) li2.appendChild(uls1[0].cloneNode(true)
); else if (uls2.length > 0 && uls1.length == 0) li1.appendChild(uls2[0].cloneNode(true));
        }
        var lis = node.getElementsByTagName("li");
        for (var index = 0; index < lis.length; index++) {
            if (!doNotRecurse || node == lis[index].parentNode) {
                if (lis[index].addEventListener) {
                    lis[index].addEventListener("mousedown", function(e) {
                        e.preventDefault();
                    }, false);
                } else {
                    lis[index].attachEvent("onselectstart", function() {
                        event.returnValue = false;
                    });
                }
                if (lis[index].addEventListener) {
                    lis[index].addEventListener("click", createClickListener(lis[index]), false);
                } else {
                    lis[index].attachEvent("onclick", createClickListener(lis[index]));
                }
                toggle(lis[index]);
            }
        }
    };
    function createClickListener(node) {
        return function(e) {
            if (!e) e = window.event;
            var li = e.target ? e.target : e.srcElement;
            if (li.nodeName != "LI") return;
            if (li == node) {
                toggle(node);
                getregioncount();
            }
        };
    }
    function toggle(node) {
        var open = node.className.match(/(^| )collapsibleListClosed( |$)/);
        open = save(node, open);
        var uls = node.getElementsByTagName("ul");
        for (var index = 0; index < uls.length; index++) {
            var li = uls[index];
            while (li.nodeName != "LI") li = li.parentNode;
            if (li == node) {
                uls[index].style.display = open ? "block" : "none";
                if (open) {
                    var regionlist = [];
                    regioncountlist(uls[index], regionlist);
                    regioncount(regionlist);
                }
            }
        }
        node.className = node.className.replace(/(^| )collapsibleList(Open|Closed)( |$)/, "");
        if (uls.length > 0) {
            node.className += " collapsibleList" + (open ? "Open" : "Closed");
        }
    }
    function save(node, open) {
        var href = null;
        var links = node.getElementsByTagName("a");
        if (links.length == 0) links = node.getElementsByTagName("span");
        if (links.length > 0) href = links[0].innerHTML;
        if (!href) return open;
        href = "<" + href + ">";
        if (clistloading != null) {
            if (clistloading.indexOf(href) >= 0) return true; else return false;
        } else {
            var str = getCookie(clistcookie);
            str = str.split(href).join("");
            if (open) str += href;
            setCookie(clistcookie, str);
        }
        return open;
    }
    function getregioncount() {}
    function regioncount(rlist) {
        var titles = [];
        for (var r = 0; r < rlist.length; ++r) {
            var title = "NOTEXIST";
            var region = rlist[r].getElementsByTagName("A");
            if (region && region.length > 0) title = region[0].title;
            titles.push(title);
        }
        var url = "http://ropewiki.com/index.php?title=Template:RegionCount&action=raw&templates=expand&ctype=text/x-wiki&region=" + urlencode(
titles.join(";"));
        $.get(geturl(url), function(data) {
            var rdata = data.split(";");
            for (var r = 0; r < rlist.length; ++r) rlist[r].innerHTML = rlist[r].innerHTML + " " + rdata[r];

        });
    }
    function regioncountlist(elem, list) {
        for (var i = 0; i < elem.childNodes.length; ++i) {
            var child = elem.childNodes[i];
            if (child.style && child.style.display != "none") {
                if (list.length < 30 && child.className && child.className.indexOf("regioncount"
) >= 0) {
                    $(child).removeClass("regioncount");
                    list.push(child);
                }
                if (child.childNodes.length > 0) if (child.tagName == "LI") regioncountlist(child,
 list);
            }
        }
    }
}();

var sites = [];

function findsite(id) {
    for (var c = 0; c < sites.length; c++) if (sites[c].id == id) return sites[c];
    return null;
}

function nonamespace(label) {
    return label.replace("Events:", "");
}

function sitelink(siteid, label, url) {
    if (typeof url == "undefined") {
        url = siteid;
        var site = findsite(siteid);
        if (site) {
            var id = siteid.split(":")[1];
            url = site.urls[0].replace("%id", id);
        }
    }
    if (url == "") return '<span style="color:#808080">' + label + "</span>";
    return aref(url, label, label, 'target="_blank"');
}

var currenturl = window.location.href.toString();

function isAndroid() {
    if (typeof Android != "undefined") return true;
    if (urlget(currenturl, "debugandroid", "") != "") return true;
    return false;
}

function kmlurl(url) {
    if (typeof Android != "undefined") return Android.kmlurl(url);
    var summaryurl = "query=%5B%5BCategory%3ACanyons%5D%5D%5B%5BLocated%20in%20region.Located%20in%20regions%3A%3AX%7C%7CSan%20Diego%5D%5D&sort=&order=ascending";
    return "http://d5a.net/rwr?gpx=off&kml=http://ropewiki.com/KMLList?action=raw&templates=expand&ctype=application/x-zope-edit&group=link&" + summaryurl + "&more=&num=on&ext=.kml";
}

function viewsize() {
    var size = 0;
    if (typeof Android != "undefined") size = Android.isWebView() - 10;
    if (size <= 0) size = 600;
    return size;
}

function WebViewStyle() {
    if (!isAndroid()) return;
    var remove = " .noprint, .gmnoprint, .rwSort, #contentSub, #top, #mw-head-base, #mw-page-base, #mw-navigation, #footer, .popupformlink, .toc, .mw-editsection ";
    var style = " .mw-body { margin:0px !important; padding:5px !important; } body { margin:0px !important; padding:0px !important; }";
    var pinmap = document.getElementsByClassName("pinmap");
    for (var i = 0, n = 1; i < pinmap.length; ++i, ++n) {
        var num = n.toString();
        if (num.length < 2) num = "0" + num;
        var str = "#" + num + " " + pinmap[i].innerHTML;
        pinmap[i].innerHTML = str;
    }
    var kmltitle = document.getElementById("kmltitle");
    if (kmltitle) {
        var size = viewsize();
        remove += " #firstHeading ";
        style += " .kmlmapdisplay { width:" + size + "px !important; height:" + size + "px !important; }";
    }
    var kmlsummary = document.getElementById("kmlsummary");
    if (kmlsummary) {
        var size = viewsize();
        remove += " #firstHeading, #displaysummary, ";
        style += " #mapbox { width:" + size + "px !important; height:" + size + "px !important; }";
    }
    var title = $(".tableregion td big");
    if (title.length > 0) $("#firstHeading").text($(".tableregion td big").text());
    $(".tableregion").remove();
    var mapmenu = document.getElementById("mapmenu");
    if (mapmenu) {
        psum = $('a:contains("Printable Summary")');
        pmap = $('a[href*="/Map?pagename"]');
        var menu = [];
        if (kmlsummary) {
            menu.push('<a class="button-link" href="' + kmlurl(window.location.href.toString()
) + '">Open KML</a>');
        } else if (psum.length > 0) {
            $("#mapbox").remove();
            menu.push('<a class="button-link" href="' + psum[0].href + '">View Map</a>');
            menu.push('<a class="button-link" href="' + kmlurl(psum[0].href) + '">Open KML</a>');
        } else if (pmap.length > 0) {
            $("#kmlmapdisplay").remove();
            elem = $('a:contains("Download KML")');
            if (elem.length > 0) {
                menu.push('<a class="button-link" href="' + pmap[0].href + '">View Map</a>');
                menu.push('<a class="button-link" href="' + elem[0].href + '">Open KML</a>');
            }
        }
        mapmenu.innerHTML = menu.join(" ");
    }
    var removelist = remove.split(",").join(" ").split(" ");
    for (var i = 0; i < removelist.length; ++i) if (removelist[i].length > 0) $(removelist[i]
).remove();
    var sheet = document.createElement("style");
    sheet.id = "androidstyle";
    sheet.innerHTML = style;
    document.body.appendChild(sheet);
}

function loadEditor() {}

{
    var tb = document.getElementById("toolbar");
    if (!tb) {
        tb = document.createElement("DIV");
        tb.id = "toolbar";
    }
    var first = null;
    var prefix = "_section";
    var list = document.getElementsByTagName("TEXTAREA");
    for (var i = 0; i < list.length; ++i) if (!!list[i].name && list[i].name.substr(0, prefix.length
) == prefix) {
        if (!first) first = list[i];
        list[i].onfocus = function() {
            this.parentNode.insertBefore(tb, this);
        };
    }
    if (first) first.parentNode.insertBefore(tb, first);
}

if (window.mw && !!mw) {
    mw.loader.using("mediawiki.action.edit", function() {
        var tb = document.getElementById("toolbar");
        if (tb) tb.innerHTML = "";
        mw.toolbar.addButton(false, "Bold text", "'''", "'''", "Bold text", "mw-editbutton-bold");
        mw.toolbar.addButton(false, "Italic text", "''", "''", "Italic text", "mw-editbutton-italic");

        mw.toolbar.addButton({
            imageFile: "http://ropewiki.com/images/0/01/BulletlistIcon.png",
            speedTip: "Bulleted list",
            tagOpen: "* ",
            tagClose: "",
            sampleText: "Bulleted list item",
            imageId: "button-bullet"
        });
        mw.toolbar.addButton({
            imageFile: "http://ropewiki.com/images/4/45/Galleryicon1.png",
            speedTip: "Insert a picture (.jpg .gif .png .pdf)",
            tagOpen: "{{pic|",
            tagClose: "}}",
            sampleText: "name.jpg ~ caption",
            imageId: "button-pic1"
        });
        mw.toolbar.addButton({
            imageFile: "http://ropewiki.com/images/d/d4/Galleryiconn.png",
            speedTip: "Insert a picture gallery (.jpg .gif .png .pdf)",
            tagOpen: "{{pic|",
            tagClose: "}}",
            sampleText: "pic1.jpg ~ caption1 ; pic2.jpg ~ caption2 ; pic3.jpg ~ caption3",
            imageId: "button-picn"
        });
        mw.toolbar.addButton({
            imageFile: "http://ropewiki.com/images/c/ca/Galleryiconx.png",
            speedTip: "Insert a large sketch or document (.pdf .gif .png .jpg)",
            tagOpen: "{{pic|size=X|",
            tagClose: "}}",
            sampleText: "sketch.pdf ~ caption",
            imageId: "button-picx"
        });
        mw.toolbar.addButton(false, "Internal link", "[[", "]]", "Link title", "mw-editbutton-link");

        mw.toolbar.addButton(false, "External link (remember http:// prefix)", "[", "]",
 "http://www.example.com link title", "mw-editbutton-extlink");
        mw.toolbar.addButton(false, "Level 2 headline", "\n=== ", " ===\n", "Headline text",
 "mw-editbutton-headline");
        mw.toolbar.addButton(false, "Ignore wiki formatting", "<nowiki>", "</nowiki>",
 "Insert non-formatted text here", "mw-editbutton-nowiki");
        mw.toolbar.addButton(false, "Your signature with timestamp",
 "--[[User:BetaRobot2|BetaRobot2]] ([[User talk:BetaRobot2|talk]]) 17:01, 11 June 2016 (EDT)", "",
 "", "mw-editbutton-signature");
        mw.toolbar.addButton(false, "Horizontal line (use sparingly)", "\n----\n", "", "",
 "mw-editbutton-hr");
        $(function() {
            mw.toolbar.init();
        });
    });
}

var customizeToolbar = function() {
    console.log("customizeToolbar");
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            bullist: {
                label: "Bulleted list",
                type: "button",
                icon: "http://ropewiki.com/images/0/01/BulletlistIcon.png",
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "* ",
                        peri: "Bulleted list item",
                        post: ""
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            pic1: {
                label: "Insert a picture (.jpg .gif .png .pdf)",
                type: "button",
                icon: "http://ropewiki.com/images/4/45/Galleryicon1.png",
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|",
                        peri: "name.jpg ~ caption",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            picn: {
                label: "Insert a picture gallery (.jpg .gif .png .pdf)",
                type: "button",
                icon: "http://ropewiki.com/images/d/d4/Galleryiconn.png",
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|",
                        peri: "pic1.jpg ~ caption1 ; pic2.jpg ~ caption2 ; pic3.jpg ~ caption3",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            picx: {
                label: "Insert a large sketch or document (.pdf .gif .png .jpg)",
                type: "button",
                icon: "http://ropewiki.com/images/c/ca/Galleryiconx.png",
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|size=X|",
                        peri: "sketch.pdf ~ caption",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1, .wikieditor").wikiEditor("removeFromToolbar", {
        section: "advanced",
        group: "insert",
        tool: "gallery"
    });
};

if (typeof mw != "undefined") {
    if (!!mw && $.inArray(mw.config.get("wgAction"), [ "edit", "submit" ]) !== -1) {
        mw.loader.using("user.options", function() {
            if (mw.user.options.get("usebetatoolbar") == 1) {
                $.when(mw.loader.using("ext.wikiEditor.toolbar"), $.ready).then(customizeToolbar);
            }
        });
        mw.hook("ext.lqt.textareaCreated").add(customizeToolbar);
    }
}

function loadFacebook() {}

$(function() {
    var popOuts = document.getElementsByClassName("mw-popout-link");
    var i;
    for (i = 0; i < popOuts.length; i++) {
        var args = popOuts[i].innerText;
        var iSpace = args.indexOf(" ");
        var link = iSpace < 0 ? args : args.substring(0, iSpace);
        var caption = iSpace < 0 ? link : args.substring(iSpace + 1);
        popOuts[i].innerHTML = '<a href="' + link + '" target="_blank">' + caption + "</a>";
    }
}());