// Do not modify this page directly; instead build from https://github.com/RopeWiki/commonjs
if (false) {
    $(function() {
        var div = document.createElement("div");
        maintmsg = "ðŸª¢ <b>Ropewiki is currently read-only!</b> ðŸª¢<br>We're doing a database upgrade " + "which requires multiple hours to complete. You should still be able to browse the site in the meantime!";
        div.innerHTML = maintmsg;
        div.style = "background: #ffeb3b; color: black; text-align: center; padding: 20px";
        document.getElementById("content").prepend(div);
    });
}

function isMobileDevice() {
    const toMatch = [ /Android/i, /webOS/i, /BlackBerry/i, /Windows Phone/i ];
    return isIOS() || toMatch.some(function(toMatchItem) {
        return navigator.userAgent.match(toMatchItem);
    });
}

function isIOS() {
    const toMatch = [ /iPhone/i, /iPad/i, /iPod/i ];
    return toMatch.some(function(toMatchItem) {
        return navigator.userAgent.match(toMatchItem);
    });
}

var clistloading;

var clistcookie = "regionlist";

var CollapsibleLists = new function() {
    this.apply = function(doNotRecurse) {
        clistloading = getCookie(clistcookie);
        if (!clistloading) clistloading = "<World>";
        var uls = document.getElementsByTagName("ul");
        for (var index = 0; index < uls.length; index++) {
            if (uls[index].className.match(/(^| )collapsibleList( |$)/)) {
                this.applyTo(uls[index], true);
                if (!doNotRecurse) {
                    var subUls = uls[index].getElementsByTagName("ul");
                    for (var subIndex = 0; subIndex < subUls.length; subIndex++) {
                        subUls[subIndex].className += " collapsibleList";
                    }
                }
            }
        }
        clistloading = null;
        getregioncount();
    };
    this.applyTo = function(node, doNotRecurse) {
        var lis, tag;
        if ((lis = node.getElementsByTagName(tag = "A")).length === 0) lis = node.getElementsByTagName(tag = "SPAN");
        var list = [], titles = [];
        var index;
        for (index = 0; index < lis.length; index++) list.push(lis[index]);
        for (index = 0; index < list.length; index++) {
            var dup = -1;
            if (tag === "A") {
                dup = titles.indexOf(list[index].href);
                titles.push(list[index].href);
            } else {
                dup = titles.indexOf(list[index].innerHTML);
                titles.push(list[index].innerHTML);
            }
            if (dup < 0) continue;
            var li1 = list[index];
            while (li1 && li1.tagName !== "LI") li1 = li1.parentNode;
            var uls1 = li1.getElementsByTagName("UL");
            var li2 = list[dup];
            while (li2 && li2.tagName !== "LI") li2 = li2.parentNode;
            var uls2 = li2.getElementsByTagName("UL");
            if (uls1.length > 0 && uls2.length === 0) li2.appendChild(uls1[0].cloneNode(true)); else if (uls2.length > 0 && uls1.length === 0) li1.appendChild(uls2[0].cloneNode(true));
        }
        lis = node.getElementsByTagName("li");
        for (index = 0; index < lis.length; index++) {
            if (!doNotRecurse || node === lis[index].parentNode) {
                if (lis[index].addEventListener) {
                    lis[index].addEventListener("mousedown", function(e) {
                        e.preventDefault();
                    }, false);
                } else {
                    lis[index].attachEvent("onselectstart", function() {
                        event.returnValue = false;
                    });
                }
                if (lis[index].addEventListener) {
                    lis[index].addEventListener("click", createClickListener(lis[index]), false);
                } else {
                    lis[index].attachEvent("onclick", createClickListener(lis[index]));
                }
                toggle(lis[index]);
            }
        }
    };
    function createClickListener(node) {
        return function(e) {
            if (!e) e = window.event;
            var li = e.target ? e.target : e.srcElement;
            if (li.nodeName !== "LI") return;
            if (li === node) {
                toggle(node);
                getregioncount();
            }
        };
    }
    function toggle(node) {
        var open = node.className.match(/(^| )collapsibleListClosed( |$)/);
        open = save(node, open);
        var uls = node.getElementsByTagName("ul");
        for (var index = 0; index < uls.length; index++) {
            var li = uls[index];
            while (li.nodeName !== "LI") li = li.parentNode;
            if (li === node) {
                uls[index].style.display = open ? "block" : "none";
                if (open) {
                    var regionlist = [];
                    regioncountlist(uls[index], regionlist);
                    regioncount(regionlist);
                }
            }
        }
        node.className = node.className.replace(/(^| )collapsibleList(Open|Closed)( |$)/, "");
        if (uls.length > 0) {
            node.className += " collapsibleList" + (open ? "Open" : "Closed");
        }
    }
    function save(node, open) {
        var href = null;
        var links = node.getElementsByTagName("a");
        if (links.length === 0) links = node.getElementsByTagName("span");
        if (links.length > 0) href = links[0].innerHTML;
        if (!href) return open;
        href = "<" + href + ">";
        if (clistloading != null) {
            if (clistloading.indexOf(href) >= 0) return true; else return false;
        } else {
            var str = getCookie(clistcookie);
            str = str.split(href).join("");
            if (open) str += href;
            setCookie(clistcookie, str);
        }
        return open;
    }
    function getregioncount() {}
    function regioncount(rlist) {
        var titles = [];
        for (var r = 0; r < rlist.length; ++r) {
            var title = "NOTEXIST";
            var region = rlist[r].getElementsByTagName("A");
            if (region && region.length > 0) title = region[0].title;
            titles.push(title);
        }
        var url = SITE_BASE_URL + "/index.php?title=Template:RegionCount&action=raw&templates=expand&ctype=text/x-wiki&region=" + urlencode(titles.join(";"));
        $.get(geturl(url), function(data) {
            var rdata = data.split(";");
            for (var r = 0; r < rlist.length; ++r) rlist[r].innerHTML = rlist[r].innerHTML + " " + rdata[r];
        });
    }
    function regioncountlist(elem, list) {
        for (var i = 0; i < elem.childNodes.length; ++i) {
            var child = elem.childNodes[i];
            if (child.style && child.style.display !== "none") {
                if (list.length < 30 && child.className && child.className.indexOf("regioncount") >= 0) {
                    $(child).removeClass("regioncount");
                    list.push(child);
                }
                if (child.childNodes.length > 0) if (child.tagName === "LI") regioncountlist(child, list);
            }
        }
    }
}();

var PROTOCOL;

const HTTP = "http://", HTTPS = "https://";

var SITE_HOSTNAME;

var SITE_BASE_URL;

var SITE_ALTERNATE_NAMES;

var LUCA_HOSTNAME;

var LUCA_HOSTNAME_PROD = "ropewiki.com/luca";

var LUCA_BASE_URL;

const OPENWEATHER_APIKEY = "1d5f0c74f9119e20765fed256ecfadc5";

function setConstants() {
    var local = getLocalUrl();
    switch (local.baseurl) {
      case "ropewiki.com":
      case "www.ropewiki.com":
      default:
        SITE_HOSTNAME = local.baseurl;
        LUCA_HOSTNAME = LUCA_HOSTNAME_PROD;
        break;

      case "localhost:8080":
      case "192.168.1.40:8080":
        SITE_HOSTNAME = local.baseurl;
        LUCA_HOSTNAME = "3.87.207.135/luca";
        break;

      case "dev.ropewiki.com":
      case "dev.rope.wiki":
        SITE_HOSTNAME = local.baseurl;
        LUCA_HOSTNAME = "dev.ropewiki.com/luca";
        break;

      case "ropewiki.attack-kitten.com":
      case "ropewiki2.attack-kitten.com":
      case "ropewiki3.attack-kitten.com":
      case "ropewiki.ak":
      case "ropewiki2.ak":
      case "ropewiki3.ak":
        SITE_HOSTNAME = local.baseurl;
        LUCA_HOSTNAME = "ropewiki.com/luca";
        break;
    }
    switch (local.protocol) {
      case "http":
        PROTOCOL = HTTP;
        break;

      case "https":
        PROTOCOL = HTTPS;
        break;
    }
    SITE_BASE_URL = PROTOCOL + SITE_HOSTNAME;
    SITE_ALTERNATE_NAMES = [ PROTOCOL + "www.ropewiki.com" ];
    LUCA_BASE_URL = PROTOCOL + LUCA_HOSTNAME;
}

setConstants();

function setCookie(cname, cvalue, exdays) {
    if (!exdays) exdays = 360 * 10;
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1e3);
    var expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; path=/ ; " + expires;
}

function getCookie(cname, def) {
    var name = cname + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === " ") c = c.substring(1);
        if (c.indexOf(name) !== -1) return c.substring(name.length, c.length);
    }
    if (typeof def != "undefined") return def;
    return "";
}

function initializeCookies() {
    if (!getCookie("country")) {
        var url = PROTOCOL + "freegeoip.net/json/";
    }
    var url = window.location.href.toString();
    if (url[url.length - 3] === "#") {
        setCookie("metric", "on");
        setCookie("french", "on");
        setCookie("country", "on");
        setCookie("googtrans", "/en/" + url.substr(url.length - 2));
    }
}

function loadcredits(pagename, mode, divid) {
    var div = document.getElementById(divid);
    if (!div) return;
    var size = 0;
    var users = [];
    var modeCredits = "P";
    var modeKmlMap = "K";
    var modeBannerPhoto = "J";
    var origurl = geturl(SITE_BASE_URL + "/api.php?format=json&action=query&prop=revisions&redirects=&continue=");
    switch (mode) {
      case modeCredits:
        origurl += "&rvprop=user|size&titles=" + pagename + "&rvlimit=max&rvdir=newer";
        break;

      case modeKmlMap:
        origurl += "&rvprop=user|comment&titles=File:" + pagename + ".kml&rvlimit=max&rvdir=newer";
        break;

      case modeBannerPhoto:
        origurl = SITE_BASE_URL + "/api.php?format=json&action=query&titles=File:" + pagename + " Banner.jpg&prop=imageinfo&iiprop=user|comment";
        break;
    }
    function getjs(data) {
        function finduser(user) {
            for (var i = 0; i < users.length; ++i) if (users[i].user === user) return i;
            return -1;
        }
        function isUserRobot(username) {
            return username.includes("Robot");
        }
        var bqnlist = [];
        var bqnuser = "Barranquismo.net";
        var bqnelems = document.getElementsByClassName("barranquismonet");
        for (var i = 0; i < bqnelems.length; ++i) bqnlist.push(bqnelems[i].innerHTML);
        var addid = "addcredit";
        var addlist = [];
        var addelems = document.getElementsByClassName(addid);
        for (var i = 0; i < addelems.length; ++i) addlist.push(addelems[i].innerHTML);
        $.each(data.query.pages, function(i, item) {
            var rev = item.revisions;
            if (!rev) rev = item.imageinfo;
            if (rev != null && rev.length != null) {
                for (var i = 0; i < rev.length; ++i) {
                    var isRobot = isUserRobot(rev[i].user);
                    if (bqnlist.length > 0 && isRobot) rev[i].user = bqnuser;
                    if (addlist.length > 0 && isRobot) rev[i].user = addid;
                    if (bqnlist.length === 0 && rev[i].user.search(bqnuser) >= 0) continue;
                    if (mode === modeBannerPhoto && rev[i].comment) {
                        var by = rev[i].comment.split(" by ");
                        if (by.length > 1) {
                            rev[i].user = by[1];
                            rev[i].comment = "";
                        }
                    }
                    if (mode === modeBannerPhoto) users.splice(0, users.length);
                    var u = finduser(rev[i].user);
                    if (u < 0) {
                        users.push({
                            user: rev[i].user,
                            size: 0
                        });
                        u = users.length - 1;
                    }
                    if (rev[i].size != null) {
                        users[u].size += rev[i].size - size;
                        size = rev[i].size;
                    }
                    if (rev[i].comment != null) users[u].comment = rev[i].comment;
                }
            }
            var credits = "";
            function credit(users, size) {
                if (users.length === 0) return;
                for (var u = 0; u < users.length; ++u) {
                    if (users[u].user === addid) credits += addlist.join(" & ").split("(").join("[").split(")").join("]"); else if (users[u].user.indexOf("http") > 0) {
                        var userlink = users[u].user.split("http");
                        credits += userlink[0].link("http" + userlink[1]);
                    } else if (!isUserRobot(users[u].user)) credits += users[u].user.link(SITE_BASE_URL + "/User:" + users[u].user);
                    if (users[u].user === bqnuser) credits += " [" + bqnlist.join(", ") + "]"; else if (size > 0) {
                        var percent = Math.round(users[u].size / size * 100) + "%";
                        if (users[u].size / usize < 5 / 100) percent = "creator";
                        credits += " (" + percent + ")";
                    }
                    if (u < users.length - 1) credits += u < users.length - 2 ? ", " : " & ";
                }
                var comment = users[users.length - 1].comment;
                if (comment != null && comment.indexOf("[[File:") > 0) {
                    var pcomment;
                    if ((pcomment = comment.indexOf(": ")) > 0) comment = comment.substr(pcomment + 2); else comment = "";
                }
                if (comment != null && comment !== "") credits += " (" + comment + ")";
            }
            if (size === 0) {
                credit(users, size);
            } else {
                var usize = 0;
                for (var u = 0; u < users.length; ++u) {
                    if (isUserRobot(users[u].user)) continue;
                    if (users[u].size < 0) users[u].size = -users[u].size;
                    if (users[u].size > 0) usize += users[u].size;
                }
                var major = [], minor = [];
                for (var u = 0; u < users.length; ++u) {
                    if (isUserRobot(users[u].user)) continue;
                    if (u === 0 || usize === 0 || users[u].size / usize > 5 / 100) major.push(users[u]); else minor.push(users[u]);
                }
                credit(major, major.length > 1 ? usize : 0);
                if (minor.length > 0) {
                    credits += " with minor contributions by ";
                    credit(minor, 0);
                }
            }
            if (credits) {
                var div = document.getElementById(divid);
                if (div) div.innerHTML = credits;
            }
        });
    }
    $.getJSON(origurl, getjs);
}

function displaydirectionsto(loc) {
    lastto = loc.join();
    window.open("https://maps.google.com/?output=classic&saddr=" + lastfrom + "&daddr=" + lastto, "_blank");
}

function displaydirectionsfrom(loc) {
    lastfrom = loc.join();
    if (lastto == "") alert("Click on a 'Directions To' link to get the full route"); else window.open("https://maps.google.com/?output=classic&saddr=" + lastfrom + "&daddr=" + lastto, "_blank");
}

function displaycoordenates(loc) {
    window.prompt("Copy to clipboard with Ctrl+C, Cmd-C, Click&Hold or other methods.", loc.join());
}

function displaydirections(lat, lng, extra) {
    var ret = "<div><i>";
    ret += '<a href="javascript:displaydirectionsto([' + lat + "," + lng + ']);">Directions To</a>';
    if (!!extra) ret += extra;
    ret += "</i></div>";
    return ret;
}

function displaylocation(lat, lng, extra) {
    var ret = '<div class="textselect">';
    var lat = parseFloat(lat);
    var lng = parseFloat(lng);
    var mapWaypoint = lat.toFixed(4) + "," + lng.toFixed(4);
    var centerLng = lng - .0176;
    var mapCenter = lat.toFixed(4) + "," + centerLng.toFixed(4);
    var zoom = "14z";
    ret += 'Loc: <a href="https://www.google.com/maps/place/' + mapWaypoint + "/@" + mapCenter + "," + zoom + "/data=!4m5!3m4!1s0x0:0x0!8m2!3d" + lat.toFixed(4) + "!4d" + lng.toFixed(4) + '!5m1!1e4" target="_blank">' + mapWaypoint + "</a>";
    if (!!extra) ret += extra;
    ret += "</div>";
    return ret;
}

var elevationService;

function getElevation(latLng, element, holdingText) {
    var res = document.getElementById(element);
    if (!!res && !res.innerHTML.includes(holdingText)) {
        var texts = res.getElementsByClassName("uft");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, ftStr);
        return;
    }
    if (!elevationService) elevationService = new google.maps.ElevationService();
    if (elevationService && latLng) {
        elevationService.getElevationForLocations({
            locations: [ latLng ]
        }, function(results) {
            if (results[0]) {
                var elev = results[0].elevation * m2ft;
                var res = document.getElementById(element);
                if (res) res.innerHTML = res.innerHTML.replace(holdingText, "<span class='uft'>" + ftStr(elev) + "</span>");
            }
        });
    }
}

function distance(p1, p2) {
    var e = Math, ra = e.PI / 180;
    var b = p1.lat * ra, c = p2.lat * ra, d = b - c;
    var g = p1.lng * ra - p2.lng * ra;
    var f = 2 * e.asin(e.sqrt(e.pow(e.sin(d / 2), 2) + e.cos(b) * e.cos(c) * e.pow(e.sin(g / 2), 2)));
    return f * 6378.137 * km2mi;
}

function getGeoCode(lat, lng, element) {
    var url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat.toString().trim() + "," + lng.toString().trim() + "&key=" + GOOGLE_MAPS_APIKEY;
    $.getJSON(geturl(url), function(data) {
        if (data && data.results && data.status === "OK") {
            var list = [];
            for (var r = 0; r < data.results.length; ++r) for (var c = 0; c < data.results[r].address_components.length; ++c) {
                var comp = data.results[r].address_components[c];
                if (comp.types.indexOf("political") >= 0) if (list.indexOf(comp.long_name) < 0) list.push(comp.long_name);
            }
            if (list.length > 0) {
                var res = document.getElementById(element);
                if (res) res.innerHTML = "Geocode: " + list.join(", ");
            }
        }
    });
}

function latLngBox(px, py, pz, tsize) {
    function Clip(n, minValue, maxValue) {
        return Math.min(Math.max(n, minValue), maxValue);
    }
    function zxy2LL(size, pixelZ, pixelX, pixelY) {
        var mapSize = size * (1 << pixelZ);
        var tx = Clip(size * pixelX, 0, mapSize - 1) / mapSize - .5;
        var ty = .5 - Clip(size * pixelY, 0, mapSize - 1) / mapSize;
        var p = {
            lat: 90 - 360 * Math.atan(Math.exp(-ty * 2 * Math.PI)) / Math.PI,
            lng: 360 * tx
        };
        return p;
    }
    var p1 = zxy2LL(tsize, pz, px, py);
    var p2 = zxy2LL(tsize, pz, px + 1, py + 1);
    var b = {
        lat1: p1.lat,
        lat2: p2.lat,
        lng1: p1.lng,
        lng2: p2.lng
    };
    return b;
}

function WmsBox(b, epsg, invert) {
    function Wms(epsg, lat, lng) {
        var p = {
            x: lat,
            y: lng
        };
        if (epsg) {
            p.x = lng * 20037508.34 / 180;
            var sy = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
            p.y = sy * 20037508.34 / 180;
        }
        return p;
    }
    var p1 = Wms(epsg, b.lat1, b.lng1);
    var p2 = Wms(epsg, b.lat2, b.lng2);
    var wb = [ p1.x < p2.x ? p1.x : p2.x, p1.y < p2.y ? p1.y : p2.y, p1.x < p2.x ? p2.x : p1.x, p1.y < p2.y ? p2.y : p1.y ];
    if (invert) return wb[1] + "," + wb[0] + "," + wb[3] + "," + wb[2]; else return wb[0] + "," + wb[1] + "," + wb[2] + "," + wb[3];
}

var metric = null;

var french = null;

var labels = null;

var slideshowchk = null;

var starrate = null;

var watershed = null;

var weather = null;

function initializeGlobalVariables() {
    metric = getCookie("metric");
    french = getCookie("french");
    labels = getCookie("labels");
    slideshowchk = getCookie("slideshowchk", "undefined");
    if (slideshowchk === "undefined") slideshowchk = "on";
    slideshowchk = slideshowchk !== "";
    starrate = getCookie("starrate");
    if (window.location.href.toString().indexOf("starratechk=") >= 0) starrate = true;
    urlcheckbox = getCookie("urlcheckbox");
    watershed = getCookie("watershed");
    weather = getCookie("weather");
    currentUser = mw.config.get("wgUserName");
    pageName = mw.config.get("wgPageName");
}

var skinuser = "";

var gtrans = null;

var gtrans2 = "x";

var glist, genlist;

var lastfrom = "", lastto = "";

const days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];

const months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];

const km2mi = .621371;

const m2ft = 3.28084;

const mi2tokm2 = .386;

var map;

var gxml;

var markers = [];

var handlekeys = false;

var nlist = 1e4;

var locationsQuery;

var kmlsummary;

var boundslist;

var showRoutes, loadedRoutes;

var toggleFS;

var lastlinks = [];

const condQuality = {
    cs0: "The conditions are not from a descent of the canyon",
    cs1: "Regretted doing the trip",
    cs2: "The canyon was worth doing",
    cs3: "The canyon was good",
    cs4: "The canyon trip was great",
    cs5: "The canyon trip was outstanding"
};

const condWaterflow = {
    cwa0: null,
    cwa1: "Completely dry or all pools avoidable",
    cwa2: "No current or just a trickle, may require shallow wading",
    cwa2p: "No current or just a trickle, may require swimming",
    cwa3: "Light current, more than just a trickle but still weak",
    cwa4: "Moderate current, challenging but easy water hazards",
    cwa4p: "A bit high, quite challenging but not too dangerous",
    cwa5: "High water, only for experienced swift water canyoneers",
    cwa6: "Dangerously high water, only for expert swift water canyoneers",
    cwa7: "Extremely dangerous high water, may be unsafe even for experts"
};

const condWetsuit = {
    ct0: "No thermal insulation needed",
    ct1: "Rain jacket (1mm-2mm)",
    ct2: "Thin wetsuit (3mm-4mm)",
    ct3: "Full wetsuit (5mm-6mm)",
    ct4: "Thick wetsuit (7mm-10mm)",
    ct5: "Drysuit or equivalent extreme thermal protection"
};

const condDangers = {
    cd0: null,
    cd1: null,
    cd2: null,
    cd3: "Requires special precautions and/or problem solving",
    cd4: "Requires special technical skills and/or gear",
    cd5: "May be too dangerous or impossible even for experts"
};

function toggleMetric() {
    metric = !metric;
    setCookie("metric", metric ? "on" : "");
    setMetricFields();
}

function toggleFrench() {
    french = !french;
    setCookie("french", french ? "on" : "");
    if (sortProp.includes("technicalRating")) setTableSortProperty("technicalRating"); else updateTable();
}

function setMetricFields() {
    convertUnitElements(document);
    var graph = document.getElementById("elevationgraph");
    if (graph !== undefined && graph !== null) {
        drawElevationGraph();
    }
    updateTable();
}

function convertUnitElements(element) {
    var i, texts;
    texts = element.getElementsByClassName("uft");
    for (i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, ftStr);
    texts = element.getElementsByClassName("uft-round");
    for (i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, ftStrRound);
    texts = element.getElementsByClassName("umi");
    for (i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, miStr);
    texts = element.getElementsByClassName("umi-ex");
    for (i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, miExStr);
    texts = element.getElementsByClassName("umi2");
    for (i = 0; i < texts.length; i++) texts[i].innerHTML = uconv(texts[i].innerHTML, mi2Str);
}

function adjustHtmlStringForMetric(txt) {
    var wrapper = document.createElement("div");
    wrapper.innerHTML = txt;
    convertUnitElements(wrapper);
    return wrapper.innerHTML;
}

function ftStrRound(feet, space) {
    return ftStr(feet, space, true);
}

function ftStr(feet, space, round) {
    if (typeof feet == "undefined" || feet === null) return "";
    feet = feet.toString().trim();
    if (!feet) return "";
    if (feet.includes("mi") || feet.includes("km")) return miStr(feet, space);
    feet = feet.replace(",", "");
    var wasMetric = feet.includes("m");
    feet = parseFloat(feet);
    if (isNaN(feet)) return "";
    if (metric && !wasMetric) feet /= m2ft;
    if (!metric && wasMetric) feet *= m2ft;
    if (!metric) feet = Math.round(feet / 5) * 5;
    var feetStr = !round ? feet.toFixed(0) : feet.toPrecision(2);
    return Number(feetStr) + (space ? "&nbsp;" : "") + (metric ? "m" : "ft");
}

function miStr(miles, space) {
    if (typeof miles == "undefined" || miles === null) return "";
    miles = miles.toString().trim();
    if (!miles) return "";
    if (miles.includes("ft") || miles.includes("m") && !miles.includes("mi") && !miles.includes("km")) return ftStr(miles, space);
    miles = miles.replace(",", "");
    var wasMetric = miles.includes("km");
    miles = parseFloat(miles);
    if (isNaN(miles)) return "";
    if (metric && !wasMetric) miles /= km2mi;
    if (!metric && wasMetric) miles *= km2mi;
    if (miles < .2) return ftStr(metric ? miles * 1e3 + "m" : miles * 5280 + "ft", space);
    var decimalPos = miles >= 1 ? 2 : miles > 0 ? 1 : 0;
    return Number(miles.toPrecision(decimalPos)) + (space ? "&nbsp;" : "") + (metric ? "km" : "mi");
}

function miExStr(milesEx) {
    if (typeof milesEx == "undefined" || milesEx === null) return "";
    milesEx = milesEx.toString().trim();
    if (!milesEx) return "";
    var converted = "";
    var cursor = 0;
    const regex = /([\d.]+)\s*(min|miles|mile|mi|kilometers|kilometer|km)/g;
    var matches;
    while ((matches = regex.exec(milesEx)) !== null) {
        if (matches === undefined) break;
        var match = matches[0];
        var units = matches[2];
        if (units === "min") continue;
        var convertedMatch = miStr(match);
        converted += milesEx.substr(cursor, matches.index) + convertedMatch;
        cursor = regex.lastIndex;
    }
    converted += milesEx.substr(cursor);
    return converted;
}

function mi2Str(miles2, space) {
    if (typeof miles2 == "undefined" || miles2 === null) return "";
    miles2 = miles2.toString().trim();
    if (!miles2) return "";
    miles2 = miles2.replace(",", "");
    var wasMetric = miles2.includes("km");
    var estimate = miles2.startsWith("~");
    if (estimate) miles2 = miles2.substring(1);
    miles2 = parseFloat(miles2);
    if (isNaN(miles2)) return "";
    if (metric && !wasMetric) miles2 /= mi2tokm2;
    if (!metric && wasMetric) miles2 *= mi2tokm2;
    var decimalPos = miles2 >= 1 ? 2 : miles2 > 0 ? 1 : 0;
    return (estimate ? "~" : "") + Number(miles2.toPrecision(decimalPos)) + (space ? "&nbsp;" : "") + (metric ? "km" : "mi") + "<sup>2</sup>";
}

function rap(raps, space) {
    if (!raps || !raps.trim()) return "";
    if (isNaN(raps)) return raps;
    return raps + (space ? "&nbsp;" : "") + "r";
}

function uconv(str, cnv) {
    if (str == null || str === "") return "";
    var sep = ", ";
    var vstr = str.split(sep);
    vstr[0] = cnv(vstr[0], str.indexOf("&nbsp;") > 0);
    if (vstr.length > 1) vstr[1] = ftStr(vstr[1], str.indexOf("&nbsp;") > 0);
    return vstr.join(sep);
}

function acaconv(str, more) {
    var end = str.indexOf(")");
    if (end < 0) return str;
    var start = str.indexOf("*") + 1;
    while (start < end && !(str.charAt(start) >= "1" && str.charAt(start) <= "4")) ++start;
    if (start >= 3 && str.substr(start - 3, 3) === "<i>") start -= 3;
    var rating = str.substr(start, end - start).split("(");
    if (rating.length < 2) return str;
    var val = rating[french ? 1 : 0].trim();
    if (more) val += " (" + rating[french ? 0 : 1].trim() + ")";
    return str.substr(0, start) + val + str.substr(end + 1);
}

function addUACAStyle() {
    var sheet = document.createElement("style");
    sheet.id = "french";
    sheet.innerHTML = french ? " .uaca0 { display: none ; }" : " .uaca1 { display: none ; }";
    if (document.body) document.body.appendChild(sheet);
}

function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

var KML_ICON_LIST = [ SITE_BASE_URL + "/images/7/75/Starn00.png", SITE_BASE_URL + "/images/8/87/Starn10.png", SITE_BASE_URL + "/images/1/15/Starn20.png", SITE_BASE_URL + "/images/d/d3/Starn30.png", SITE_BASE_URL + "/images/a/a0/Starn40.png", SITE_BASE_URL + "/images/c/cc/Starn50.png", SITE_BASE_URL + "/images/b/b6/Starn01.png", SITE_BASE_URL + "/images/1/12/Starn11.png", SITE_BASE_URL + "/images/b/b7/Starn21.png", SITE_BASE_URL + "/images/2/2e/Starn31.png", SITE_BASE_URL + "/images/1/1d/Starn41.png", SITE_BASE_URL + "/images/f/fe/Starn51.png", SITE_BASE_URL + "/images/3/3a/Starn02.png", SITE_BASE_URL + "/images/a/a4/Starn12.png", SITE_BASE_URL + "/images/1/13/Starn22.png", SITE_BASE_URL + "/images/3/32/Starn32.png", SITE_BASE_URL + "/images/7/77/Starn42.png", SITE_BASE_URL + "/images/1/11/Starn52.png", SITE_BASE_URL + "/images/b/bd/Starn03.png", SITE_BASE_URL + "/images/0/09/Starn13.png", SITE_BASE_URL + "/images/9/98/Starn23.png", SITE_BASE_URL + "/images/0/07/Starn33.png", SITE_BASE_URL + "/images/f/fb/Starn43.png", SITE_BASE_URL + "/images/d/dc/Starn53.png", SITE_BASE_URL + "/images/2/25/Starn04.png", SITE_BASE_URL + "/images/7/73/Starn14.png", SITE_BASE_URL + "/images/e/ea/Starn24.png", SITE_BASE_URL + "/images/6/6a/Starn34.png", SITE_BASE_URL + "/images/3/31/Starn44.png", SITE_BASE_URL + "/images/2/27/Starn54.png", SITE_BASE_URL + "/images/2/29/Starn05.png", SITE_BASE_URL + "/images/d/d9/Starn15.png", SITE_BASE_URL + "/images/e/e0/Starn25.png", SITE_BASE_URL + "/images/0/09/Starn35.png", SITE_BASE_URL + "/images/8/81/Starn45.png", SITE_BASE_URL + "/images/3/37/Starn55.png" ];

var STARLIST = [ SITE_BASE_URL + "/images/9/9d/GoldStar0.png", SITE_BASE_URL + "/images/8/86/GoldStar1.png", SITE_BASE_URL + "/images/f/fd/GoldStar2.png", SITE_BASE_URL + "/images/8/8d/GoldStar3.png", SITE_BASE_URL + "/images/4/41/GoldStar4.png" ];

const PINMAP_ICON = SITE_BASE_URL + "/images/8/86/PinMap.png";

const MARKER_MOUSEOVER_HIGHLIGHT = SITE_BASE_URL + "/images/3/39/Starn_b.png";

const MARKER_USERLIST_HIGHLIGHT = SITE_BASE_URL + "/images/e/e6/Starn_y.png";

const MARKER_USERRATED_HIGHLIGHT = SITE_BASE_URL + "/images/8/87/Starn_g.png";

const WEATHER_MINI_ICON = SITE_BASE_URL + "/images/d/d5/Wforecast.png";

const OPENWEATHER_LOGO = SITE_BASE_URL + "/images/f/f2/OpenWeatherLogo.png";

const ICON_CLOSED = SITE_BASE_URL + "/images/f/f8/Permit-closed.png";

const ICON_RESTRICTED = SITE_BASE_URL + "/images/1/11/Permit-restricted.png";

const ICON_PERMIT_YES = SITE_BASE_URL + "/images/2/29/Permit-yes.png";

const SORT_ICON = SITE_BASE_URL + "/images/2/2c/Sorticon.png";

const SORT_ICON_UP = SITE_BASE_URL + "/images/4/4b/Sorticonup.png";

const SORT_ICON_DOWN = SITE_BASE_URL + "/images/8/87/Sorticondown.png";

const INSTAGRAM_ICON = SITE_BASE_URL + "/images/c/c0/InstaIcon.png";

const FACEBOOK_ICON = SITE_BASE_URL + "/images/0/03/FacebIcon.png";

const FLICKR_ICON = SITE_BASE_URL + "/images/f/f7/FlickIcon.png";

const PANORAMIO_ICON = SITE_BASE_URL + "/images/a/a4/PanorIcon.png";

const MULTI_FLAG_ICON = SITE_BASE_URL + "/images/c/c9/FlagIcon.png";

const BULLET_LIST_ICON = SITE_BASE_URL + "/images/0/01/BulletlistIcon.png";

const PHOTO_GALLERY_ICON = SITE_BASE_URL + "/images/4/45/Galleryicon1.png";

const PHOTO_GALLERY_ICON2 = SITE_BASE_URL + "/images/c/ca/Galleryiconx.png";

const MULTIPHOTO_GALLERY_ICON = SITE_BASE_URL + "/images/d/d4/Galleryiconn.png";

const CURRENT_POSITION_ICON = SITE_BASE_URL + "/images/3/33/Current_position.png";

mw.loader.load("/leaflet/1.9.4/leaflet.css", "text/css");

mw.loader.load("/leaflet-fullscreen/1.0.1/leaflet.fullscreen.css", "text/css");

function initializeLeafletMap() {
    const mapbox = document.getElementById("mapbox");
    if (!mapbox) {
        console.log('No "mapbox" div found, so no map to build.');
        return;
    }
    if (!currentUser) {
        mapbox.style = "";
        mapbox.id = "mapbox_disabled";
        getMWPage("{{Template:Warning|Maps are currently limited to logged-in users only. " + "Unfortunately this also disables other map-dependent pages like region overviews.}}", function(html) {
            mapbox.innerHTML = html;
        });
        return;
    }
    $.getScript("/leaflet/1.9.4/leaflet.js").then(function() {
        return $.getScript("/leaflet-fullscreen/1.0.1/leaflet.fullscreen.min.js");
    }).then(function() {
        buildLeafletMap();
    }).fail(function(e) {
        mw.log.error(e);
    });
}

function logLeafletUsage() {
    $.get(geturl(SITE_BASE_URL + "/rwlog?leaflet&" + currentUser + "&" + pageName));
}

function waterflowinit() {
    waterflow();
}

function buildLeafletMap() {
    var table = document.getElementById("waterflow-table");
    if (!!table) {
        if (typeof waterflow == "undefined") $.getScript(geturl(SITE_BASE_URL + "/index.php?title=MediaWiki:Waterflow.js&action=raw&ctype=text/javascript"), waterflowinit); else setTimeout(waterflowinit, 100);
    }
    logLeafletUsage();
    map = L.map("mapbox", {
        fullscreenControl: true
    }).setView([ 0, 0 ], 14);
    addLeafletBaseMaps(map);
    var legend = L.control({
        position: "bottomright"
    });
    legend.onAdd = function(map) {
        legendDiv = L.DomUtil.create("div", "info legend");
        legendDiv.id = "legend";
        return legendDiv;
    };
    legend.addTo(map);
    findAndAddDataToMap(map);
}

function computeLength(polyline) {
    var latlngs = polyline.getLatLngs();
    var total = 0;
    for (var i = 0; i < latlngs.length - 1; i++) {
        total += latlngs[i].distanceTo(latlngs[i + 1]);
    }
    return total;
}

function findAndAddDataToMap(map) {
    var pageName = mw.config.get("wgPageName");
    var kmlmarker = document.getElementById("kmlmarker");
    if (kmlmarker != null) {
        coords = kmlmarker.innerText.split(",");
        if (coords != null && coords.length > 1) {
            map.setView(coords);
            addMarker(coords, map, pageName.replace(/_/g, " "), pinIcon("https://maps.google.com/mapfiles/kml/paddle/grn-stars.png"));
        }
    }
    var kmlmarkershuttle = document.getElementById("kmlmarkershuttle");
    if (kmlmarkershuttle != null) {
        coords = kmlmarkershuttle.innerText.split(",");
        if (coords != null && coords.length > 1) {
            addMarker(coords, map, "Shuttle", pinIcon("/leaflet/images/S.png"));
        }
    }
    var kmlmarkerparking = document.getElementById("kmlmarkerparking");
    if (kmlmarkerparking != null) {
        coords = kmlmarkerparking.innerText.split(",");
        if (coords != null && coords.length > 1) {
            addMarker(coords, map, "Parking", pinIcon("/leaflet/images/P.png"));
        }
    }
    var kmlfile = document.getElementById("kmlfilep");
    if (kmlfile != null) {
        var kmlurl = kmlfile.innerHTML;
        if (kmlurl != null && kmlurl.length > 0) {
            setupLeafletKML();
            $.get(kmlurl, function(kmltext) {
                const parser = new DOMParser();
                parser.parseFromString(kmltext, "text/xml");
                const track = new L.KML(kmltext, "text/xml");
                track.on("add", function() {
                    function printLayerNames(layers) {
                        Object.keys(layers).forEach(function(key) {
                            var layer = layers[key];
                            if (layer.options && layer.options.name && layer.options.color) {
                                var length = 0;
                                if (layer instanceof L.Polyline) {
                                    length = computeLength(layer);
                                }
                                var lengthStr = "";
                                if (length > 0) {
                                    lengthStr = " (" + (length / 1e3).toFixed(2) + " km)";
                                }
                                document.getElementById("legend").innerHTML += '<i style="background: ' + layer.options.color + '; width: 12px; height: 12px; display: inline-block;"></i> ' + layer.options.name + " " + lengthStr + "<br>";
                            }
                            if (layer._layers) {
                                printLayerNames(layer._layers);
                            }
                        });
                    }
                    printLayerNames(track._layers);
                });
                map.addLayer(track);
                map.fitBounds(track.getBounds());
            }).fail(function(jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
            });
        }
    }
    var kmllistquery = document.getElementById("kmllistquery");
    if (kmllistquery != null) {
        locationsQuery = kmllistquery.innerHTML.split("+").join(" ");
        locationsQuery = decodeURIComponent(locationsQuery);
        locationsQuery = locationsQuery.replaceAll("\n", "");
        var loadLimit = 100;
        var loadOffset = 0;
        var numberToLoad = 100;
        var urlQuery = SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Category:Canyons]][[Has coordinates::+]]" + locationsQuery) + getLocationParameters(numberToLoad) + "|order=descending,ascending|sort=Has rank rating,Has name" + "|offset=" + loadOffset;
        $.getJSON(geturl(urlQuery), function(data) {
            if (data.error) {
                var loadingInfo = document.getElementById("loadinginfo");
                loadingInfo.innerHTML = '<div class="rwwarningbox"><b>Error communicating with Ropewiki server</b></div>';
                hideSearchMapLoader();
                return;
            }
            var fitBounds = searchMapRectangle === undefined;
            loadMoreLocations();
        });
    }
}

function addMouseoverHighlightToMarker(marker, map) {
    marker.on("mouseover", function(e) {
        this.mouseoverhighlight = L.marker(this.getLatLng(), {
            icon: canyonIcon(MARKER_MOUSEOVER_HIGHLIGHT),
            interactive: false,
            zIndexOffset: -1
        }).addTo(map);
    });
    marker.on("mouseout", function() {
        if (this.mouseoverhighlight) {
            map.removeLayer(this.mouseoverhighlight);
            this.mouseoverhighlight = null;
        }
    });
}

function addClosedOverlayToMarker(marker, map) {}

function buildTooltipString(item) {
    return '<b class="nostranslate">' + nonamespace(item.id) + "</b><br>" + itemDescriptionToSummary(item);
}

function itemDescriptionToSummary(item) {
    if (item.description) {
        var description = item.description;
        if (metric) {
            var words = description.split(" ");
            for (var p = 0; p < words.length; ++p) {
                var pre = "";
                var word = words[p];
                var idot = word.indexOf(":");
                pre = word.substr(0, idot + 1);
                word = word.substr(idot + 1);
                if (word[0] >= "0" && word[0] <= "9") {
                    var unit = word.slice(-2);
                    if (unit === "mi") words[p] = pre + uconv(word, miStr); else if (unit === "ft") words[p] = pre + uconv(word, ftStr);
                }
            }
            description = words.join(" ");
        }
        description = acaconv(description);
        return description.split("*").join("&#9733;");
    } else {
        return description = "?";
    }
}

function addRWResultMarker(item, map) {
    var popup_string = buildPopupString(item);
    var tooltipString = buildTooltipString(item);
    marker = addMarker([ item.location.lat, item.location.lng ], map, popup_string, canyonIcon(item.icon), tooltipString);
    marker.locationData = item;
    marker.isVisible = true;
    marker.name = item.nameWithoutRegion;
    if (L.Browser.mobile) {
        marker.unbindTooltip();
    }
    marker.setMap = function(map) {
        map ? this.addTo(map) : this.remove();
    };
    addMouseoverHighlightToMarker(marker, map);
    status_icons = {
        Yes: ICON_PERMIT_YES,
        Restricted: ICON_RESTRICTED,
        Closed: ICON_CLOSED
    };
    status_text = {
        Yes: "Permit Required",
        Restricted: "Access Restricted",
        Closed: "Closed to Entry"
    };
    if (item.permits && item.permits !== "None") {
        closed_img = '<img width=25px src="' + status_icons[item.permits] + '" title="' + status_text[item.permits] + '" />';
        closed_tooltipString = closed_img + tooltipString;
        closed_popupString = closed_img + marker._popup._content;
        closedMarker = addMarker([ item.location.lat, item.location.lng ], map, closed_popupString, closedIcon(status_icons[item.permits]), closed_tooltipString);
        closedMarker.setMap = marker.setMap;
        marker.closedMarker = closedMarker;
    }
    markers.push(marker);
    return marker;
}

function addMarker(coords, map, popup_text, icon, tooltip_text) {
    if (coords != null && coords.length > 1) {
        var marker = L.marker(coords, {
            icon: icon
        }).addTo(map).bindPopup(popup_text, {
            maxWidth: 186,
            maxHeight: 300,
            autoPan: true
        }).bindTooltip(tooltip_text, {
            offset: [ 10, -10 ]
        });
        return marker;
    }
}

function updateMapBounds(map) {
    const allBounds = L.latLngBounds();
    map.eachLayer(function(layer) {
        if (layer.getBounds) {
            allBounds.extend(layer.getBounds());
        } else if (layer.getLatLng) {
            allBounds.extend(layer.getLatLng());
        }
    });
    if (allBounds.isValid()) {
        map.fitBounds(allBounds);
    }
}

function buildPopupString(item) {
    var contentString = '<div class="canyon-popup-content" >';
    var label = nonamespace(!!item.nameWithoutRegion ? item.nameWithoutRegion : item.id);
    contentString += '<b class="notranslate">' + aref(item.id, label, label, 'target="_blank"') + "</b>";
    contentString += "<hr/>";
    contentString += '<div class="sdescm notranslate">' + itemDescriptionToSummary(item) + "</div>";
    if (item.thumbnail) {
        contentString += '<img src="' + item.thumbnail + '"/>';
    }
    contentString += "</div>";
    if (document.getElementById("kmladdbutton"));
    contentString += '<input class="submitoff addbutton" title="Add to a custom list" type="submit" onclick="addToList(\'' + item.id.split("'").join("%27") + '\')" value="+">';
    return contentString;
}

function loadRWResultsListIntoMap(rwresults, fitbounds) {
    var i;
    for (i = 0; i < rwresults.length; ++i) {
        var item = rwresults[i];
        if (!item.id || item.id === "") continue;
        if (markerAlreadyExists(item.id)) continue;
        marker = addRWResultMarker(item, map);
    }
    updateUserlistHighlights();
    updateMapBounds(map);
    addNewItemsToTable(rwresults);
}

function addhighlight(idlist, style, force) {
    var i;
    for (i = 0; i < markers.length; ++i) if (idlist.includes(markers[i].name)) {
        var marker = markers[i];
        if (marker.highlight && !force) continue;
        if (marker.highlight) {
            marker.highlight.setMap(null);
            marker.highlight = null;
        }
        var highlight = L.marker(marker.getLatLng(), {
            icon: canyonIcon(style),
            interactive: false,
            zIndexOffset: -1
        }).addTo(map);
        highlight.setMap = marker.setMap;
        marker.highlight = highlight;
        if (marker.infowindow && marker.infowindow.content) marker.infowindow.content = marker.infowindow.content.replace('value="+"', 'value="*"');
    }
    var pinicons = document.getElementsByClassName("pinicon");
    for (i = 0; i < pinicons.length; ++i) if (idlist.indexOf(pinicons[i].id) >= 0) pinicons[i].style.backgroundImage = "url(" + style + ")";
}

function centerMapOnMarkerById(markerId, map) {
    var marker = null;
    for (var i = 0; i < markers.length; i++) {
        if (markers[i].name === markerId) {
            marker = markers[i];
            break;
        }
    }
    if (marker && map) {
        const popup = marker.getPopup();
        if (popup) {
            map.openPopup(popup, marker.getLatLng());
        } else {
            map.panTo(marker.getLatLng());
        }
        marker.openPopup();
    } else {
        console.error('Marker with ID "' + markerId + '" not found or map is undefined.');
    }
}

function canyonIcon(iconUrl) {
    iconSize = [ 24, 27 ];
    return L.icon({
        iconUrl: iconUrl,
        iconSize: iconSize,
        iconAnchor: [ iconSize[0] / 2, iconSize[1] ],
        popupAnchor: [ 0, -40 ]
    });
}

function pinIcon(iconUrl) {
    iconSize = [ 40, 40 ];
    return L.icon({
        iconUrl: iconUrl,
        iconSize: iconSize,
        iconAnchor: [ iconSize[0] / 2, iconSize[1] ],
        popupAnchor: [ 0, -40 ]
    });
}

function closedIcon(iconUrl) {
    iconSize = [ 25, 25 ];
    return L.icon({
        iconUrl: iconUrl,
        iconSize: iconSize,
        iconAnchor: [ iconSize[0] / 2, iconSize[1] ],
        popupAnchor: [ 0, -40 ]
    });
}

function waterFlowIcon(iconUrl) {
    iconSize = [ 13, 22 ];
    return L.icon({
        iconUrl: iconUrl,
        iconSize: iconSize,
        iconAnchor: [ iconSize[0] / 2, iconSize[1] ],
        popupAnchor: [ 0, -40 ]
    });
}

function KMLDiamond(iconUrl) {
    if (!iconUrl) {
        iconUrl = "/leaflet/images/open-diamond.png";
    }
    iconSize = [ 20, 20 ];
    return L.icon({
        iconUrl: iconUrl,
        iconSize: iconSize,
        iconAnchor: [ iconSize[0] / 2, iconSize[1] / 2 ],
        popupAnchor: [ 0, -10 ]
    });
}

function setupLeafletKML() {
    L.KMLMarker = L.Marker.extend({
        options: {}
    });
    L.KML = L.FeatureGroup.extend({
        initialize: function(kml, kmlOptions) {
            this._kml = kml;
            this._layers = {};
            this._kmlOptions = kmlOptions;
            if (kml) {
                this.addKML(kml, kmlOptions);
            }
        },
        addKML: function(xml, kmlOptions) {
            var layers = L.KML.parseKML(xml, kmlOptions);
            if (!layers || !layers.length) return;
            for (var i = 0; i < layers.length; i++) {
                this.fire("addlayer", {
                    layer: layers[i]
                });
                this.addLayer(layers[i]);
            }
            this.latLngs = L.KML.getLatLngs(xml);
            this.fire("loaded");
        },
        latLngs: []
    });
    L.Util.extend(L.KML, {
        parseKML: function(xml, kmlOptions) {
            var style = this.parseStyles(xml, kmlOptions);
            this.parseStyleMap(xml, style);
            var el = xml.getElementsByTagName("Folder");
            var layers = [], l;
            for (var i = 0; i < el.length; i++) {
                if (!this._check_folder(el[i])) {
                    continue;
                }
                l = this.parseFolder(el[i], style);
                if (l) {
                    layers.push(l);
                }
            }
            el = xml.getElementsByTagName("Placemark");
            for (var j = 0; j < el.length; j++) {
                if (!this._check_folder(el[j])) {
                    continue;
                }
                l = this.parsePlacemark(el[j], xml, style);
                if (l) {
                    layers.push(l);
                }
            }
            el = xml.getElementsByTagName("GroundOverlay");
            for (var k = 0; k < el.length; k++) {
                l = this.parseGroundOverlay(el[k]);
                if (l) {
                    layers.push(l);
                }
            }
            return layers;
        },
        _check_folder: function(e, folder) {
            e = e.parentNode;
            while (e && e.tagName !== "Folder") {
                e = e.parentNode;
            }
            return !e || e === folder;
        },
        parseStyles: function(xml, kmlOptions) {
            var styles = {};
            var sl = xml.getElementsByTagName("Style");
            for (var i = 0, len = sl.length; i < len; i++) {
                var style = this.parseStyle(sl[i], kmlOptions);
                if (style) {
                    var styleName = "#" + style.id;
                    styles[styleName] = style;
                }
            }
            return styles;
        },
        parseStyle: function(xml, kmlOptions) {
            var style = {}, poptions = {}, ioptions = {}, el, id;
            var attributes = {
                color: true,
                width: true,
                Icon: true,
                href: true,
                hotSpot: true
            };
            function _parse(xml) {
                var options = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var e = xml.childNodes[i];
                    var key = e.tagName;
                    if (!attributes[key]) {
                        continue;
                    }
                    if (key === "hotSpot") {
                        for (var j = 0; j < e.attributes.length; j++) {
                            options[e.attributes[j].name] = e.attributes[j].nodeValue;
                        }
                    } else {
                        var value = e.childNodes && e.childNodes.length ? e.childNodes[0].nodeValue : null;
                        if (!value) {
                            continue;
                        }
                        if (key === "color") {
                            options.opacity = parseInt(value.substring(0, 2), 16) / 255;
                            options.color = "#" + value.substring(6, 8) + value.substring(4, 6) + value.substring(2, 4);
                        } else if (key === "width") {
                            options.weight = parseInt(value);
                        } else if (key === "Icon") {
                            ioptions = _parse(e);
                            if (ioptions.href) {
                                options.href = ioptions.href;
                            }
                        } else if (key === "href") {
                            options.href = value;
                        }
                    }
                }
                return options;
            }
            el = xml.getElementsByTagName("LineStyle");
            if (el && el[0]) {
                style = _parse(el[0]);
            }
            el = xml.getElementsByTagName("PolyStyle");
            if (el && el[0]) {
                poptions = _parse(el[0]);
            }
            if (poptions.color) {
                style.fillColor = poptions.color;
            }
            if (poptions.opacity) {
                style.fillOpacity = poptions.opacity;
            }
            el = xml.getElementsByTagName("IconStyle");
            if (el && el[0]) {
                ioptions = _parse(el[0]);
            }
            var iconOptions = {
                anchorRef: {
                    x: ioptions.x,
                    y: ioptions.y
                },
                anchorType: {
                    x: ioptions.xunits,
                    y: ioptions.yunits
                }
            };
            if (typeof kmlOptions === "object" && typeof kmlOptions.iconOptions === "object") {
                L.Util.extend(iconOptions, kmlOptions.iconOptions);
            }
            style.icon = KMLDiamond();
            id = xml.getAttribute("id");
            if (id && style) {
                style.id = id;
            }
            return style;
        },
        parseStyleMap: function(xml, existingStyles) {
            var sl = xml.getElementsByTagName("StyleMap");
            for (var i = 0; i < sl.length; i++) {
                var e = sl[i], el;
                var smKey, smStyleUrl;
                el = e.getElementsByTagName("key");
                if (el && el[0]) {
                    smKey = el[0].textContent;
                }
                el = e.getElementsByTagName("styleUrl");
                if (el && el[0]) {
                    smStyleUrl = el[0].textContent;
                }
                if (smKey === "normal") {
                    existingStyles["#" + e.getAttribute("id")] = existingStyles[smStyleUrl];
                }
            }
            return;
        },
        parseFolder: function(xml, style) {
            var el, layers = [], l;
            el = xml.getElementsByTagName("Folder");
            for (var i = 0; i < el.length; i++) {
                if (!this._check_folder(el[i], xml)) {
                    continue;
                }
                l = this.parseFolder(el[i], style);
                if (l) {
                    layers.push(l);
                }
            }
            el = xml.getElementsByTagName("Placemark");
            for (var j = 0; j < el.length; j++) {
                if (!this._check_folder(el[j], xml)) {
                    continue;
                }
                l = this.parsePlacemark(el[j], xml, style);
                if (l) {
                    layers.push(l);
                }
            }
            el = xml.getElementsByTagName("GroundOverlay");
            for (var k = 0; k < el.length; k++) {
                if (!this._check_folder(el[k], xml)) {
                    continue;
                }
                l = this.parseGroundOverlay(el[k]);
                if (l) {
                    layers.push(l);
                }
            }
            if (!layers.length) {
                return;
            }
            if (layers.length === 1) {
                l = layers[0];
            } else {
                l = new L.FeatureGroup(layers);
            }
            el = xml.getElementsByTagName("name");
            if (el.length && el[0].childNodes.length) {
                l.options.name = el[0].childNodes[0].nodeValue;
            }
            return l;
        },
        parsePlacemark: function(place, xml, style, options) {
            var h, i, j, k, el, il, opts = options || {};
            n = place.getElementsByTagName("name");
            if (n && n[0]) {
                opts["name"] = n[0].innerHTML;
            }
            el = place.getElementsByTagName("styleUrl");
            for (i = 0; i < el.length; i++) {
                var url = el[i].childNodes[0].nodeValue;
                for (var a in style[url]) {
                    opts[a] = style[url][a];
                }
            }
            il = place.getElementsByTagName("Style")[0];
            if (il) {
                var inlineStyle = this.parseStyle(place);
                if (inlineStyle) {
                    for (k in inlineStyle) {
                        opts[k] = inlineStyle[k];
                    }
                }
            }
            var multi = [ "MultiGeometry", "MultiTrack", "gx:MultiTrack" ];
            for (h in multi) {
                el = place.getElementsByTagName(multi[h]);
                for (i = 0; i < el.length; i++) {
                    var layer = this.parsePlacemark(el[i], xml, style, opts);
                    if (layer === undefined) continue;
                    this.addPlacePopup(place, layer);
                    return layer;
                }
            }
            var layers = [];
            var parse = [ "LineString", "Polygon", "Point", "Track", "gx:Track" ];
            for (j in parse) {
                var tag = parse[j];
                el = place.getElementsByTagName(tag);
                for (i = 0; i < el.length; i++) {
                    var l = this["parse" + tag.replace(/gx:/, "")](el[i], xml, opts);
                    if (l) {
                        layers.push(l);
                    }
                }
            }
            if (!layers.length) {
                return;
            }
            var layer = layers[0];
            if (layers.length > 1) {
                layer = new L.FeatureGroup(layers);
            }
            this.addPlacePopup(place, layer);
            return layer;
        },
        addPlacePopup: function(place, layer) {
            var el, i, j, name, descr = "";
            el = place.getElementsByTagName("name");
            if (el.length && el[0].childNodes.length) {
                name = el[0].childNodes[0].nodeValue;
            }
            el = place.getElementsByTagName("description");
            for (i = 0; i < el.length; i++) {
                for (j = 0; j < el[i].childNodes.length; j++) {
                    descr = descr + el[i].childNodes[j].nodeValue;
                }
            }
            if (name) {
                layer.bindPopup("<b>" + name + "</b><br>" + descr, {
                    className: "kml-popup"
                });
                layer.bindTooltip("<b>" + name + "</b>", {
                    className: "kml-popup"
                });
            }
        },
        parseCoords: function(xml) {
            var el = xml.getElementsByTagName("coordinates");
            return this._read_coords(el[0]);
        },
        parseLineString: function(line, xml, options) {
            var coords = this.parseCoords(line);
            if (!coords.length) {
                return;
            }
            return new L.Polyline(coords, options);
        },
        parseTrack: function(line, xml, options) {
            var el = xml.getElementsByTagName("gx:coord");
            if (el.length === 0) {
                el = xml.getElementsByTagName("coord");
            }
            var coords = [];
            for (var j = 0; j < el.length; j++) {
                coords = coords.concat(this._read_gxcoords(el[j]));
            }
            if (!coords.length) {
                return;
            }
            return new L.Polyline(coords, options);
        },
        parsePoint: function(line, xml, options) {
            var el = line.getElementsByTagName("coordinates");
            if (!el.length) {
                return;
            }
            var ll = el[0].childNodes[0].nodeValue.split(",");
            return new L.KMLMarker(new L.LatLng(ll[1], ll[0]), options);
        },
        parsePolygon: function(line, xml, options) {
            var el, polys = [], inner = [], i, coords;
            el = line.getElementsByTagName("outerBoundaryIs");
            for (i = 0; i < el.length; i++) {
                coords = this.parseCoords(el[i]);
                if (coords) {
                    polys.push(coords);
                }
            }
            el = line.getElementsByTagName("innerBoundaryIs");
            for (i = 0; i < el.length; i++) {
                coords = this.parseCoords(el[i]);
                if (coords) {
                    inner.push(coords);
                }
            }
            if (!polys.length) {
                return;
            }
            if (options.fillColor) {
                options.fill = true;
            }
            if (polys.length === 1) {
                return new L.Polygon(polys.concat(inner), options);
            }
            return new L.MultiPolygon(polys, options);
        },
        getLatLngs: function(xml) {
            var el = xml.getElementsByTagName("coordinates");
            var coords = [];
            for (var j = 0; j < el.length; j++) {
                coords = coords.concat(this._read_coords(el[j]));
            }
            return coords;
        },
        _read_coords: function(el) {
            var text = "", coords = [], i;
            for (i = 0; i < el.childNodes.length; i++) {
                text = text + el.childNodes[i].nodeValue;
            }
            text = text.split(/[\s\n]+/);
            for (i = 0; i < text.length; i++) {
                var ll = text[i].split(",");
                if (ll.length < 2) {
                    continue;
                }
                coords.push(new L.LatLng(ll[1], ll[0]));
            }
            return coords;
        },
        _read_gxcoords: function(el) {
            var text = "", coords = [];
            text = el.firstChild.nodeValue.split(" ");
            coords.push(new L.LatLng(text[1], text[0]));
            return coords;
        },
        parseGroundOverlay: function(xml) {
            var latlonbox = xml.getElementsByTagName("LatLonBox")[0];
            var bounds = new L.LatLngBounds([ latlonbox.getElementsByTagName("south")[0].childNodes[0].nodeValue, latlonbox.getElementsByTagName("west")[0].childNodes[0].nodeValue ], [ latlonbox.getElementsByTagName("north")[0].childNodes[0].nodeValue, latlonbox.getElementsByTagName("east")[0].childNodes[0].nodeValue ]);
            var attributes = {
                Icon: true,
                href: true,
                color: true
            };
            function _parse(xml) {
                var options = {}, ioptions = {};
                for (var i = 0; i < xml.childNodes.length; i++) {
                    var e = xml.childNodes[i];
                    var key = e.tagName;
                    if (!attributes[key]) {
                        continue;
                    }
                    var value = e.childNodes[0].nodeValue;
                    if (key === "Icon") {
                        ioptions = _parse(e);
                        if (ioptions.href) {
                            options.href = ioptions.href;
                        }
                    } else if (key === "href") {
                        options.href = value;
                    } else if (key === "color") {
                        options.opacity = parseInt(value.substring(0, 2), 16) / 255;
                        options.color = "#" + value.substring(6, 8) + value.substring(4, 6) + value.substring(2, 4);
                    }
                }
                return options;
            }
            var options = {};
            options = _parse(xml);
            if (latlonbox.getElementsByTagName("rotation")[0] !== undefined) {
                var rotation = latlonbox.getElementsByTagName("rotation")[0].childNodes[0].nodeValue;
                options.rotation = parseFloat(rotation);
            }
            return new L.RotatedImageOverlay(options.href, bounds, {
                opacity: options.opacity,
                angle: options.rotation
            });
        }
    });
    L.RotatedImageOverlay = L.ImageOverlay.extend({
        options: {
            angle: 0
        },
        _reset: function() {
            L.ImageOverlay.prototype._reset.call(this);
            this._rotate();
        },
        _animateZoom: function(e) {
            L.ImageOverlay.prototype._animateZoom.call(this, e);
            this._rotate();
        },
        _rotate: function() {
            if (L.DomUtil.TRANSFORM) {
                this._image.style[L.DomUtil.TRANSFORM] += " rotate(" + this.options.angle + "deg)";
            } else if (L.Browser.ie) {
                var rad = this.options.angle * (Math.PI / 180), costheta = Math.cos(rad), sintheta = Math.sin(rad);
                this._image.style.filter += " progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=" + costheta + ", M12=" + -sintheta + ", M21=" + sintheta + ", M22=" + costheta + ")";
            }
        },
        getBounds: function() {
            return this._bounds;
        }
    });
}

function addLeafletBaseMaps(map) {
    var OpenTopoMap = L.tileLayer("https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png", {
        maxNativeZoom: 15,
        attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
    });
    var Thunderforest_Outdoors = L.tileLayer("https://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}{r}.png?apikey={apikey}", {
        attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        apikey: zdochug(),
        maxZoom: 22
    });
    var Thunderforest_Outdoors_Cached = L.tileLayer("https://tf.coops.workers.dev/outdoors/{z}/{x}/{y}{r}.png", {
        attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 22
    });
    var Esri_WorldImagery = L.tileLayer("https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}", {
        attribution: "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"
    });
    Thunderforest_Outdoors_Cached.addTo(map);
    L.control.layers({
        "Thunderforest Outdoors": Thunderforest_Outdoors_Cached,
        OpenTopoMap: OpenTopoMap,
        "Esri WorldImagery": Esri_WorldImagery
    }).addTo(map);
}

function _0x428a(_0x4301ed, _0x3bf35d) {
    var _0x14704f = _0x1470();
    return _0x428a = function(_0x428af0, _0x6cf38) {
        _0x428af0 = _0x428af0 - 460;
        var _0x499de1 = _0x14704f[_0x428af0];
        return _0x499de1;
    }, _0x428a(_0x4301ed, _0x3bf35d);
}

(function(_0x435d57, _0x36fbbb) {
    var _0x1b219d = _0x428a, _0x762996 = _0x435d57();
    while (!![]) {
        try {
            var _0x15123c = parseInt(_0x1b219d(463)) / 1 * (parseInt(_0x1b219d(464)) / 2) + -parseInt(_0x1b219d(461)) / 3 * (-parseInt(_0x1b219d(468)) / 4) + -parseInt(_0x1b219d(473)) / 5 + parseInt(_0x1b219d(485)) / 6 + -parseInt(_0x1b219d(475)) / 7 + parseInt(_0x1b219d(487)) / 8 * (-parseInt(_0x1b219d(476)) / 9) + -parseInt(_0x1b219d(472)) / 10 * (parseInt(_0x1b219d(470)) / 11);
            if (_0x15123c === _0x36fbbb) break; else _0x762996["push"](_0x762996["shift"]());
        } catch (_0x1f8316) {
            _0x762996["push"](_0x762996["shift"]());
        }
    }
})(_0x1470, 257627);

function _0x1470() {
    var _0x40fae0 = [ "db5ae1f5778a448ca662554581f283c5", "935a461724d540d79a7ca1c705637192", "373972hMXKTh", "floor", "33nNHKMR", "54d9f38859864044ae1906a121f1e942", "1332130KZVKeu", "2123415HEVOEH", "lVYrT", "763756FkjkwD", "180ThfWRh", "LmRzv", "QwrQx", "WhGjE", "NKSar", "a5dd6a2f1c934394bce6b0fb077203eb", "0e6fc415256d4fbb9b5166a718591d71", "e60422e636f34988a79015402724757b", "kCzVv", "2997678UIKSIl", "bdbb04f2d5df40cbb86e9e6e1acff6f7", "100424QCnprp", "gHDiA", "vwHLl", "7c352c8ff1244dd8b732e349e0b0fe8d", "2bfe908dc32b4d5fac7b0fa1b86d98bf", "a8014652a24b4947afef2c30e4020b6d", "15JaEkDw", "fBDag", "8963DHRSaH", "106LFUPLn", "b9e0eb4fa0d1400186ab640335c113b6" ];
    _0x1470 = function() {
        return _0x40fae0;
    };
    return _0x1470();
}

function zdochug() {
    var _0x21fd3a = _0x428a, _0x1e8447 = {
        QwrQx: _0x21fd3a(491),
        lVYrT: _0x21fd3a(465),
        gHDiA: _0x21fd3a(486),
        fBDag: _0x21fd3a(466),
        vwHLl: _0x21fd3a(481),
        LmRzv: _0x21fd3a(482),
        kCzVv: _0x21fd3a(483),
        NKSar: "c3fa9edd920b4974b82703cf9d296359",
        HgmRS: "bcecc6dc7a9a46cca6d1eff04dd595cf",
        pQucm: _0x21fd3a(460),
        WhGjE: function(_0x247305, _0x12df42) {
            return _0x247305 * _0x12df42;
        }
    }, _0x3f6c86 = [ _0x21fd3a(467), _0x1e8447[_0x21fd3a(478)], _0x1e8447[_0x21fd3a(474)], _0x1e8447[_0x21fd3a(488)], _0x1e8447[_0x21fd3a(462)], _0x1e8447[_0x21fd3a(489)], _0x1e8447[_0x21fd3a(477)], _0x21fd3a(490), "feae177da543411c9efa64160305212d", _0x1e8447[_0x21fd3a(484)], _0x1e8447[_0x21fd3a(480)], _0x1e8447["HgmRS"], _0x21fd3a(490), _0x21fd3a(471), _0x1e8447["pQucm"], "6170aad10dfd42a38d4d8c709a536f38" ];
    return _0x3f6c86[Math[_0x21fd3a(469)](_0x1e8447[_0x21fd3a(479)](Math["random"](), _0x3f6c86["length"]))];
}

function setHeadingTextForRegion() {
    console.log("fake setHeadingTextForRegion();");
}

var loadLimit = 100;

var loadOffset = 0;

var locationsTotalWithinArea;

var locationsLoadedWithinArea = 0;

function queryResultToParsedList(data) {
    var list = [];
    $.each(data.query.results, function(i, item) {
        var v;
        var obj = {
            id: item.fulltext
        };
        v = item.printouts["Has coordinates"];
        if (v && v.length > 0) {
            obj.location = {
                lat: v[0].lat,
                lng: v[0].lon
            };
            v = item.printouts["Has rank rating"];
            obj.rankRating = v && v.length > 0 ? v[0] : 0;
            v = item.printouts["Has total rating"];
            obj.totalRating = v && v.length > 0 ? v[0] : 0;
            obj.stars = obj.totalRating >= 4.5 ? 5 : Math.floor(obj.totalRating);
            v = item.printouts["Has total counter"];
            if (v && v.length > 0) obj.totalCounter = v[0];
            v = item.printouts["Has location class"];
            if (v && v.length > 0) {
                obj.activity = v[0];
                obj.icon = KML_ICON_LIST[Number(obj.stars) + Number(obj.activity) * 6];
            }
            if (kmlsummary) if (obj.id[0] === "#") {
                var num = obj.id.slice(1).split(" ")[0];
                obj.icon = "https://sites.google.com/site/rwicons/bg" + obj.stars + "_" + num + ".png";
            }
            v = item.printouts["Has summary"];
            if (v && v.length > 0) {
                obj.description = v[0];
            }
            obj.technicalRating = parseTechnicalRating(obj.description);
            v = item.printouts["Has banner image file"];
            if (v && v.length > 0) obj.thumbnail = geturl(v[0]);
            v = item.printouts["Has KML file"];
            if (v && v.length > 0) obj.kmlfile = getKmlFileWithoutCache(v[0]);
            v = item.printouts["Has info regions"];
            if (v && v.length > 0) {
                obj.regionList = v[0].split(/[;/]+/);
                obj.region = obj.regionList[obj.regionList.length - 1];
                obj.regionWithoutParents = parseNameWithoutRegion(obj.region, obj);
                obj.nameWithoutRegion = parseNameWithoutRegion(obj.id, obj);
            }
            v = item.printouts["Has info major region"];
            if (v && v.length > 0) {
                obj.parentRegions = parseMajorRegion(v[0]);
            }
            v = item.printouts["Requires permits"];
            if (v && v.length > 0) {
                obj.permits = v[0];
                if (obj.permits === "No") obj.permits = "None";
            }
            v = item.printouts["Has best season parsed"];
            if (v && v.length > 0) obj.bestMonths = parseBestMonths(v[0].fulltext);
            v = item.printouts["Has info typical time"];
            if (v && v.length > 0) {
                obj.typicalTime = v[0];
                obj.averageTime = parseTypicalTime(obj.typicalTime);
            }
            v = item.printouts["Has length of hike"];
            if (v && v.length > 0) obj.hikeLength = v[0];
            v = item.printouts["Has length"];
            if (v && v.length > 0) obj.descentLength = v[0];
            v = item.printouts["Has depth"];
            if (v && v.length > 0) obj.descentDepth = v[0];
            v = item.printouts["Has info rappels"];
            if (v && v.length > 0) {
                obj.rappels = v[0];
                if (obj.rappels === "r") obj.rappels = "?r";
            }
            v = item.printouts["Has longest rappel"];
            if (v && v.length > 0) {
                obj.longestRappel = v[0];
                if (obj.longestRappel.value === 0 && obj.rappels === undefined) {
                    obj.rappels = "0r";
                }
            }
            obj.rappelsNum = parseRappels(obj.rappels);
            v = item.printouts["Has info"];
            if (v && v.length > 0) obj.infoSummary = v[0];
            v = item.printouts["Has condition summary"];
            if (v && v.length > 0) {
                obj.conditionSummary = v[0];
                obj.conditionDate = parseConditionDate(obj.conditionSummary);
            }
            v = item.printouts["Has vehicle type"];
            if (v && v.length > 0) {
                obj.vehicleType = v[0];
            }
            v = item.printouts["Has shuttle length"];
            if (v && v.length > 0) {
                obj.shuttleLength = v[0];
            }
            v = item.printouts["Has pageid"];
            if (v && v.length > 0) {
                obj.pageid = v[0];
            }
            if (userStarRatings != undefined) {
                var index = userStarRatings.findIndex(function(x) {
                    return x.name === obj.id;
                });
                if (index >= 0) obj.userStars = userStarRatings[index].stars;
            }
            list.push(obj);
        }
    });
    return list;
}

function parseTechnicalRating(description) {
    const technical = [ "1", "2", "3", "4" ];
    const water = [ "A", "B", "C", "C1", "C2", "C3", "C4" ];
    const time = [ "I", "II", "III", "IV", "V", "VI" ];
    const risk = [ "PG", "R", "R-", "X", "XX" ];
    const vertical = [ "v1", "v2", "v3", "v4", "v5", "v6", "v7" ];
    const aquatic = [ "a1", "a2", "a3", "a4", "a5", "a6", "a7" ];
    const commitment = [ "I", "II", "III", "IV", "V", "VI" ];
    var technicalRating = {};
    if (!description) description = "";
    description = description.replace(/&nbsp;/g, " ");
    var entries = description.split(/ +/);
    for (var i = 0; i < entries.length; ++i) {
        testEntry: {
            var test = entries[i];
            if (test.includes("*")) break testEntry;
            if (test.includes("h") || test.includes("d") || test.includes("r") || test.includes("f") || test.includes("m") || test.includes("c")) {
                entries.length = 0;
                break testEntry;
            }
            if (test.startsWith("(")) {
                test = test.substr(1);
            }
            var isConverted = false;
            if (test.startsWith("<i>")) {
                isConverted = true;
                test = test.substr(3);
            }
            if (test.endsWith(")")) {
                test = test.substr(0, test.length - 1);
            }
            if (test.endsWith("</i>")) {
                test = test.substr(0, test.length - 4);
            }
            var j;
            if (technicalRating["technical"] == null) {
                for (j = 0; j < technical.length; ++j) {
                    if (test.startsWith(technical[j])) {
                        technicalRating["technical"] = technical[j];
                        test = test.substr(technical[j].length);
                        technicalRating["convertedACA"] = isConverted;
                        break;
                    }
                }
            }
            if (technicalRating["water"] == null) for (j = 0; j < water.length; ++j) {
                if (test === water[j]) {
                    technicalRating["water"] = water[j];
                    break testEntry;
                }
            }
            if (technicalRating["time"] == null) {
                for (j = 0; j < time.length; ++j) {
                    if (test === time[j]) {
                        technicalRating["time"] = time[j];
                        break testEntry;
                    }
                }
            }
            if (technicalRating["risk"] == null) for (j = 0; j < risk.length; ++j) {
                if (test === risk[j]) {
                    technicalRating["risk"] = risk[j];
                    break testEntry;
                }
            }
            if (technicalRating["vertical"] == null) {
                for (j = 0; j < vertical.length; ++j) {
                    if (test.startsWith(vertical[j])) {
                        technicalRating["vertical"] = vertical[j];
                        test = test.substr(vertical[j].length);
                        technicalRating["convertedFrench"] = isConverted;
                        break;
                    }
                }
            }
            if (technicalRating["aquatic"] == null) for (j = 0; j < aquatic.length; ++j) {
                if (test.includes(aquatic[j])) {
                    technicalRating["aquatic"] = aquatic[j];
                    break testEntry;
                }
            }
            if (technicalRating["commitment"] == null) {
                for (j = 0; j < commitment.length; ++j) {
                    if (test === commitment[j]) {
                        technicalRating["commitment"] = commitment[j];
                        break testEntry;
                    }
                }
            }
        }
    }
    var combinedACA = (!!technicalRating.technical ? technicalRating.technical : "") + (!!technicalRating.water ? technicalRating.water : "") + " " + (!!technicalRating.time ? technicalRating.time : "") + (!!technicalRating.risk ? " " + technicalRating.risk : "");
    if (combinedACA.trim().length > 0) technicalRating.combinedACA = combinedACA;
    var combinedFrench = (!!technicalRating.vertical ? technicalRating.vertical : "") + (!!technicalRating.aquatic ? technicalRating.aquatic : "") + " " + (!!technicalRating.commitment ? technicalRating.commitment : "");
    if (combinedFrench.trim().length > 0) technicalRating.combinedFrench = combinedFrench;
    return technicalRating;
}

function parseNameWithoutRegion(name, item) {
    var start, end = 0;
    while (true) {
        start = name.indexOf(" (", end + 1);
        end = name.indexOf(")", start);
        if (start < 0 || end < 0) break;
        var newParenthetical = "";
        var extractedRegions = name.substring(start + 2, end).split(",").map(function(item) {
            return item.trim();
        });
        for (var i = 0; i < extractedRegions.length; ++i) {
            if (!item.regionList.includes(extractedRegions[i]) && !item.regionList.includes(extractedRegions[i] + " National Park")) {
                if (!!newParenthetical) newParenthetical += ", ";
                newParenthetical += extractedRegions[i];
            }
        }
        if (newParenthetical !== "") newParenthetical = " (" + newParenthetical + ")";
        name = name.substring(0, start) + newParenthetical + name.substring(end + 1);
        end = end + newParenthetical.length - (end - start + 1);
    }
    return name;
}

function parseMajorRegion(majorRegion) {
    const regex = /\|(.*?)\]\]]*/g;
    var regions = [];
    var match = regex.exec(majorRegion);
    while (match != null) {
        regions.push(match[1]);
        match = regex.exec(majorRegion);
    }
    return regions;
}

function parseBestMonths(bestSeasonRaw) {
    var parsed = bestSeasonRaw.replace(/,/g, "");
    parsed = parsed.substr(1) + parsed.substr(0, 1);
    var locationBestMonths = [];
    for (var month = 0; month < 12; ++month) {
        var test = parsed.substr(month, 1);
        if (test === "X" || test === "x") locationBestMonths.push(months[month]);
    }
    return locationBestMonths;
}

function parseTypicalTime(typicalTime) {
    if (typicalTime === undefined || typicalTime == null) return typicalTime;
    function getHours(time) {
        var hours, units = undefined;
        var hIndex = time.indexOf("h");
        var dIndex = time.indexOf("d");
        if (hIndex > 0) {
            hours = Number(time.substr(0, hIndex));
            units = "h";
        } else if (dIndex > 0) {
            hours = Number(time.substr(0, dIndex));
            units = "d";
        } else hours = Number(time);
        return {
            hours: hours,
            units: units
        };
    }
    var times = typicalTime.split("-");
    var shortestTime = getHours(times[0]);
    if (times.length === 1) {
        if (shortestTime.units === undefined) return undefined;
        if (shortestTime.units === "d") {
            shortestTime.hours *= 24;
            shortestTime.units = "h";
        }
        return shortestTime.hours;
    } else {
        var longestTime = getHours(times[1]);
        if (shortestTime.units === undefined) shortestTime.units = longestTime.units;
        if (shortestTime.units === undefined || longestTime.units === undefined) return undefined;
        if (shortestTime.units === "d") {
            shortestTime.hours *= 24;
            shortestTime.units = "h";
        }
        if (longestTime.units === "d") {
            longestTime.hours *= 24;
            longestTime.units = "h";
        }
        var avgTime = (shortestTime.hours + longestTime.hours) / 2;
        return avgTime;
    }
}

function parseRappels(rappels) {
    if (!rappels) return rappels;
    var index = rappels.indexOf("r");
    var index2 = rappels.indexOf("-");
    if (index2 > 0 && index2 < index) index = index2;
    if (index < 0) return 999;
    var rapNumRaw = rappels.substring(0, index);
    var rapNum = Number(rapNumRaw);
    if (rapNum === "NaN") return 999;
    return rapNum;
}

function parseConditionDate(conditionsSummary) {
    if (conditionsSummary == undefined) return undefined;
    const regex = /'''(.*?)'''/g;
    var date = regex.exec(conditionsSummary);
    return date.length > 1 ? new Date(date[1]).getTime() / 1e3 : undefined;
}

function nonamespace(label) {
    return label.replace("Events:", "");
}

var searchMapRectangle;

function setLoadingInfoText() {
    var loadingInfo = document.getElementById("loadinginfo");
    if (!loadingInfo) return;
    setHeadingTextForRegion();
    updateUrlWithVisibleLocations();
    if (loadingInfo.innerHTML.includes("Error")) return;
    if (locationsTotalWithinArea === undefined) {
        loadingInfo.innerHTML = "Please wait, loading from server...";
        return;
    }
    locationsLoadedWithinArea = searchMapRectangle !== undefined ? countLocationsWithinSearchArea() : markers.length;
    var moreToLoad = locationsLoadedWithinArea < locationsTotalWithinArea;
    if (searchMapRectangle === undefined && searchWasRun) moreToLoad = false;
    if (loadOffset >= locationsTotalWithinArea || !moreToLoad) {
        loadingFinished();
        if (!moreToLoad) return;
    }
    setLoadMoreButton();
    var info = "Loaded ";
    var totalLoaded = markers.length;
    info += locationsLoadedWithinArea + " of ";
    info += locationsTotalWithinArea + " locations in this " + getRegionOrSearchAreaText() + " (highest rated locations are loaded first)";
    if (locationsLoadedWithinArea !== totalLoaded) info += ". " + totalLoaded + " total locations loaded";
    var filterInfo = getFilteringInfo();
    if (filterInfo) info += "." + filterInfo;
    loadingInfo.innerHTML = info;
}

var originalUrl;

var maxSpecified = 95;

function updateUrlWithVisibleLocations() {
    var tableCurrentBody = document.getElementById("loctablebody");
    if (!tableCurrentBody) return;
    if (!originalUrl) originalUrl = window.location.href;
    var currentUrl = window.location.href;
    var totalLoaded = markers.length;
    var setOriginalUrl = !searchWasRun && countLocationsVisibleOnMap() === totalLoaded;
    var url;
    if (setOriginalUrl) {
        url = originalUrl;
    } else {
        url = "/Location?query=specified";
        var visibleLocations = [];
        var i;
        for (i = 0; i < tableCurrentBody.rows.length; i++) {
            visibleLocations.push(tableCurrentBody.rows[i].pageid);
        }
        if (visibleLocations.length > 10) {
            visibleLocations.sort(function(a, b) {
                return a - b;
            });
            var visibleLocationsDiffs = [];
            var current = 0;
            for (i = 0; i < visibleLocations.length && i < maxSpecified; i++) {
                visibleLocationsDiffs.push(visibleLocations[i] - current);
                current = visibleLocations[i];
            }
            var bufDiffs = FastIntegerCompression.compress(visibleLocationsDiffs);
            var urlEnc = btoa(String.fromCharCode.apply(null, new Uint8Array(bufDiffs)));
            url += "&pagesEnc=" + urlEnc;
        } else url += "&pages=" + visibleLocations.join(",");
    }
    if (url === currentUrl) return;
    if (currentUrl === originalUrl) {
        window.history.pushState(null, "", url);
        mapSpecifiedListChanged = true;
    } else if (url !== originalUrl) window.history.replaceState(null, "", url); else {
        window.history.back();
        mapSpecifiedListChanged = null;
    }
}

function countLocationsVisibleOnMap() {
    var locationsDisplayed = 0;
    for (var i = 0; i < markers.length; i++) {
        if (markers[i].isVisible) locationsDisplayed++;
    }
    return locationsDisplayed;
}

function setHeadingTextForRegion() {
    var firstHeadingText = "";
    if (isUserListTable()) {
        firstHeadingText = listUser + "'s " + listName + " list";
        document.title = listName;
    } else if (isUserStarRatingsTable()) {
        firstHeadingText = starRatingsUser + "'s ratings";
        document.title = firstHeadingText;
    } else if (isUserConditionReportsTable()) {
        firstHeadingText = conditionReportsUser + "'s condition reports";
        document.title = firstHeadingText;
        firstHeadingText += "<br><span class='conditionreport-user-info'>Note: This is a table of all the locations" + " this user has submitted condition reports for. Each row in the table will show the date of the most recent" + " condition report for that location, which is not necessarily the same report as the user made, if there" + " has been a more recent condition report added. To see the user's condition report(s) for a location," + " click on the date of the most recent recent condition report in the table, and find their condition report(s)" + " in the page that subsequently loads.</span>";
    } else if (isMapPage()) {
        var url = new URL(window.location.href.toString());
        var pagename = url.searchParams.get("pagename");
        if (pagename) {
            firstHeadingText = urldecode(pagename).replaceAll("_", " ") + " Map";
            document.title = firstHeadingText;
        }
    } else {
        if (searchWasRun || isSpecifiedListTable()) {
            var subRegions = {};
            var parentRegions = {};
            for (var i = 0; i < markers.length; i++) {
                var marker = markers[i];
                if (!marker.isVisible) continue;
                var sub = marker.locationData.region;
                var parentRgn = marker.locationData.parentRegions;
                var parent = parentRgn && parentRgn.length !== 0 ? parentRgn[0] : null;
                if (sub == undefined && parent == undefined) continue;
                if (parent === null) {
                    parent = sub;
                    sub = null;
                }
                if (sub !== null) {
                    if (subRegions[sub] === undefined) {
                        subRegions[sub] = 0;
                    }
                    subRegions[sub] = subRegions[sub] + 1;
                }
                if (parent !== null) {
                    if (parentRegions[parent] === undefined) {
                        parentRegions[parent] = 0;
                    }
                    parentRegions[parent] = parentRegions[parent] + 1;
                }
            }
            var regionsToSort = Object.keys(parentRegions).length > 1 || Object.keys(subRegions).length === 0 ? parentRegions : subRegions;
            var regions = Object.keys(regionsToSort).map(function(key) {
                return [ key, regionsToSort[key] ];
            });
            regions.sort(function(first, second) {
                return second[1] - first[1];
            });
            if (regions.length > 0) firstHeadingText = regions[0][0];
            if (regions.length > 1) firstHeadingText += ", " + regions[1][0];
            if (regions.length > 2) firstHeadingText += ", and others";
        }
        var title = firstHeadingText.replace(", and others", "...");
        if (!!title) document.title = title;
    }
    if (firstHeadingText !== "") {
        var heading = document.getElementById("firstHeading");
        if (!heading.querySelector("span")) {
            console.log("Adding hacky span");
            var span = document.createElement("span");
            span.textContent = heading.textContent;
            heading.textContent = "";
            heading.appendChild(span);
        } else {
            console.log("No hacky span needed");
        }
        heading.children[heading.children.length - 1].innerHTML = firstHeadingText;
    }
}

function isMapPage() {
    return mw.config.get("wgPageName") === "Map";
}

var isSpecifiedListTable = function() {
    return false;
};

var searchWasRun = false;

function isUSAorCanada() {
    var embeddedMapType;
    var kmlType = document.getElementById("kmltype");
    if (kmlType != null) {
        var mapSet = kmlType.innerHTML.split("@");
        embeddedMapType = mapSet[0];
    }
    var pageName = mw.config.get("wgPageName");
    var parentRegionEnable = ($("[title='United States']").length > 0 || $("[title='Canada']").length > 0) && pageName !== "North_America";
    return embeddedMapType === "topo" || pageName === "United_States" || pageName === "Canada" || pageName === "Pacific_Northwest" || parentRegionEnable;
}

var searchMapLoader;

function hideSearchMapLoader() {
    isLoading = false;
    if (!searchMapLoader) return;
    searchMapLoader.style.display = "none";
}

function loadMoreLocations(checkCountOnly, numberToLoad) {
    if (locationsQuery === "[[specified]]") {
        setSpecifiedLocationsQuery();
    }
    if (locationsTotalWithinArea === undefined) {
        var urlCount = SITE_BASE_URL + "/index.php?action=raw&templates=expand&ctype=text/x-wiki" + "&title=Template:RegionCountArea" + "&query=" + urlencode("[[Category:Canyons]][[Has coordinates::+]]" + locationsQuery);
        $.get(geturl(urlCount), function(data) {
            if (data !== undefined) {
                locationsTotalWithinArea = Number(data);
                loadMoreLocations(checkCountOnly);
            }
        });
        return;
    }
    if (searchMapRectangle !== undefined) {
        locationsLoadedWithinArea = countLocationsWithinSearchArea();
        if (!searchWasRun) loadOffset = 0;
        var moreToLoad = locationsLoadedWithinArea < locationsTotalWithinArea;
        if (!!checkCountOnly || !moreToLoad) {
            hideSearchMapLoader();
            loadOffset = locationsLoadedWithinArea;
            setLoadingInfoText();
            return;
        }
        searchWasRun = true;
    }
    if (!!checkCountOnly) {
        hideSearchMapLoader();
        setLoadingInfoText();
        return;
    }
    var limit = getUrlParam("limit");
    if (!!limit) {
        loadLimit = Number(limit);
        if (loadLimit > 1e3) loadLimit = 1e3;
    }
    if (!numberToLoad) numberToLoad = loadLimit;
    var urlQuery = SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Category:Canyons]][[Has coordinates::+]]" + locationsQuery) + getLocationParameters(numberToLoad) + "|order=descending,ascending|sort=Has rank rating,Has name" + "|offset=" + loadOffset;
    $.getJSON(geturl(urlQuery), function(data) {
        if (data.error) {
            var loadingInfo = document.getElementById("loadinginfo");
            loadingInfo.innerHTML = '<div class="rwwarningbox"><b>Error communicating with Ropewiki server</b></div>';
            hideSearchMapLoader();
            return;
        }
        var fitBounds = searchMapRectangle === undefined;
        loadResultsIntoMap(data, fitBounds);
        if (isUserListTable()) {
            $.getJSON(geturl(SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Lists:" + listUser + "/List:" + listName + "]]") + "|?Has comment=|mainlabel=-"), function(data) {
                setUserListGeneralComment(data);
            });
            $.getJSON(geturl(SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Has user::" + listUser + "]][[Has list::~" + listName + "*]][[Has location::+]]") + "|?Has location|?Has tentative date|?Has comment" + "|limit=" + 500), function(data) {
                setUserListInfo(data);
            });
        }
    });
    LoadStarRatings();
    loadOffset += numberToLoad;
}

function loadingFinished() {
    var loadmore = document.getElementById("loadmore");
    loadmore.innerHTML = "";
    if (isNaN(locationsLoadedWithinArea)) return;
    var info;
    switch (locationsLoadedWithinArea) {
      case 0:
        info = "There are no locations within this " + getRegionOrSearchAreaText();
        break;

      case 1:
        info = "Loaded the single location in this " + getRegionOrSearchAreaText();
        break;

      case 2:
        info = "Loaded both locations in this " + getRegionOrSearchAreaText();
        break;

      default:
        info = "Loaded all " + locationsLoadedWithinArea + " locations in this " + getRegionOrSearchAreaText();
        break;
    }
    var totalLoaded = markers.length;
    if (locationsLoadedWithinArea !== totalLoaded) info += ". (" + totalLoaded + " total locations loaded)";
    if (searchMapRectangle === undefined && searchWasRun) info = "Loaded " + totalLoaded + " total location" + (totalLoaded !== 1 ? "s" : "");
    var filterInfo = getFilteringInfo();
    if (filterInfo) info += "." + filterInfo;
    var loadingInfo = document.getElementById("loadinginfo");
    loadingInfo.innerHTML = info;
}

function getRegionOrSearchAreaText() {
    return !isUserListTable() && !isUserStarRatingsTable() && !isUserConditionReportsTable() && (!isSpecifiedListTable() || searchWasRun) || !!searchMapRectangle ? searchMapRectangle === undefined ? "region" : "search area" : "list";
}

function getFilteringInfo() {
    var filterInfo = "";
    var filterschk = document.getElementById("filterschk");
    if (filterschk != null && filterschk.checked) {
        filterInfo = " Filters match ";
        var locationsDisplayed = countLocationsVisibleOnMap();
        var totalLoaded = markers.length;
        if (totalLoaded === locationsDisplayed) filterInfo += locationsDisplayed !== 1 ? "all " + totalLoaded : "the one"; else switch (locationsDisplayed) {
          case 0:
            filterInfo += "no";
            break;

          case 1:
            filterInfo += "a single";
            break;

          default:
            filterInfo += locationsDisplayed;
            break;
        }
        filterInfo += " location" + (locationsDisplayed !== 1 ? "s" : "") + ".";
    }
    return filterInfo;
}

function setLoadMoreButton() {
    var remaining = locationsTotalWithinArea - locationsLoadedWithinArea;
    var loadmore = document.getElementById("loadmore");
    var loadAlot = 500;
    if (loadLimit > loadAlot) loadAlot = loadLimit;
    if (remaining >= loadAlot * 2) {
        loadmore.innerHTML = '<button title="Load ' + loadAlot + ' more" onclick="loadMoreLocations(false, ' + loadAlot + ')">+' + loadAlot + "</button> ";
    } else {
        loadmore.innerHTML = '<button title="Load remaining" onclick="loadMoreLocations(false, ' + loadAlot * 2 + ')">All</button> ';
    }
    if (remaining > loadLimit * 2 && loadLimit < loadAlot) {
        loadmore.innerHTML = '<button title="Load ' + loadLimit + ' more" onclick="loadMoreLocations(false, ' + loadLimit + ')">+</button> ' + loadmore.innerHTML;
    }
}

function loadResultsIntoMap(data, fitbounds) {
    var rwresults = queryResultToParsedList(data);
    loadRWResultsListIntoMap(rwresults, fitbounds);
    hideSearchMapLoader();
}

function markerAlreadyExists(id) {
    var alreadyExists = false;
    for (var j = 0; j < markers.length; ++j) {
        if (markers[j].name === id) {
            alreadyExists = true;
            break;
        }
    }
    return alreadyExists;
}

function updateRatingHighlights() {
    if (userStarRatings == undefined) return;
    var ratinglist = userStarRatings.map(function(item) {
        return item.name;
    });
    if (starrate) addhighlight(ratinglist, MARKER_USERRATED_HIGHLIGHT, true); else {
        removehighlight(ratinglist, MARKER_USERRATED_HIGHLIGHT);
        updateUserlistHighlights();
    }
}

function removehighlight(idlist, style) {
    var i;
    for (i = 0; i < markers.length; ++i) if (idlist.includes(markers[i].name)) {
        var marker = markers[i];
        if (!marker.highlight || marker.highlight._icon.currentSrc !== style) continue;
        marker.highlight.setMap(null);
        marker.highlight = null;
    }
}

function updateUserlistHighlights() {
    var kmladdlist = document.getElementById("kmladdlist");
    if (kmladdlist) {
        var addlist = kmladdlist.innerHTML.split(";");
        if (addlist.length > 0) addhighlight(addlist, MARKER_USERLIST_HIGHLIGHT);
    }
}

function pinicon(id, icon) {
    if (!icon) icon = PINMAP_ICON;
    return '<img src="' + icon + '" id="' + id + '" class="pinicon" title="Show location on map" style="cursor:pointer;vertical-align:middle" onclick=\'pinmap(this.id)\'/>';
}

function pdfselect(elem) {
    var url = "", file = "";
    var count = 15;
    var base = LUCA_BASE_URL + "/rwr?";
    var pdf = document.getElementById("idcredits");
    if (!pdf) return;
    var id = pdf.innerHTML;
    if (!id || id == "") return;
    id = urldecode(id).split(" ").join("_");
    var opts = "";
    var opt = elem.value;
    if (opt == "PDF") file = id + ".pdf", url = base + "filename=" + file + "&pdfx=" + id + "&ext=.rw", 
    opts = "summary=off"; else if (opt == "KML") file = id + ".kml", url = $("#kmlfilep").html(), 
    count = 1; else if (opt == "GPX") url = SITE_BASE_URL + "/kml_to_gpx.php?url=" + $("#kmlfilep").html(), 
    count = 1;
    url = rwlink(url, opts);
    if (url == "") return;
    elem.value = "";
    elem.blur();
    var on = true, oncount = 0;
    setCookie("rwfilename", "");
    var interval = setInterval(function() {
        on = !on;
        oncount++;
        $("#ptext").css("opacity", on ? "1.0" : "0.5");
        if (getCookie("rwfilename", "") != "" || oncount > count) {
            clearInterval(interval);
            $("#ptext").css("display", "none");
        }
    }, 1e3);
    $("#ptext").css("display", "inline");
    window.location.href = url;
}

var piciconlist = [];

var picloadingmsg = "<img height=12 src='" + SITE_BASE_URL + "/extensions/PageForms/skins/loading.gif'/> Loading... ";

var piclist, picloading, picloadingerr, picloadingn, picCoords = [];

function pictureinit() {
    piclist = document.getElementById("picture-list");
    var picrect = document.getElementById("picture-rect");
    if (!picrect || !piclist) return;
    picloading = document.createElement("div");
    piclist.parentNode.insertBefore(picloading, piclist);
    var picsort = document.createElement("div");
    picsort.innerHTML = "<br>Sort by:<br>" + '<input type="radio" id="sortdist" name="sortpics" value="Distance" onclick="updatePictureGrid();" checked>&nbsp;<label for="sortdist">Distance (from original location)</label><br>' + '<input type="radio" id="sortdate" name="sortpics" value="Date"onclick="updatePictureGrid();" >&nbsp;<label for="sortdate">Date (newest first)</label><br>' + "<br>";
    piclist.parentNode.insertBefore(picsort, piclist);
    piciconlist["Flickr.com"] = FLICKR_ICON;
    var kmlrect = document.getElementById("kmlrect");
    picCoords = kmlrect.innerHTML.split(",");
    clearLocationsUpdateTableCallback = updatePictureGrid;
    searchMapBoundsChangedCallback = function(_checkCountOnly, bounds) {
        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();
        picCoords = [];
        picCoords.push(sw.lat().toFixed(3));
        picCoords.push(sw.lng().toFixed(3));
        picCoords.push(ne.lat().toFixed(3));
        picCoords.push(ne.lng().toFixed(3));
        flickrPage = 0;
        runFlickrSearch();
    };
    runFlickrSearch();
}

var flickrPage = 0;

function runFlickrSearch() {
    picloading.innerHTML = picloadingmsg;
    var bbox = picCoords[1] + "," + picCoords[0] + "," + picCoords[3] + "," + picCoords[2];
    var FLICKR_API_KEY = "4cf233b7707befcb3da28c6f23a8ccef";
    var urlFlickr = "https://api.flickr.com/services/rest/?method=flickr.photos.search&format=json&nojsoncallback=1&api_key=" + FLICKR_API_KEY + "&bbox=" + bbox + "&extras=geo,date_upload,date_taken,url_q,description,owner_name";
    urlFlickr += "&page=" + ++flickrPage;
    $.getJSON(urlFlickr, callbackFlickr).error(function(error) {
        picloading.innerHTML = '<div style="color:red">ERROR!</div>';
    });
    var latlng = document.getElementById("kmlmarker").innerText.split(",");
    var mainloc = {
        lat: parseFloat(latlng[0]),
        lng: parseFloat(latlng[1])
    };
    function callbackFlickr(results) {
        if (results && results.stat === "ok") {
            var list = [];
            for (var i = 0; i < results.photos.photo.length; i++) {
                var photo = results.photos.photo[i];
                var linkUrl = "https://www.flickr.com/photos/" + photo.owner + "/" + photo.id;
                var loc = {
                    lat: parseFloat(photo.latitude),
                    lng: parseFloat(photo.longitude)
                };
                var dist = Math.round(distance(loc, mainloc) * 10) / 10;
                var date = photo.datetakenunknown === "0" ? photo.datetaken.substring(0, 10) : new Date(Number(photo.dateupload) * 1e3).toISOString().substring(0, 10);
                var entry = {
                    id: linkUrl,
                    loc: loc,
                    owner: photo.ownername,
                    thumb: photo.url_q,
                    date: date,
                    title: photo.title,
                    dist: dist,
                    text: photo.description._content,
                    icon: piciconlist["Flickr.com"]
                };
                list.push(entry);
            }
            loadPictureList(list);
            var pages = results.photos.pages;
            var loadMore = document.getElementById("loadmorepic");
            if (flickrPage < pages) {
                if (!loadMore) {
                    loadMore = document.createElement("div");
                    loadMore.id = "loadmorepic";
                    picloading.parentNode.insertBefore(loadMore, picloading.nextSibling);
                }
                loadMore.innerHTML = "<br>Loaded " + flickrPage + " of " + pages + ' pages&nbsp;<input type="button" value="Load more" title="Load more photos" onclick="runFlickrSearch()" class="userlistbutton showmore"></td>';
            } else {
                if (!!loadMore) loadMore.outerHTML = "";
                flickrPage = 0;
            }
        }
    }
}

function loadPictureList(list) {
    var poilist = [];
    var i;
    for (i = 0; i < list.length; ++i) {
        var entry = list[i];
        if (markerAlreadyExists(entry.id)) continue;
        var content = '<div class="thumbinner" style="width:154px">' + '<a href="' + entry.id + '" target="_blank">' + '<img src="' + entry.thumb + '" class="nearestpics-thumb">' + "</a>" + '<div class="thumbcaption">' + "<div>" + pinicon(entry.id, entry.icon) + " <b>" + entry.title + "</b></div>" + "<div>" + entry.text + "</div>" + "<div><b>" + entry.date + " ~" + entry.dist + "mi</b></div>" + "<div>" + entry.owner + "</div>" + "</div>" + "</div>";
        poilist.push({
            id: entry.id,
            location: entry.loc,
            zindex: 0 - i,
            icon: {
                url: entry.icon,
                scaledSize: new google.maps.Size(16, 16),
                anchor: new google.maps.Point(8, 23)
            },
            thumbnail: entry.thumb,
            description: "",
            infodescription: "<b>" + entry.title + "</b><br>" + entry.text,
            infocontent: content,
            owner: entry.owner,
            date: entry.date,
            dist: entry.dist,
            title: entry.title,
            text: entry.text
        });
    }
    if (map != null) loadlist(poilist);
    updatePictureGrid();
}

function updatePictureGrid() {
    picloading.innerHTML = markers.length + " picture" + (markers.length !== 1 ? "s" : "") + " loaded";
    piclist.innerHTML = "";
    if (document.getElementById("sortdist").checked) markers.sort(predicateBy("dist", 1));
    if (document.getElementById("sortdate").checked) markers.sort(predicateBy("date", -1));
    for (var i = 0; i < markers.length; ++i) {
        var entry = markers[i].locationData;
        var node = document.createElement("LI");
        node.className = "gallerybox nearestpics";
        node.innerHTML = entry.infocontent;
        piclist.appendChild(node);
    }
}

function locsearch() {
    var locnameval = document.getElementById("locnameval");
    if (locnameval != null && deftext(locnameval.value)) return;
    var url = window.location.href;
    url = url.split("#")[0].split("?")[0];
    var param = "", i;
    var optionschks = document.getElementsByClassName("optionschk");
    if (optionschks != null) for (i = 0; i < optionschks.length; i++) if (optionschks[i].checked) param = addUrlParam(param, optionschks[i].id, "on");
    var mid, list, l;
    var filterschk = document.getElementById("filterschk");
    if (filterschk != null && filterschk.checked) {
        var chk = document.getElementsByClassName("filterchk");
        for (i = 0; i < chk.length; i++) {
            mid = chk[i].id + "_chk";
            list = document.getElementsByClassName(mid);
            var attr = [];
            for (l = 0; l < list.length; l++) if (list[l].checked) attr.push(list[l].id.substring(list[l].id.lastIndexOf("_") + 1));
            param = addUrlParam(param, chk[i].id, attr.join());
        }
    }
    var locsearchchk = document.getElementById("locsearchchk");
    if (typeof linkurl == "undefined") if (locsearchchk != null && locsearchchk.checked) {
        var locnameval = document.getElementById("locnameval").value;
        if (!deftext(locnameval)) {
            var locdistval = document.getElementById("locdistval").value;
            if (deftext(locdistval)) locdistval = "30mi";
            url = SITE_BASE_URL + "/Location";
            param = addUrlParam(param, "locname", urlencode(locnameval));
            if (!deftext(locdistval)) param = addUrlParam(param, "locdist", urlencode(locdistval));
        }
    }
    var optionsurl = document.getElementsByClassName("optionsurl");
    if (optionsurl != null) for (i = 0; i < optionsurl.length; i++) {
        var val = optionsurl[i].innerHTML;
        if (val.length > 0) param = addUrlParam(param, optionsurl[i].id, val);
    }
    if (sortby) param = addUrlParam(param, "sortby", sortby);
    if (param !== "") url += "?jform" + param;
    var buttons = document.getElementsByClassName("submitoff");
    for (i = 0; i < buttons.length; i++) buttons[i].disabled = true;
    document.body.style.cursor = "wait";
    window.location.href = url;
    function addUrlParam(param, id, val) {
        var pid = "&" + id + "=";
        var i = param.indexOf(pid);
        if (i < 0) param += pid + val; else {
            var a = param.substr(0, i);
            var b = param.substr(i + pid.length);
            param = a + pid + val;
            if (b !== val) {
                if (b.length > 0 && b[0] !== "&") param += ",";
                param += b;
            }
        }
        return param;
    }
}

function loadSkin() {
    var toption = document.getElementsByClassName("toption");
    for (var i = 0; i < toption.length; ++i) toption[i].style.display = "block";
    var skinconfig = urldecode(getCookie("skinconfig"));
    var elem = document.getElementById("skinconfig");
    if (elem != null) {
        skinconfig = urldecode(elem.innerHTML);
        setCookie("skinconfig", urlencode(skinconfig));
    }
    if (skinconfig != "") {
        var str = skinconfig.split(",");
        skinuser = str[0];
        if ((elem = document.getElementById("skinuser")) != null) if (elem.innerHTML == "" && skinuser != "") {
            var str = window.location.href;
            if (str.indexOf("?") >= 0) str += "&"; else str += "?";
            document.body.style.display = "none";
            window.location.href = str + "skinuser=" + skinuser;
        }
        if (str.length > 1 && str[1] != "") {
            if ((elem = document.body) != null) {
                elem.style.backgroundColor = str[1];
            }
            if ((elem = document.getElementById("mw-page-base")) != null) {
                elem.style.backgroundColor = str[1];
                elem.style.backgroundImage = "none";
            }
        }
        if (str.length > 2 && str[2] != "") {
            var str2 = str[2].split("|");
            if ((elem = document.getElementById("p-logo")) != null) elem.innerHTML = '<a href="' + str2[0] + '"><img src="' + str2[1] + '"/></a>';
        }
        for (var n = 3; n < str.length; ++n) {
            var navdiv = "";
            var str2 = str[n].split("*");
            var base = str2[0].split("|");
            for (var i = 1; i < str2.length; ++i) {
                var line = str2[i].split("|");
                navdiv += '<li id="n-' + i + '"><a href="' + line[0] + '">' + line[1] + "</a></li>";
            }
            if ((elem = document.getElementById(base[0])) != null) if (navdiv != "") elem.innerHTML = "<h3>" + base[1] + '</h3><div class="body"><ul>' + navdiv + "</ul></div>"; else elem.innerHTML = "";
        }
    }
}

var userStarRatingsLoaded = false;

function LoadStarRatings() {
    if (!userStarRatingsLoaded) {
        userStarRatingsLoaded = true;
        var user;
        if (isUserStarRatingsTable()) user = starRatingsUser; else {
            if (!!currentUser) user = currentUser;
        }
        if (user) {
            $.getJSON(geturl(SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Has page rating::+]][[Has page rating user::" + user + "]]") + "|?Has_page_rating|mainlabel=-" + "|limit=" + 2e3), function(data) {
                setUserStarRatings(data);
            });
        }
    }
}

function getStarFraction(num) {
    if (num >= .875) return 4; else if (num >= .625) return 3; else if (num >= .375) return 2; else if (num >= .125) return 1; else return 0;
}

var starRatingsUser, isUserStarRatingsTableVar;

function isUserStarRatingsTable() {
    if (isUserStarRatingsTableVar === undefined) {
        var url = new URL(window.location.href.toString());
        starRatingsUser = url.searchParams.get("onlyuser");
        if (starRatingsUser) {
            isUserStarRatingsTableVar = true;
            starrate = true;
        } else isUserStarRatingsTableVar = false;
    }
    return isUserStarRatingsTableVar;
}

function getStars(num, numRatings, size, includeNumRatings) {
    var line = '<span class="tablestars">';
    if (!includeNumRatings) line += "&nbsp;";
    for (var i = 0; i < 5; ++i) {
        line += '<img width="' + size + 'px" height="' + size + 'px" src="' + STARLIST[getStarFraction(num)] + '"/>';
        num -= 1;
    }
    if (includeNumRatings && numRatings > 0) line += '<span class="starsub">' + numRatings + "</span>";
    line += "</span>";
    return line;
}

function getStarsVote(num, unum, ratings) {
    var line = '<span class="tablestars starRate">';
    var text = [ "Delete", "Not worth doing", "Worthwhile", "Ok", "Great", "Among the best" ];
    var i;
    if (!currentUser) for (i = 0; i <= 5; ++i) text[i] = "Log in to rate";
    for (i = 1; i <= 5; ++i) {
        line += '<b id="' + i + '" class="starRate' + getStarFraction(num) + '" style="cursor:pointer" onclick="starVote(this)"><span class="starText starvText">' + text[i] + "</span></b>";
        num -= 1;
    }
    if (unum > 0) line += '<b id="0" class="starx starsub" style="color:red;cursor:pointer;" onclick="starVote(this)">X<span class="starText starvText">' + text[0] + "</span></b>"; else if (ratings > 0) line += '<span class="starsub">' + ratings + "</span>";
    line += "</span>";
    return line;
}

function getStarsId(elem) {
    var tr = elem.parentNode;
    while (tr != null && tr.nodeName !== "TR") tr = tr.parentNode;
    if (tr == null) return null;
    var link = tr.getElementsByTagName("A");
    if (link && link[0]) return link[0].innerHTML;
    return null;
}

function starVote(elem) {
    var stars = elem.id;
    var id = getStarsId(elem);
    if (stars && id && !!currentUser) {
        var user = currentUser;
        var fr = document.createElement("IFRAME");
        var target = "Votes:" + id + "/" + user;
        if (stars === "0") {
            stars = "";
            user = "";
        }
        fr.src = SITE_BASE_URL + "/api.php?action=sfautoedit&form=Page_rating&target=" + target + "&query=Page_rating[Page]=" + id + "%26Page_rating[Rating]=" + stars + "%26Page_rating[User]=" + user;
        fr.style.display = "none";
        document.body.appendChild(fr);
        var parent = elem.parentNode;
        while (parent != null && parent.className.indexOf("starv") < 0) parent = parent.parentNode;
        if (parent) {
            parent.innerHTML = getStarsVote(stars, stars, -1, 16);
            parent.className = "starv votedrow";
        }
        var marker = markers.filter(function(x) {
            return x.name === id;
        })[0];
        if (marker != undefined) marker.locationData.userStars = stars;
        updateTable();
    }
}

var userStarRatings = [];

function setUserStarRatings(data) {
    $.each(data.query.results, function(pagename, item) {
        var startIndex = pagename.indexOf(":");
        var endIndex = pagename.indexOf("/");
        if (startIndex < 0 || endIndex < 0) return;
        var name = pagename.substring(startIndex + 1, endIndex);
        var stars = item.printouts["Has page rating"][0];
        var newRating = {
            name: name,
            stars: stars
        };
        var index = userStarRatings.findIndex(function(x) {
            return x.location === name;
        });
        index === -1 ? userStarRatings.push(newRating) : userStarRatings[index] = newRating;
        var marker = markers.filter(function(x) {
            return x.name === name;
        })[0];
        if (marker != undefined) marker.locationData.userStars = stars;
    });
    updateTable();
}

function getUserStarDisplay(location, stars, ustars, numRatings, size) {
    if (starrate && (!isUserStarRatingsTable() || isUserStarRatingsTable() && !!currentUser && starRatingsUser === currentUser)) {
        return getUsersStarswithVotingDisplay(stars, ustars, numRatings);
    } else {
        return getGeneralStarsDisplay(location, stars, ustars, numRatings, size);
    }
}

function getUsersStarswithVotingDisplay(stars, ustars, numRatings) {
    if (!stars) stars = 0;
    if (!ustars) ustars = 0; else stars = ustars;
    if (!numRatings) numRatings = 0;
    var starDisplay = {}, i;
    var line = '<span class="starRate" style="white-space: nowrap;">';
    var text = [ "Delete", "Not worth doing", "Worthwhile", "Ok", "Great", "Among the best" ];
    if (!currentUser) for (i = 0; i <= 5; ++i) text[i] = "Log in to rate";
    for (i = 1; i <= 5; ++i) {
        line += '<b id="' + i + '" class="starRate' + getStarFraction(stars) + '" style="cursor:pointer" onclick="starVote(this)"><span class="starText starvText">' + text[i] + "</span></b>";
        stars -= 1;
    }
    if (ustars > 0) line += '<b id="0" class="starx starsub" style="color:red;cursor:pointer;" onclick="starVote(this)">X<span class="starText starvText">' + text[0] + "</span></b>"; else if (numRatings > 0) line += '<span class="starsub">' + numRatings + "</span>";
    line += "</span>";
    starDisplay.title = "";
    starDisplay.innerHTML = line;
    starDisplay.className = "starv";
    if (ustars > 0) starDisplay.className += " votedrow";
    return starDisplay;
}

function getGeneralStarsDisplay(location, stars, ustars, numRatings, size) {
    if (!stars) stars = 0;
    if (!ustars) ustars = 0;
    if (!numRatings) numRatings = 0;
    if (!size) size = 16;
    var starDisplay = {};
    var showUsersRatings = isUserStarRatingsTable() && starrate && ustars > 0;
    if (showUsersRatings) stars = ustars;
    var starsHTML = getStars(stars, numRatings, size, !showUsersRatings);
    if (!showUsersRatings) starsHTML = '<a href="' + SITE_BASE_URL + "/List_ratings?location=" + location + '">' + starsHTML + "</a>";
    starDisplay.innerHTML = starsHTML;
    starDisplay.title = !showUsersRatings ? stars.toFixed(1) + "*" + (numRatings <= 0 ? "" : " (" + numRatings + " ratings)") : "They rated this " + stars.toFixed(0) + " stars";
    starDisplay.className = "starv";
    if (ustars > 0) starDisplay.className += " votedsub";
    if (showUsersRatings) starDisplay.className += " votedrow";
    return starDisplay;
}

var conditionReportsUser, isUserConditionReportsTableVar;

function isUserConditionReportsTable() {
    if (isUserConditionReportsTableVar === undefined) {
        var url = new URL(window.location.href.toString());
        conditionReportsUser = url.searchParams.get("onlycuser");
        if (conditionReportsUser) {
            isUserConditionReportsTableVar = true;
        } else isUserConditionReportsTableVar = false;
    }
    return isUserConditionReportsTableVar;
}

function getLocationParameters(loadLimit) {
    const locationParamters = "|%3FHas_coordinates" + "|%3FHas_summary" + "|%3FHas_banner_image_file" + "|%3FHas_location_class" + "|%3FHas_KML_file" + "|%3FRequires_permits" + "|%3FHas_info_regions" + "|%3FHas_info_major_region" + "|%3FHas_rank_rating" + "|%3FHas_total_rating" + "|%3FHas_total_counter" + "|%3FHas_info_typical_time" + "|%3FHas_length_of_hike" + "|%3FHas_length" + "|%3FHas_depth" + "|%3FHas_info_rappels" + "|%3FHas_longest_rappel" + "|%3FHas_info" + "|%3FHas_condition_summary" + "|%3FHas_vehicle_type" + "|%3FHas_shuttle_length" + "|%3FHas_best_season_parsed" + "|%3FHas_pageid" + "|limit=" + loadLimit;
    return locationParamters;
}

function filterMarkers(refreshTable) {
    if (typeof refreshTable === "undefined") refreshTable = true;
    var filters = {};
    var mid, list, l, i;
    var filterschk = document.getElementById("filterschk");
    if (filterschk != null && filterschk.checked) {
        var chk = document.getElementsByClassName("filterchk");
        for (i = 0; i < chk.length; i++) {
            var attr = [];
            mid = chk[i].id;
            list = document.getElementsByClassName(mid + "_chk");
            var isDisabled = list[0].disabled;
            if (!isDisabled) {
                for (l = 0; l < list.length; l++) if (list[l].checked) {
                    var value = list[l].id.substring(list[l].id.lastIndexOf("-") + 1);
                    attr.push(value);
                }
            }
            filters[mid] = attr;
        }
    }
    for (i = 0; i < markers.length; ++i) {
        var marker = markers[i];
        var p = marker.locationData;
        if (!p) continue;
        var display = true;
        runFilter: {
            if (!filters || Object.keys(filters).length === 0) break runFilter;
            var stars = filters["star"];
            if (!!stars && stars.length > 0 && !stars.includes(p.stars.toString())) display = false;
            var activityTypes = filters["loctype"];
            if (!!activityTypes && activityTypes.length > 0 && !activityTypes.includes(p.activity)) display = false;
            var permits = filters["permits"];
            if (!!permits && permits.length > 0 && !permits.includes(p.permits)) display = false;
            var shuttle = filters["shuttle"];
            if (!!shuttle && shuttle.length > 0) {
                if (!(shuttle.includes("No Shuttle") && shuttle.includes("Shuttle"))) {
                    if (shuttle.includes("No Shuttle") && (p.shuttleLength != undefined && (p.shuttleLength.value > 0 && p.shuttleLength.value !== .5))) display = false;
                    if (shuttle.includes("Shuttle") && (p.shuttleLength == undefined || p.shuttleLength.value === 0)) display = false;
                }
            }
            var vehicle = filters["vehicle"];
            if (!!vehicle && vehicle.length > 0) {
                if (!(vehicle.includes("2wd") && vehicle.includes("4wd"))) {
                    if (vehicle.includes("2wd") && (p.vehicleType != undefined && p.vehicleType !== "Passenger")) display = false;
                    if (vehicle.includes("4wd") && (p.vehicleType == undefined || p.vehicleType === "Passenger")) display = false;
                }
            }
            var bestSeason = filters["best_month"];
            if (!!bestSeason && bestSeason.length > 0) {
                if (!!p.bestMonths) {
                    var monthMatched = false;
                    for (var j = 0; j < bestSeason.length; ++j) {
                        if (p.bestMonths.includes(bestSeason[j])) {
                            monthMatched = true;
                            break;
                        }
                    }
                    if (!monthMatched) display = false;
                } else {
                    display = false;
                }
            }
            var technical = filters["technical"];
            if (!!technical && technical.length > 0 && !technical.includes(p.technicalRating.technical)) display = false;
            var water = filters["water"];
            if (!!water && water.length > 0 && !water.includes(p.technicalRating.water)) display = false;
            var time = filters["time"];
            if (!!time && time.length > 0 && !time.includes(p.technicalRating.time)) display = false;
            var extraRisk = filters["extra_risk"];
            if (!!extraRisk && extraRisk.length > 0) if (!extraRisk.includes(p.technicalRating.risk) && !(extraRisk.includes("n/a") && !p.technicalRating.risk)) display = false;
            var vertical = filters["vertical"];
            if (!!vertical && vertical.length > 0 && !vertical.includes(p.technicalRating.vertical)) display = false;
            var aquatic = filters["aquatic"];
            if (!!aquatic && aquatic.length > 0 && !aquatic.includes(p.technicalRating.aquatic)) display = false;
            var commitment = filters["commitment"];
            if (!!commitment && commitment.length > 0 && !commitment.includes(p.technicalRating.commitment)) display = false;
        }
        marker.isVisible = display;
        marker.setMap(display ? map : null);
        if (marker.closedMarker) marker.closedMarker.setMap(display ? map : null);
        if (marker.highlight) marker.highlight.setMap(display ? map : null);
    }
    if (refreshTable) updateTable();
}

function removeMarker(id) {
    var index = markers.map(function(marker) {
        return marker.locationData.id;
    }).indexOf(id);
    if (index >= 0) {
        var marker = markers[index];
        clearMarker(marker);
        markers.splice(index, 1);
        locationsTotalWithinArea--;
        searchWasRun = true;
        setLoadingInfoText();
        updateTable();
        updateUrlWithVisibleLocations();
    }
}

function clearMarker(marker) {
    if (marker.closedMarker) {
        marker.closedMarker.setMap(null);
        marker.closedMarker = null;
    }
    if (marker.highlight) {
        marker.highlight.setMap(null);
        marker.highlight = null;
    }
    marker.setMap(null);
    marker = null;
}

var maxTableRows = 100;

function updateTable() {
    var tableCurrentBody = document.getElementById("loctablebody");
    if (!tableCurrentBody) return;
    setTableHeaderSortIcons();
    markers.sort(predicateBy(sortProp, sortDirection));
    var numDisplayed = 0;
    var tableNewBody = document.createElement("tbody");
    tableNewBody.id = "loctablebody";
    for (var i = 0; i < markers.length; ++i) {
        var marker = markers[i];
        if (!marker.isVisible) continue;
        var html = assembleTableRow(marker.locationData);
        var newRow = tableNewBody.insertRow(tableNewBody.rows.length);
        newRow.className = "trow notranslate";
        newRow.innerHTML = html;
        newRow.pageid = marker.locationData.pageid;
        numDisplayed++;
        if (numDisplayed >= maxTableRows) {
            var totalRows = countLocationsVisibleOnMap();
            if (totalRows > maxTableRows) {
                newRow = tableNewBody.insertRow(tableNewBody.rows.length);
                var innerHTML = '<td colspan="9">&nbsp;&nbsp;Displaying ' + maxTableRows + " of " + totalRows + " rows";
                innerHTML += '&nbsp;<input type="button" value="Show all" title="Show all table rows" onclick="showAllTableRows()" class="userlistbutton showmore"></td>';
                newRow.innerHTML = innerHTML;
            }
            break;
        }
    }
    if (!currentUser && !isUserStarRatingsTable()) $("div#starrate")[0].style.display = "none";
    tableCurrentBody.parentNode.replaceChild(tableNewBody, tableCurrentBody);
    var myRatingsCheckbox = document.getElementsByClassName("schk");
    myRatingsCheckbox[0].firstChild.firstChild.checked = starrate;
    var frenchCheckbox = document.getElementsByClassName("fchk");
    frenchCheckbox[0].firstChild.firstChild.checked = french;
    var metricCheckbox = document.getElementsByClassName("uchk");
    metricCheckbox[0].firstChild.firstChild.checked = metric;
    updateRatingHighlights();
    setLoadingInfoText();
    scrollTableFirstRowToTop();
}

function showAllTableRows() {
    maxTableRows = 99999;
    updateTable();
}

var sortby = "";

function setTableSortLinks() {
    var tableDiv = document.getElementById("loctable");
    if (!tableDiv) return;
    var tableRef = document.getElementById("loctabledata");
    if (!tableRef) {
        tableRef = document.createElement("table");
        tableRef.id = "loctabledata";
        tableRef.className = "wikitable loctabledata colgroup";
        tableDiv.appendChild(tableRef);
        setTableSortProperty(!isUserListTable() ? "rankRating" : "userDate");
    }
    var tableNewHeader = document.createElement("thead");
    var headerRow = tableNewHeader.insertRow();
    headerRow.innerHTML = assembleTableHeaderRow();
    var tableNewBody = document.createElement("tbody");
    tableNewBody.id = "loctablebody";
    while (tableRef.firstChild) {
        tableRef.removeChild(tableRef.firstChild);
    }
    tableRef.appendChild(tableNewHeader);
    tableRef.appendChild(tableNewBody);
    var sortIcons = document.getElementsByClassName("rwSortIcon");
    for (var i = 0; i < sortIcons.length; i++) {
        sortIcons[i].className += " notranslate";
        sortIcons[i].onclick = function() {
            setTableSortProperty(this.id.substr(5));
        };
    }
}

function setTableSortProperty(newSortProp) {
    if (newSortProp === "technicalRating") {
        newSortProp += !french ? ".combinedACA" : ".combinedFrench";
    }
    if (newSortProp === sortProp) {
        sortDirection *= -1;
    } else {
        var newSortDirection = 1;
        if (newSortProp === "rankRating" || newSortProp === "totalRating" || newSortProp === "totalCounter" || newSortProp === "conditionDate") newSortDirection = -1;
        if (!newSortProp.includes("technicalRating") || !sortProp.includes("technicalRating")) sortDirection = newSortDirection;
        sortProp = newSortProp;
    }
    updateTable();
}

function setTableHeaderSortIcons() {
    var iconId = !sortProp.includes("technicalRating") ? sortProp : "technicalRating";
    var sortIconId = "sort-" + iconId;
    var sortIcons = document.getElementsByClassName("rwSortIcon");
    for (var i = 0; i < sortIcons.length; i++) {
        var sortIcon = sortIcons[i];
        if (sortIcon.id === sortIconId) {
            sortIcon.style.backgroundImage = "url('" + (sortDirection > 0 ? SORT_ICON_UP : SORT_ICON_DOWN) + "')";
            sortIcon.style.opacity = "1.0";
        } else {
            sortIcon.style.backgroundImage = "url('" + SORT_ICON + "')";
            sortIcon.style.opacity = "";
        }
    }
}

function setOptionCheckboxes() {
    var chks = document.getElementsByClassName("optionchk");
    for (var i = 0; i < chks.length; i++) {
        var id = chks[i].id + "chk";
        var checked = getCookie(id) !== "";
        chks[i].innerHTML = '<label style="white-space: nowrap;"><input id="' + id + '" class="optionschk submitoff" type="checkbox" onclick="toggle' + id + "(" + "'" + id + "'" + ')" ' + (checked ? "checked" : "") + ">" + chks[i].innerHTML + "</label>";
        toggleOption(id, checked);
    }
}

function setFilterCheckboxes() {
    var url = window.location.href.toString();
    var i, id;
    var chks = document.getElementsByClassName("filterchk");
    for (i = 0; i < chks.length; i++) {
        var mid = chks[i].id + "_chk";
        var list = chks[i].innerHTML.split(",");
        var icons = document.getElementById(chks[i].id + "icons");
        var str = "";
        var param = urlget(url, chks[i].id + "=", "").split(",");
        for (var l = 0; l < list.length; ++l) {
            id = mid + "-" + list[l];
            var checked = getCookie(id) !== "";
            if (param.length > 0 && param[0] !== "") checked = param.indexOf(list[l]) >= 0;
            var title, text;
            if (icons) {
                title = icons.childNodes[l].title;
                text = icons.childNodes[l].innerHTML;
            } else {
                title = list[l];
                text = list[l];
            }
            str += " " + '<label title="' + title + '" onclick="toggleDisabledChk(' + "'" + id + "'" + ')"><input id="' + id + '" class="' + mid + '" style="" type="checkbox" ' + (checked ? "checked" : "") + ' onclick="filterClicked(this)"/>' + text + "</label>";
        }
        chks[i].innerHTML = str;
        toggleDisabledChk(mid);
    }
    chks = document.getElementsByClassName("filterchk-technical");
    for (i = 0; i < chks.length; i++) {
        id = chks[i].id;
        chks[i].outerHTML = "<span id=" + "'" + id + "'" + ' class="filterchk-technical" style="cursor:pointer;" onclick="toggleDisplayTechnicalFilters(' + "'" + id + "'" + ')">&#9660;</span>';
    }
}

var sortProp = "";

var sortDirection = 1;

function predicateBy(propString, direction) {
    return function(a, b) {
        function getTestValue(item) {
            if (!item.locationData) return undefined;
            var entry = item.locationData;
            var prop, props = propString.split(".");
            var i, candidate;
            for (i = 0; i < props.length; i++) {
                prop = props[i];
                candidate = entry[prop];
                if (candidate !== undefined) {
                    entry = candidate;
                } else {
                    break;
                }
            }
            if (candidate === undefined || candidate == null) return undefined;
            if (candidate.value !== undefined) candidate = candidate.value;
            return candidate;
        }
        var aEntry = getTestValue(a);
        var bEntry = getTestValue(b);
        if (aEntry == undefined) return 1;
        if (bEntry == undefined) return -1;
        if (aEntry > bEntry) {
            return 1 * direction;
        } else if (aEntry < bEntry) {
            return -1 * direction;
        }
        return 0;
    };
}

function scrollTableFirstRowToTop() {
    var rows = document.getElementById("loctabledata").rows;
    if (!!rows && rows.length > 1) {
        var firstRow = rows[0];
        var rect = firstRow.getBoundingClientRect();
        if (rect.top < 0) {
            var offsetPosition = rect.top + window.pageYOffset - 22;
            window.scrollTo({
                top: offsetPosition,
                behavior: "instant"
            });
        }
    }
}

function assembleTableHeaderRow() {
    var header = !isUserListTable() ? getStandardTableHeaderRow() : getUserListTableHeaderRow();
    return "<tr>" + header + "</tr>";
}

function assembleTableRow(item) {
    var row = !isUserListTable() ? getStandardTableRow(item) : getUserListTableRow(item);
    return '<tr class="trow notranslate">' + row + "</tr>";
}

function getStandardTableHeaderRow() {
    var showingMyRatings = !isUserStarRatingsTable() || starRatingsUser === currentUser;
    const Header = '<th class="rwHdr">' + '<div class="gmnoprint toption locateicon">â†“ Click on icon to locate on map</div>' + '<span class="rwText">Location Name</span>' + '<span id="sort-id" title="Sort by name of location" class="rwSortIcon gmnoprint notranslate"></span>' + '<span id="sort-region" title="Sort by name of region" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>" + '<th class="rwHdr">' + '<div id="starrate" class="schk gmnoprint toption notranslate" title="Show star ratings ' + (showingMyRatings ? "you" : "they") + ' have given"><label><input class="gmnoprint" type="checkbox" onclick="toggleStarrate()">' + (showingMyRatings ? "My" : "Their") + " ratings</label></div>" + '<span id="sort-rankRating" title="Sort by combined Quality & Popularity formula" class="rwSortIcon gmnoprint notranslate"></span>' + '<span class="rwText"><a href="/StarRank" title="Star ratings">Quality</a></span>' + '<span id="sort-totalRating" title="Sort by raw user rating" class="rwSortIcon gmnoprint notranslate"></span>' + '<span id="sort-totalCounter" title="Sort by number of ratings" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>" + '<th class="rwHdr">' + '<div class="fchk gmnoprint toption notranslate" title="Use French grading system"><label><input class="gmnoprint" type="checkbox" onclick="toggleFrench()">French</label></div>' + '<span class="rwText"><a href="/Rating" title="Difficulty rating">Difficulty</a></span>' + '<span id="sort-technicalRating" title="Sort by technical difficulty" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>" + '<th class="rwHdr">' + '<div class="uchk gmnoprint toption notranslate" title="Show metric units"><label><input class="gmnoprint" type="checkbox" onclick="toggleMetric()">Metric</label></div>' + '<span class="rwText ctranslate">Raps</span>' + '<span id="sort-rappelsNum" title="Sort by number of rappels" class="rwSortIcon gmnoprint notranslate"></span>' + '<span id="sort-longestRappel" title="Sort by highest rappel" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>" + '<th class="rwHdr">' + '<span class="rwText ctranslate">Overall</span>' + '<span id="sort-averageTime" title="Sort by overall time" class="rwSortIcon gmnoprint notranslate"></span>' + '<span id="sort-hikeLength" title="Sort by overall length" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>" + '<th class="rwHdr">' + '<span class="rwTextNoSort"><a href="/Extra_info" title="Extra info">Info</a></span>' + "</th>" + '<th class="rwHdr">' + '<span class="rwText"><a href="/Conditions_info" title="Conditions info">Conditions</a></span>' + '<span id="sort-conditionDate" title="Sort by date of condition report" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>";
    return Header;
}

function getStandardTableRow(item) {
    const Location = "<td><table><tbody>" + "<tr>" + '<td rowspan="2" class="pinmap" id="[LocationNameFull]"><img src="[Star Icon png]" id="[LocationNameFull]" class="pinicon" title="Show location on map" style="cursor:pointer;vertical-align:middle" onclick="centerMapOnMarkerById(this.id)"></td>' + '<td class="loc">[PermitStatusIcon]<a href="[LocationNameLink]" title="[LocationName]" target="_blank">[LocationName]</a></td>' + "</tr>" + "<tr>" + '<td class="reg"><strong>[RegionLink]</strong> [ParentRegionLinks]</td>' + "</tr>" + "</tbody></table></td>";
    const Stars = '<td class="[StarsClassname]" title="[StarsTitle]">[StarsIcons]</td >';
    const TechnicalRating = '<td class="uaca">[Technical Rating]</td>';
    const Raps = '<td class="urap">[Rap display]</td>';
    const Overall = "<td>[Overall display]</td>";
    const Info = '<td class="itable">[InfoSummary]</td>';
    const Conditions = '<td class="ctable">[ConditionsSummary]</td>';
    var location = Location.replace(/\[LocationName]/g, !!item.nameWithoutRegion ? item.nameWithoutRegion : item.id).replace(/\[LocationNameFull]/g, item.id).replace(/\[LocationNameLink]/g, linkify(item.id)).replace(/\[Star Icon png]/, item.icon).replace(/\[PermitStatusIcon]/, getTablePermitStatusIcon(item.permits)).replace(/\[RegionLink]/g, getTableRegionLink(item)).replace(/\[ParentRegionLinks]/, getTableParentRegionLinks(item.parentRegions));
    var starDisplay = getUserStarDisplay(item.id, item.totalRating, item.userStars, item.totalCounter, 16);
    var quality = Stars.replace(/\[StarsTitle]/, starDisplay.title).replace(/\[StarsIcons]/, starDisplay.innerHTML).replace(/\[StarsClassname]/, starDisplay.className);
    var technicalRating = TechnicalRating.replace(/\[Technical Rating]/, getTableTechnicalRating(item.technicalRating));
    var raps = Raps.replace(/\[Rap display]/, getTableRaps(item.rappels, item.longestRappel));
    var overall = Overall.replace(/\[Overall display]/, getOverallDisplay(item.typicalTime, item.hikeLength));
    var info = Info.replace(/\[InfoSummary]/, getTableInfoSummaryDisplay(item.infoSummary));
    var conditions = Conditions.replace(/\[ConditionsSummary]/, getTableConditionDisplay(item.conditionSummary));
    var html = location + quality + technicalRating + raps + overall + info + conditions;
    return html;
}

function addNewItemsToTable(rwresults) {
    var tableCurrentBody = document.getElementById("loctablebody");
    if (!tableCurrentBody) return;
    for (var i = 0; i < rwresults.length; ++i) {
        var item = rwresults[i];
        var html = assembleTableRow(item);
        var newRow = tableCurrentBody.insertRow(tableCurrentBody.rows.length);
        newRow.className = "trow notranslate";
        newRow.innerHTML = html;
        newRow.pageid = item.pageid;
    }
    filterMarkers();
}

function getTablePermitStatusIcon(permitStatus) {
    var img = "";
    if (!!permitStatus) {
        var iconUrl = "", tooltipText = "";
        switch (permitStatus) {
          case "Yes":
            iconUrl = ICON_PERMIT_YES;
            tooltipText = "Permit required";
            break;

          case "Restricted":
            iconUrl = ICON_RESTRICTED;
            tooltipText = "Access is restricted";
            break;

          case "Closed":
            iconUrl = ICON_CLOSED;
            tooltipText = "Closed to entry";
            break;
        }
        if (iconUrl !== "") img = '<img src="' + iconUrl + '" class="permiticon" title="' + tooltipText + '">';
    }
    return img;
}

function getTableRegionLink(item) {
    if (!item.region) return "no region specified";
    if (item.noregionlink) return item.region;
    var regionDisplayName = item.regionWithoutParents;
    if (regionDisplayName === "Western Juan Castro Blanco Parque Nacional") regionDisplayName = "Western JCP NP";
    return '<a href="/[RegionLink]" title="[RegionFull]">[Region]</a>'.replace(/\[Region]/g, regionDisplayName).replace(/\[RegionFull]/g, item.region).replace(/\[RegionLink]/, linkify(item.region));
}

function getTableParentRegionLinks(regions) {
    if (!regions || regions.length === 0) return "";
    const ParentRegionLink = '<a href="/[ParentRegionLink]" title="[ParentRegion]">[ParentRegion]</a>';
    var parentRegionLinks = [];
    for (var i = 0; i < regions.length; ++i) {
        var parentRegionDisplayName = regions[i];
        parentRegionDisplayName = parentRegionDisplayName.replace("National Park", "NP");
        var link = ParentRegionLink.replace(/\[ParentRegion]/g, parentRegionDisplayName).replace(/\[ParentRegionLink]/, linkify(regions[i]));
        parentRegionLinks.push(link);
    }
    return "(" + parentRegionLinks.join("/") + ")";
}

function getTableTechnicalRating(rating) {
    var tableRatingDisplay = "";
    if (!rating) return tableRatingDisplay;
    var tableRating = !french ? rating.combinedACA : rating.combinedFrench;
    if (tableRating !== undefined) {
        var italicize = !french && rating.convertedACA || french && rating.convertedFrench;
        if (italicize) tableRating = "<i>" + tableRating + "</i>";
        tableRatingDisplay = tableRating;
    }
    return tableRatingDisplay;
}

function getTableRaps(rapSummary, longestRap) {
    var hasSummary = !!rapSummary;
    var hasLongest = !!longestRap;
    var rapSummaryDisplay = '<span class="tablestat rap-num">' + (hasSummary ? rapSummary : "") + (hasSummary && hasLongest ? "," : "&nbsp;") + "</span>";
    var longestRapDisplay = '<span class="tablestat rap-longest uft">' + (hasLongest ? "â†¨" + getTableValueUnit(longestRap) : "&nbsp;") + "</span>";
    return '<div class="tablestat dual-stat">' + rapSummaryDisplay + longestRapDisplay + "</div>";
}

function getOverallDisplay(time, length) {
    var hasTime = !!time;
    var hasLength = !!length;
    var timeDisplay = '<span class="tablestat overall-time utime">' + (hasTime ? time : "") + (hasTime && hasLength ? "," : "&nbsp;") + "</span>";
    var lengthDisplay = '<span class="tablestat overall-length umi">' + (hasLength ? getTableValueUnit(length) : "&nbsp;") + "</span>";
    return '<div class="tablestat dual-stat">' + timeDisplay + lengthDisplay + "</div>";
}

function getTableInfoSummaryDisplay(summary) {
    if (summary == undefined || !summary) return "";
    var newSummary = "";
    if (summary.includes('id="vxH"')) newSummary += '<hr id="vxH">';
    if (summary.includes('id="vx4"')) newSummary += '<hr id="vx4">';
    if (summary.includes('id="vxc"')) newSummary += '<hr id="vxc">';
    if (summary.includes('id="vxw"')) newSummary += '<hr id="vxw">';
    summary = newSummary;
    summary = summary.replace('id="vxx"', 'id="vxx" title="Precise coordinates unknown"');
    summary = summary.replace('id="vxi"', 'id="vxi" title="Detailed info on Ropewiki"');
    summary = summary.replace('id="vxn"', 'id="vxn" title="Detailed info on an external beta site"');
    summary = summary.replace('id="vxm"', 'id="vxm" title="KML map on Ropewiki"');
    summary = summary.replace('id="vxe"', 'id="vxe" title="KML map on an external beta site"');
    summary = summary.replace('id="vxs"', 'id="vxs" title="Has a sketch"');
    summary = summary.replace('id="vxd"', 'id="vxd" title="Has a PDF"');
    summary = summary.replace('id="vxp"', 'id="vxp" title="Has main photo"');
    summary = summary.replace('id="vx2"', 'id="vx2" title="Passable with normal car"');
    summary = summary.replace('id="vxH"', 'id="vxH" title="Requires High Clearance vehicle"');
    summary = summary.replace('id="vx4"', 'id="vx4" title="Requires 4wd vehicle"');
    summary = summary.replace('id="vxc"', 'id="vxc" title="Requires a shuttle"');
    summary = summary.replace('id="vxw"', 'id="vxw" title="Requires a watercraft"');
    var endIndex = summary.lastIndexOf("</div");
    if (endIndex < 0) return summary;
    var startIndex = summary.lastIndexOf(">", endIndex - 1) + 1;
    var bestSeason = summary.substring(startIndex, endIndex);
    var bestSeasonTable = '<table class="wikitable bst mbst nostranslate"><tbody><tr>';
    for (var i = 0; i < bestSeason.length; ++i) {
        switch (bestSeason[i]) {
          case " ":
            break;

          case ",":
            bestSeasonTable += '<td class="bss"></td>';
            break;

          case ".":
            bestSeasonTable += "<td></td>";
            break;

          case "x":
            bestSeasonTable += '<td class="bsy"></td>';
            break;

          case "X":
            bestSeasonTable += '<td class="bsg"></td>';
            break;
        }
    }
    bestSeasonTable += "</tr></tbody></table>";
    summary = summary.substring(0, startIndex - 1) + ' style="display:block;">' + bestSeasonTable + summary.substr(endIndex);
    return summary;
}

function getTableConditionDisplay(summary) {
    if (summary == undefined || !summary) return "";
    var div = document.createElement("div");
    div.innerHTML = summary;
    var icons = div.getElementsByClassName("cicons");
    for (var i = 0; i < icons.length; ++i) {
        if (icons[i].nodeName !== "SPAN") continue;
        var iconsSummary = icons[i].innerHTML;
        var newSummary = "";
        var index = 0;
        index = iconsSummary.indexOf('id="cs');
        if (index >= 0) newSummary += '<hr class="cicons" ' + iconsSummary.substr(index, 8) + ">";
        index = iconsSummary.indexOf('id="cd');
        if (index >= 0) newSummary += '<hr class="cicons" ' + iconsSummary.substr(index, 8) + ">";
        icons[i].innerHTML = newSummary;
    }
    summary = div.innerHTML;
    var quality = getConditionIcon(summary, "cs");
    if (quality !== null) summary = summary.replace('id="' + quality + '"', 'id="' + quality + '" title="' + condQuality[quality] + '"');
    var waterflow = getConditionIcon(summary, "cwa");
    if (waterflow !== null) summary = summary.replace('id="' + waterflow + '"', 'id="' + waterflow + '" title="' + condWaterflow[waterflow] + '"');
    var wetsuit = getConditionIcon(summary, "ct");
    if (wetsuit !== null) summary = summary.replace('id="' + wetsuit + '"', 'id="' + wetsuit + '" title="' + condWetsuit[wetsuit] + '"');
    var dangers = getConditionIcon(summary, "cd");
    if (dangers !== null) summary = summary.replace('id="' + dangers + '"', 'id="' + dangers + '" title="' + condDangers[dangers] + '"');
    const regex = /\[\[(.*?)\]\]/;
    var wikiLink = regex.exec(summary);
    if (wikiLink != null) {
        var conditions = wikiLink[1].split("|");
        var conditionsStr = '<a href="/' + linkify(conditions[0]) + '" title="' + conditions[0] + '"><b class="table condition-date">' + conditions[1].replace(/'/g, "") + "</b></a>";
        summary = summary.replace(wikiLink[0], conditionsStr);
    }
    return summary;
}

function getTableValueUnit(entry) {
    if (!entry || !entry.unit) return "";
    if (entry.unit === "ft" || entry.unit === "m") return ftStr(entry.value);
    if (entry.unit === "mi" || entry.unit === "km") return miStr(entry.value);
    return entry.value.toString() + entry.unit.toString();
}

function getConditionIcon(entry, condType) {
    var match = 'id="' + condType;
    var index = entry.indexOf(match);
    if (index < 0) return null;
    index += match.length;
    return condType + entry.substring(index, entry.indexOf('"', index + 1));
}

var listUser, listName, isUserListTableVar;

function isUserListTable() {
    if (isUserListTableVar === undefined) {
        var lstUser = document.getElementById("user");
        var lstName = document.getElementById("list");
        if (lstUser && lstName) {
            listUser = lstUser.innerHTML;
            listName = lstName.innerHTML;
            isUserListTableVar = true;
        } else isUserListTableVar = false;
    }
    return isUserListTableVar;
}

function isUserListIsOwned() {
    var currentUser = mw.config.get("wgUserName");
    return currentUser === listUser;
}

function isUserListTableEditable() {
    var chk = document.getElementById("listTableEnableEditing");
    var enableChecked = !!chk && chk.checked;
    return isUserListIsOwned() && enableChecked;
}

function setUserListGeneralComment(data) {
    var comment = Object.keys(data.query.results).length > 0 ? data.query.results[Object.keys(data.query.results)[0]].printouts[""][0] : "";
    if (comment === undefined) comment = "";
    drawUserListGeneralComment(comment);
}

function drawUserListGeneralComment(comment) {
    var table = document.getElementById("loctable");
    if (!table) return;
    var enabledSlider = document.getElementById("userListEditableEnabled");
    if (!enabledSlider && isUserListIsOwned()) {
        enabledSlider = document.createElement("div");
        enabledSlider.id = "userListEditableEnabled";
        enabledSlider.innerHTML = '<span>Edit this list:&nbsp;&nbsp;&nbsp;</span><label class="toggleswitch"><input type="checkbox" id="listTableEnableEditing" onclick="toggleUserListEnableEditing()" ><span class="toggleslider round"></span></label>';
        table.parentNode.insertBefore(enabledSlider, table);
    }
    var control = document.getElementById("generalcomment");
    if (!control) {
        control = document.createElement("div");
        control.id = "generalcomment";
        var innerHtml = "<table><tbody>";
        innerHtml += '<tr><td class="generalcomment-header"><b>General Comment:</b>';
        if (isUserListTableEditable()) {
            innerHtml += "<br>" + '<input type="button" value="Edit"   id="generalcomment-edit"       title="Edit general comment" onclick="editComment(\'generalcomment\')"       class="userlistbutton edit"> ' + '<input type="button" value="âŠ˜" id="generalcomment-canceledit" title="Cancel the changes"   onclick="cancelEditComment(\'generalcomment\')" class="userlistbutton cancel" style="display:none"> ';
        }
        innerHtml += '</td><td class="generalcomment-cell"><span id="generalcomment-comment"></span></td></tr></tbody><table><br>';
        control.innerHTML = innerHtml;
        table.parentNode.insertBefore(control, table);
    }
    var commentElement = document.getElementById("generalcomment-comment");
    commentElement.innerHTML = comment;
}

function setUserListInfo(data) {
    $.each(data.query.results, function(i, item) {
        var name = item.printouts["Has location"][0].fulltext;
        var userDate = item.printouts["Has tentative date"][0];
        var comment = item.printouts["Has comment"][0];
        var marker = markers.filter(function(x) {
            return x.name === name;
        })[0];
        if (marker != undefined) {
            marker.locationData.userDate = userDate;
            marker.locationData.comment = comment;
        }
    });
    updateTable();
}

function getUserListTableHeaderRow() {
    const UserListTableUserDateColumn = '<th class="rwHdr">' + '<span class="rwText ctranslate">Date</span>' + '<span id="sort-userDate" title="Sort by date" class="rwSortIcon gmnoprint notranslate"></span>' + "</th>";
    const UserListTableCommentColumn = '<th class="rwHdr">' + '<span class="rwTextNoSort ctranslate">Comment</span>' + "</th>";
    const UserListTableEditColumn = '<th class="rwHdr">' + '<span class="rwTextNoSort ctranslate">Edit</span>' + "</th>";
    var header = UserListTableUserDateColumn + getStandardTableHeaderRow() + UserListTableCommentColumn;
    if (isUserListTableEditable()) {
        var userListTableEditColumn = UserListTableEditColumn.replace(/\[ListUser]/g, listUser).replace(/\[ListName]/g, listName);
        header += userListTableEditColumn;
    }
    return header;
}

function getUserListTableRow(item) {
    const UserDate = '<td class="tdate" id="[LocationName]-userdate">[UserDate]</td>';
    const Comment = '<td class="tcomment" id="[LocationName]-comment">[Comment]</td>';
    const EditDelete = '<td class="noprint">' + '<input type="button" value="Edit"   id="[LocationName]-edit"       title="Edit date and comment" onclick="editComment(\'[LocationNameWithoutApostrophe]\')"                class="userlistbutton edit"> ' + '<input type="button" value="âŠ˜" id="[LocationName]-canceledit" title="Cancel the changes"    onclick="cancelEditComment(\'[LocationNameWithoutApostrophe]\')"          class="userlistbutton cancel" style="display:none"> ' + '<input type="button" value="âœ–" id="[LocationName]-remove"     title="Remove from this list" onclick="removeLocationFromUserList(\'[LocationNameWithoutApostrophe]\')" class="userlistbutton remove"> ' + "</td>";
    var userDate = UserDate.replace(/\[UserDate]/, getTableUserDate(item.userDate)).replace(/\[LocationName]/, item.id);
    var comment = Comment.replace(/\[Comment]/, !item.comment ? "" : item.comment).replace(/\[LocationName]/, item.id);
    var html = userDate + getStandardTableRow(item) + comment;
    if (isUserListTableEditable()) {
        var editDelete = EditDelete.replace(/\[LocationName]/g, item.id).replace(/\[LocationNameWithoutApostrophe]/g, item.id.split("'").join("%27"));
        html += editDelete;
    }
    return html;
}

function getTableUserDate(unix_timestamp) {
    if (!unix_timestamp) return "";
    var date = new Date(unix_timestamp * 1e3);
    return days[date.getUTCDay()] + " " + date.getUTCDate() + months[date.getUTCMonth()] + date.getUTCFullYear();
}

var editComment = function(elementId) {
    elementId = elementId.split("%27").join("'");
    var editingRowItem = elementId !== "generalcomment";
    var commentElement = document.getElementById(elementId + "-comment");
    var userDateElement = document.getElementById(elementId + "-userdate");
    var editButton = document.getElementById(elementId + "-edit");
    var canceleditButton = document.getElementById(elementId + "-canceledit");
    if (editButton.value === "Edit") {
        editButton.value = "âœ”";
        editButton.title = "Save the changes";
        editButton.classList.remove("edit");
        editButton.classList.add("commit");
        if (editingRowItem) {
            userDateElement.originalText = userDateElement.innerHTML;
            var dateString = userDateElement.innerHTML;
            var datePart = dateString.slice(dateString.length - 9, dateString.length - 7);
            var monthPart = dateString.slice(dateString.length - 7, dateString.length - 4);
            var yearPart = dateString.slice(dateString.length - 4);
            var formattedDateString = datePart + " " + monthPart + " " + yearPart;
            userDateElement.innerHTML = '<input type="date" value=' + new Date(formattedDateString).toLocaleDateString("en-CA") + ">";
        }
        commentElement.originalText = commentElement.innerHTML;
        commentElement.contentEditable = true;
        commentElement.focus();
        if (commentElement.getAttribute("keydown-listener") !== "true") {
            commentElement.addEventListener("keydown", function(event) {
                if (event.keyCode === 13 && !event.getModifierState("Shift")) {
                    editComment(elementId);
                    return false;
                }
                return true;
            });
            commentElement.setAttribute("keydown-listener", "true");
        }
        canceleditButton.style.display = "inline-block";
    } else {
        editButton.value = "Edit";
        editButton.title = elementId === "generalcomment" ? "Edit general comment" : "Edit date and comment";
        editButton.classList.remove("commit");
        editButton.classList.add("edit");
        var newDate = null;
        if (editingRowItem) {
            newDate = parseInt(new Date(userDateElement.firstChild.value).getTime() / 1e3);
            userDateElement.innerHTML = getTableUserDate(newDate);
        }
        commentElement.contentEditable = false;
        var newComment = commentElement.innerHTML;
        canceleditButton.style.display = "none";
        for (var i = 0; i < markers.length; i++) {
            var marker = markers[i];
            if (marker.name !== elementId) continue;
            marker.locationData.comment = newComment;
            marker.locationData.userDate = newDate;
            break;
        }
        var state = {
            elementId: elementId,
            editingRowItem: editingRowItem,
            newComment: newComment,
            newUserDate: newDate
        };
        saveUserListEntry(state);
    }
};

var cancelEditComment = function(elementId) {
    elementId = elementId.split("%27").join("'");
    var editingRowItem = elementId !== "generalcomment";
    var commentElement = document.getElementById(elementId + "-comment");
    var userDateElement = document.getElementById(elementId + "-userdate");
    var editButton = document.getElementById(elementId + "-edit");
    var canceleditButton = document.getElementById(elementId + "-canceledit");
    if (editingRowItem) userDateElement.innerHTML = userDateElement.originalText;
    commentElement.contentEditable = false;
    commentElement.innerHTML = commentElement.originalText;
    editButton.value = "Edit";
    editButton.title = elementId === "generalcomment" ? "Edit general comment" : "Edit date and comment";
    editButton.classList.remove("commit");
    editButton.classList.add("edit");
    canceleditButton.style.display = "none";
};

var removeLocationFromUserList = function(elementId) {
    elementId = elementId.split("%27").join("'");
    var state = {
        elementId: elementId,
        editingRowItem: true
    };
    getCsrfToken(deleteLocation, state);
};

var csrfToken;

function getCsrfToken(callback, state) {
    if (csrfToken === undefined) {
        $.getJSON(geturl(SITE_BASE_URL + "/api.php?action=query&meta=tokens&format=json"), function(data) {
            csrfToken = data.query.tokens.csrftoken;
            getCsrfToken(callback, state);
        });
        return;
    }
    getPageContent(callback, state);
}

function saveUserListEntry(state) {
    getCsrfToken(editRequest, state);
}

function getPageContent(callback, state) {
    state.pageTitle = state.editingRowItem ? "Lists:" + listUser + "/" + state.elementId.replace(/\s/g, "_") : "Lists:" + listUser + "/List:" + listName.replace(/\s/g, "_");
    $.getJSON(geturl(SITE_BASE_URL + "/api.php?action=parse&page=" + state.pageTitle + "&prop=wikitext&format=json"), function(data) {
        var content = data.parse !== undefined ? data.parse.wikitext["*"] : GetBoilerPlatePageContent();
        state.pageContent = content;
        callback(state);
    });
}

function editRequest(state) {
    var content = state.pageContent;
    const endMarker = "\n";
    const commentMarker = "|Comment=";
    var startIndex = content.indexOf(commentMarker);
    var endIndex;
    if (startIndex > 0) {
        endIndex = content.indexOf(endMarker, startIndex) + endMarker.length;
    } else {
        startIndex = content.indexOf("}}");
        endIndex = startIndex;
    }
    var newPageContent = content.substring(0, startIndex) + commentMarker + state.newComment + endMarker + content.substring(endIndex);
    if (state.editingRowItem) {
        content = newPageContent;
        const dateMarker = "|Date=";
        startIndex = content.indexOf(dateMarker);
        if (startIndex > 0) {
            endIndex = content.indexOf(endMarker, startIndex) + endMarker.length;
        } else {
            startIndex = content.indexOf("}}");
            endIndex = startIndex;
        }
        newPageContent = content.substring(0, startIndex) + dateMarker + state.newUserDate + endMarker + content.substring(endIndex);
    }
    if (state.newList !== undefined) {
        content = newPageContent;
        const listMarker = "|List=";
        startIndex = content.indexOf(listMarker);
        if (startIndex > 0) {
            endIndex = content.indexOf(endMarker, startIndex) + endMarker.length;
        } else {
            startIndex = content.indexOf("}}");
            endIndex = startIndex;
        }
        newPageContent = content.substring(0, startIndex) + listMarker + state.newList + endMarker + content.substring(endIndex);
    }
    if (state.newLocation !== undefined) {
        content = newPageContent;
        const locationMarker = "|Location=";
        startIndex = content.indexOf(locationMarker);
        if (startIndex > 0) {
            endIndex = content.indexOf(endMarker, startIndex) + endMarker.length;
        } else {
            startIndex = content.indexOf("}}");
            endIndex = startIndex;
        }
        newPageContent = content.substring(0, startIndex) + locationMarker + state.newLocation + endMarker + content.substring(endIndex);
    }
    var params = {
        action: "edit",
        title: state.pageTitle,
        text: newPageContent,
        token: csrfToken,
        format: "json"
    };
    $.post(geturl(SITE_BASE_URL + "/api.php"), params, function(response) {
        if (response.error || response.edit.result !== "Success") {
            return;
        }
    });
}

function deleteLocation(state) {
    const listsMarker = "|List=";
    const listsEndMarker = "\n";
    var content = state.pageContent;
    var startIndex = content.indexOf(listsMarker);
    if (startIndex < 0) return;
    var endIndex = content.indexOf(listsEndMarker, startIndex + listsMarker.length) + listsEndMarker.length;
    var currentLists = content.substring(startIndex + listsMarker.length, endIndex - 1);
    currentLists = currentLists.replace("," + listName, "").replace(listName + ",", "").replace(listName, "");
    var newPageContent = content.substring(0, startIndex) + listsMarker + currentLists + listsEndMarker + content.substring(endIndex);
    var params = {
        action: "edit",
        title: state.pageTitle,
        text: newPageContent,
        token: csrfToken,
        format: "json"
    };
    $.post(geturl(SITE_BASE_URL + "/api.php"), params, function(response) {
        if (response.edit.result !== "Success") {
            return;
        }
        removeMarker(state.elementId);
    });
}

function GetBoilerPlatePageContent() {
    return "{{List\r\n" + "|User=" + listUser + "\r\n" + "|List=" + listName + "\r\n" + "|Comment=\r\n}}\r\n";
}

function addToList(elementId) {
    var name = "modal-addToList";
    const ModalHtml = '<p><font size="+2"><b>Add <span class="modal-locationname">[LocationNameWithApostrophe]</span> to your own list</b></font></p>' + "<hr>" + '<details class="modal-details">' + "<summary>Instructions for lists</summary>" + "<p>Lists can be used to plan an upcoming trip, or to record past accomplishments. " + "The link (url) for a list can be shared with others, but only you have the ability to edit lists that you created.</p>" + "<p>Choose one of your existing lists from the dropdown, or type in a name to create a new list.</p>" + '<p>You can add a date (such as proposed date in the future, or a date in the past when you completed it), and/or add a comment. Then click the "Save" button. ' + "These fields are also editable after the location has been added to the list; when viewing a list you can edit the individual entries from within the table itself.</p>" + "<p>You can only have a particular Ropewiki location included in one of your lists at a time. Correspondingly, each location can only have one date and comment associated with it.</p>" + "<p>A yellow highlight around a location marker on the map indicates that it is part of a list.</p>" + "<p>To remove a location from a list, you can assign it a blank \"List name\", or when viewing the list itself use the 'X' button on the far right of each row in the table to remove it.</p>" + '<p>To view the lists you have created, click on the "Lists" link in the Ropewiki sidebar on the left.</p>' + "<p>To delete a list, when viewing it simply remove all entries from the table using the 'X' buttons.</p>" + "</details>" + '<table class="formtable">' + '<tr><td><b>List name:</b></td><td><input type="text" id="modal-listname" list="existing-lists" autocomplete="off" onfocus="this.value=\'\'" /><datalist id="existing-lists"><option>Favorites</option></datalist></td></tr>' + '<tr><td><b>Date:</b></td><td><input type="date" id="modal-userdate" value="" /></td></tr>' + '<tr><td class="modal-comment-header"><b>Comment:</b></td><td id="modal-comment" contentEditable="true" class="modal-comment"></td></tr>' + "</table>" + "<br>" + '<input type="button" value="Save" onclick="commitAddToList(\'[LocationName]\')" class="map-control dropdown selection">';
    var modalHtml = ModalHtml.replace(/\[LocationNameWithApostrophe]/, elementId.split("%27").join("'")).replace(/\[LocationName]/, elementId);
    createModal(name, modalHtml);
    openModal(name);
    var currentUser = mw.config.get("wgUserName");
    if (currentUser !== "null") {
        var url = geturl(SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Has user::" + currentUser + "]][[Has list::+]][[Has location::+]]") + "|?Has list=|mainlabel=-");
        $.getJSON(url, function(data) {
            setUserListModalDropdown(data);
        });
        var url = geturl(SITE_BASE_URL + "/api.php?action=ask&format=json" + "&query=" + urlencode("[[Has user::" + currentUser + "]][[Has location::" + elementId + "]]") + "|?Has list|?Has tentative date|?Has comment");
        $.getJSON(url, function(data) {
            setUserListModalExistingInfo(data);
        });
    }
}

function commitAddToList(elementId) {
    if (!listUser) {
        var currentUser = mw.config.get("wgUserName");
        if (currentUser !== "null") listUser = currentUser;
    }
    var listElement = document.getElementById("modal-listname");
    var userDateElement = document.getElementById("modal-userdate");
    var commentElement = document.getElementById("modal-comment");
    var list = listElement.value;
    var date = userDateElement.value !== "" ? parseInt(new Date(userDateElement.value).getTime() / 1e3) : "";
    var comment = commentElement.innerHTML;
    elementId = elementId.split("%27").join("'");
    var state = {
        elementId: elementId,
        editingRowItem: true,
        newLocation: elementId,
        newList: list,
        newComment: comment,
        newUserDate: date
    };
    saveUserListEntry(state);
    if (list !== "") {
        addhighlight([ elementId ], MARKER_USERLIST_HIGHLIGHT);
    } else {
        var marker = markers.filter(function(x) {
            return x.name === state.elementId;
        })[0];
        if (marker.highlight) {
            marker.highlight.setMap(null);
            marker.highlight = null;
        }
    }
    var modal = document.getElementById("modal-addToList");
    modal.style.display = "none";
}

function setUserListModalDropdown(data) {
    var arr = [];
    arr.push("Favorites");
    $.each(data.query.results, function(index, value) {
        var val = value.printouts[""][0].trim();
        if (arr.indexOf(val) === -1) {
            arr.push(val);
        }
    });
    arr.sort();
    var html = "";
    for (var i = 0; i < arr.length; ++i) {
        html += "<option>" + arr[i] + "</option>";
    }
    var listdropdown = document.getElementById("existing-lists");
    listdropdown.innerHTML = html;
}

function setUserListModalExistingInfo(data) {
    var item = data.query.results[Object.keys(data.query.results)[0]];
    if (!item) return;
    var listElement = document.getElementById("modal-listname");
    var userDateElement = document.getElementById("modal-userdate");
    var commentElement = document.getElementById("modal-comment");
    var v = item.printouts["Has list"];
    if (v && v.length > 0) {
        listElement.value = v[0];
    }
    v = item.printouts["Has tentative date"];
    if (v && v.length > 0) {
        userDateElement.value = new Date(getTableUserDate(v[0])).toLocaleDateString("en-CA");
    }
    v = item.printouts["Has comment"];
    if (v && v.length > 0) {
        commentElement.innerHTML = v[0];
    }
}

function toggleUserListEnableEditing() {
    var commentElement = document.getElementById("generalcomment-comment");
    var comment = commentElement.innerHTML;
    var control = document.getElementById("generalcomment");
    control.parentElement.removeChild(control);
    drawUserListGeneralComment(comment);
    updateTable();
}

function textTranslation(text, pre, post) {
    if (!glist) return text;
    if (!pre) pre = "";
    if (!post) post = "";
    for (var k = 0; k < glist.length; ++k) text = text.replace(genlist[k], pre + glist[k] + post);
    return text;
}

function loadTranslation() {
    gtrans = getCookie("googtrans").split("/");
    if (gtrans.length >= 3) gtrans = gtrans[2]; else gtrans = null;
    if (gtrans == gtrans2) return;
    gtrans2 = gtrans;
    var gtranslist = [ "en,Introduction,Approach,Descent,Exit,Red tape,Background,Credits,Beta sites,Trip reports and media,Time,Raps,Shuttle,Start,End,Road,Parking,(Upper),(Middle),(Lower)", "es,Descripciï¿½n,Aproximaciï¿½n,Descenso,Retorno,Regulaciones,Historia,Crï¿½ditos,Referencias,Informes del recorrido y fotos,Horario,Rï¿½peles,Combinaciï¿½n,Inicio,Final,Carretera,Parking,(Superior),(Intermedio),(Inferior)", "pt,Descriï¿½ï¿½o,Aproximaï¿½ï¿½o,Descida,Retorno,Regulamentos,Histï¿½ria,Crï¿½ditos,Referï¿½ncias,Relatï¿½rios de viagens e fotos,Tempos,Rapeis,Combinaï¿½ï¿½o,Entrada,Saï¿½da,Estrada,Parking,(Superior),(Intermediï¿½rio),(Inferior)", "it,Descrizione,Avvicinamento,Discesa,Rientro,Normativa,Storia,Crediti,Siti web,Report di viaggio e foto,Tempi,Calate,Navetta,Entrata,Uscita,Strada,Parking,(Superiore),(Intermedio),(Inferiore)", "fr,Description,Approche,Descente,Retour,Rï¿½glements,Historique,Crï¿½dits,Sites internet,Rapports de voyage et photos,Temps,Rappels,Navette,Depart,Arrivee,Route,Parking,(Supï¿½rieur),(Intermï¿½diaire),(Infï¿½rieur)", "de,Einleitung,Zustieg,Zejscie,Rï¿½ckweg,Vorschriften,Hintergrund,Credits,Weblinks,Reiseberichte und fotos,Zeit,Abseilen,Schiffchen,Einleitung,Ausstieg,Strasse,Parking,(Hï¿½her),(Intermediï¿½r),(Untere)", "ca,Descripciï¿½,Aproximaciï¿½,Descens,Retorn,Regulacions,Histï¿½ria,Crï¿½dits,Referï¿½ncies,Informes del recorregut i fotos,Horari,Rï¿½pels,Combinaciï¿½,Inici,Final,Carretera,Parking,(Superior),(Intermedi),(Inferior)" ];
    glist = null;
    genlist = (gtranslist[0].substr(3) + gtranslist[0].substr(2).toLowerCase()).split(",");
    for (var g = 0; g < gtranslist.length; ++g) if (gtranslist[g].substr(0, 2) == gtrans) {
        glist = (gtranslist[g].substr(3) + gtranslist[g].substr(2).toLowerCase()).split(",");
        break;
    }
    var list = document.getElementsByClassName("ctranslate");
    for (var j = 0; j < list.length; j++) {
        var lj = list[j];
        var text = lj.innerHTML;
        if (!lj.oinnerHTML) lj.oinnerHTML = text; else text = lj.oinnerHTML;
        lj.innerHTML = textTranslation(text, '<span class="notranslate"> ', " </span>");
    }
    var links = document.getElementsByClassName("external");
    for (var j = 0; j < links.length; j++) {
        var rwext = "ext=.rw";
        var link = links[j];
        if (!link.href) continue;
        var url = link.href;
        if (url.indexOf("translate.google.com") < 0 && url.indexOf(rwext) < 0) continue;
        var text = link.innerHTML;
        if (!link.ohref) {
            link.ohref = url;
            link.oinnerHTML = text;
        } else {
            url = link.ohref;
            text = link.oinnerHTML;
        }
        if (url.indexOf(rwext) >= 0) {
            link.href = url = rwlink(url, "");
            continue;
        }
        var urlpos = url.indexOf("&u=http");
        if (urlpos < 0) continue;
        var ourl = url.substr(urlpos + 3);
        var to = "en";
        var from = "auto";
        var urlpos = url.indexOf("&sl=");
        if (urlpos >= 0) {
            from = url.substr(urlpos + 4, 2);
            if (from == "au") from = "auto";
        }
        if (gtrans) to = gtrans;
        if (from != to) {
            link.style.display = "inline";
            link.href = "https://translate.google.com/translate?" + "&hl=" + to + "&sl=" + from + "&tl=" + to + "&u=" + ourl;
        } else {
            link.style.display = "none";
        }
    }
}

function rwlink(url, opts) {
    var rwext = "ext=.rw";
    var urlopts = urlcheckbox;
    var olist = opts.split("&");
    for (var i = 0; i < olist.length; ++i) {
        var idval = olist[i].split("=");
        if (idval.length != 2) continue;
        urlopts = setUrlParam(urlopts, idval[0], idval[1]);
    }
    function setUrlParam(param, id, val) {
        var pid = "&" + id + "=";
        var i = param.indexOf(pid);
        if (i >= 0) {
            var b = "";
            var a = param.substr(0, i);
            var l = param.indexOf("&", i + 1);
            if (l >= 0) b = param.substr(l);
            param = a + b;
        }
        param += pid + val;
        return param;
    }
    if (metric) url = url.replace(rwext, "metric=on&" + rwext);
    if (french) url = url.replace(rwext, "french=on&" + rwext);
    if (gtrans) url = url.replace(rwext, "gtrans=" + gtrans + "&" + rwext);
    if (urlopts) url = url.replace("&" + rwext, urlopts + "&" + rwext);
    if (urlopts.indexOf("smallscreen=on") < 0) url = url.replace(rwext, "docwidth=" + $(window).width() + "&" + rwext);
    return url;
}

function googleTranslateElementInit() {
    var hdr = document.getElementById("firstHeading");
    if (hdr) {
        var div = document.createElement("div");
        div.className = "noprint";
        div.style.cssText = "float:right";
        div.id = "google_translate_flags";
        div.innerHTML = '<table class="noprint"><tr><td><img src="' + MULTI_FLAG_ICON + '"/></td><td id="google_translate_element"></td></tr></table>';
        hdr.insertBefore(div, hdr.firstChild);
        new google.translate.TranslateElement({
            pageLanguage: "en",
            multilanguagePage: true,
            gaTrack: true,
            gaId: "UA-78683801-1"
        }, "google_translate_element");
    }
}

function getDomainFaviconURL(linkurl) {
    var domain = linkurl.match(/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/);
    domain = RegExp.$2;
    var faviconurl = "https://www.google.com/s2/favicons?domain=" + domain;
    return faviconurl;
}

function openfavlinks() {
    var str = "";
    var favlinks = document.getElementsByClassName("favlinks");
    for (i = 0; i < favlinks.length; ++i) {
        var href = favlinks[i].getElementsByTagName("A")[0].href;
        str += '<hr><h2>From <a href="' + href + '">' + href + '</a>:</h2><iframe src="' + href + '" frameborder="0" width="100%" min-height="3000px" style="font-size:smaller;"></iframe>';
    }
    var div = document.getElementById("allfavlinks");
    if (!div) {
        div = document.createElement("DIV");
        div.id = "allfavlinks";
        var body = document.getElementById("content");
        if (body == null) body = document.body;
        body.appendChild(div);
    }
    if (div) div.innerHTML = str;
}

function adjustFaviconElements() {
    var domains = document.getElementsByClassName("favicon");
    for (var i = 0; i < domains.length; i++) {
        var links = domains[i].getElementsByTagName("A");
        {
            var link = links[0];
            var href = link.href;
            var fvcurl = getDomainFaviconURL(href);
            var img = '<img width="32px" height="32px" style="vertical-align:middle;margin-left:0px;margin-top:0px;width:32px;height:32px" src="' + fvcurl + '"/>';
            link.innerHTML = img + '<span style="vertical-align: middle;"> ' + link.innerHTML + "</span>";
        }
    }
    var fav = document.getElementById("favlinks");
    if (fav) fav.innerHTML = '<a href="javascript:openfavlinks();">' + fav.innerHTML + "</a>";
    var fav = document.getElementById("allfavlinks");
    if (fav) openfavlinks();
}

function loadInlineWeather(enabled) {
    var coords = "";
    var kmlmarker = document.getElementById("kmlmarker");
    if (kmlmarker) coords = kmlmarker.innerHTML.toString().split(",").map(function(item) {
        return item.trim();
    });
    var weatherdiv = document.getElementById("weatherdiv");
    var link;
    if (weatherdiv) {
        var a = weatherdiv.getElementsByTagName("A");
        if (a && a.length > 0 && a[0].href) link = a[0].href;
    }
    if (coords.length >= 2 && weatherdiv && enabled) {
        var url = PROTOCOL + "api.openweathermap.org/data/2.5/onecall?lat=" + coords[0] + "&lon=" + coords[1] + "&exclude=current,minutely,hourly&appid=" + OPENWEATHER_APIKEY;
        $.getJSON(geturl(url), function(data) {
            if (data && data.daily && data.daily.length > 0) {
                weatherdiv.classList.add("wst");
                var periods = data.daily;
                var w = '<div class="wstheader noprint">';
                w += '<span class="notranslate">';
                var e = periods.length - 1;
                var startDate = new Date(periods[0].dt * 1e3);
                var endDate = new Date(periods[e].dt * 1e3);
                w += startDate.getDate() + "-" + endDate.getDate() + " " + months[endDate.getMonth()];
                if (link) w += '&nbsp;&nbsp;<a rel="nofollow" class="external text" href="' + link + '"><img alt="Wforecast.png" src="' + WEATHER_MINI_ICON + '" width="13" height="22"> Extended forecast</a>';
                w += '<span class="wstheader units" style="float:right;">' + (metric ? "&#176;C" : "&#7506;F") + "</span>";
                w += "</span>";
                w += "</div>";
                w += '<table class="wikitable wst bst notranslate">';
                w += '<img class="wstlogo" src="' + OPENWEATHER_LOGO + '"/>';
                for (var i = 0; i < periods.length; ++i) {
                    var date = new Date(periods[i].dt * 1e3);
                    w += '<th class="wstheader ' + isWeekend(date.getDay()) + '">' + days[date.getDay()] + "<br></th>";
                }
                w += "<tr>";
                for (var i = 0; i < periods.length; ++i) {
                    var h = metric ? convertKelvinToCelsius(periods[i].temp.max).toFixed(0) : convertKelvinToFahrenheit(periods[i].temp.max).toFixed(0);
                    var l = metric ? convertKelvinToCelsius(periods[i].temp.min).toFixed(0) : convertKelvinToFahrenheit(periods[i].temp.min).toFixed(0);
                    var date = new Date(periods[i].dt * 1e3);
                    w += '<td title="' + date.getDate() + " " + months[date.getMonth()] + " : &quot;" + periods[i].weather[0].description + "&quot; Max " + h + (metric ? "C" : "F") + " Min " + l + (metric ? "C" : "F") + '">';
                    var weatherIconSize = periods[i].weather[0].icon === "01d" ? "30" : "40";
                    w += '<div class="weatherimg" style="background-image: url(&#39;' + PROTOCOL + "openweathermap.org/img/wn/" + periods[i].weather[0].icon + ".png&#39;);  background-size: " + weatherIconSize + "px " + weatherIconSize + 'px;"/></div>';
                    w += '<div class="weatherh">' + h + "</div>";
                    w += '<div class="weatherl">' + l + "</div>";
                    w += "</td>";
                }
                w += "</tr>";
                if (data.alerts && data.alerts.length > 0) {
                    w += '<tr><td colspan="' + periods.length + '" style="padding:0;">';
                    var list = [];
                    for (var i = 0; i < data.alerts.length; ++i) list.push(data.alerts[i].description + "!");
                    if (link) w += '<a href="' + link + '">';
                    w += '<div class="weatheralert rwwarningbox">' + list.join("<br>") + "</div>";
                    if (link) w += "</a>";
                    w += "</td></tr>";
                }
                w += "</table>";
                weatherdiv.innerHTML = w;
            }
        });
    } else {
        if (weatherdiv) {
            if (link) weatherdiv.innerHTML = '<a rel="nofollow" class="external text" href="' + link + '">' + '<img alt="Wforecast.png" src="' + WEATHER_MINI_ICON + '" width="13" height="22"> Weather forecast</a>';
        }
    }
}

function convertKelvinToCelsius(kelvin) {
    return kelvin - 273.15;
}

function convertKelvinToFahrenheit(kelvin) {
    return (kelvin - 273.15) * 9 / 5 + 32;
}

function isWeekend(dayOfWeek) {
    return dayOfWeek === 0 || dayOfWeek === 6 ? "weekend" : "";
}

function createModal(name, innerHtml) {
    var modal = document.getElementById(name);
    if (!modal) {
        modal = document.createElement("div");
        modal.innerHTML = '<div id="' + name + '" class="modal">' + "\x3c!-- Modal content --\x3e" + '<div class="modal-content">' + '<span class="modal-close">&times;</span>' + '<span id="modal-innerContent"></span>' + "</div>" + " </div>";
        document.body.appendChild(modal);
        modal = document.getElementById(name);
        var span = document.getElementsByClassName("modal-close")[0];
        span.onclick = function() {
            modal.style.display = "none";
        };
        window.onclick = function(event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };
    }
    var modalInnerContent = document.getElementById("modal-innerContent");
    modalInnerContent.innerHTML = innerHtml;
}

var openModal = function(name) {
    var modal = document.getElementById(name);
    modal.style.display = "block";
};

function togglelocsearchchk(id) {
    toggleOption(id);
}

function togglefilterschk(id) {
    toggleOption(id);
    filterMarkers();
}

function toggleOption(id, forcechecked) {
    var elems, i;
    var checked = toggleFilter(id, forcechecked);
    elems = document.getElementsByClassName(id.split("chk").join("on"));
    for (i = 0; i < elems.length; i++) elems[i].style.display = checked ? "" : "none";
    elems = document.getElementsByClassName(id.split("chk").join("off"));
    for (i = 0; i < elems.length; i++) elems[i].style.display = !checked ? "" : "none";
    if (id === "filterschk" && checked) {
        toggleDisplayTechnicalFilters("filterdisplay-aca", true);
        toggleDisplayTechnicalFilters("filterdisplay-french", true);
    }
    setCookie(id, checked ? "on" : "");
    return checked;
}

function filterClicked(e) {
    if (e && e.stopPropagation) e.stopPropagation(); else window.event.cancelBubble = true;
    toggleFilter(e.id);
    filterMarkers();
}

function toggleFilter(id, checked) {
    var checkbox = document.getElementById(id);
    if (checked == null) checked = checkbox.checked; else checkbox.checked = checked;
    setCookie(id, checked ? "on" : "");
    toggleDisabledChk(id);
    return checked;
}

function toggleDisabledChk(id) {
    var i;
    var elems = document.getElementsByClassName(id.split("-")[0]);
    var isDisabled = elems.length > 0 && elems[0].disabled;
    if (isDisabled) {
        for (i = 0; i < elems.length; i++) {
            elems[i].disabled = false;
            elems[i].checked = false;
        }
    } else {
        var anyIsChecked = false;
        for (i = 0; i < elems.length; i++) if (elems[i].checked) {
            anyIsChecked = true;
            break;
        }
        if (!anyIsChecked) {
            for (i = 0; i < elems.length; i++) {
                elems[i].checked = true;
                elems[i].disabled = true;
            }
        }
    }
}

function toggleDisplayTechnicalFilters(id, toggled) {
    var span = document.getElementById(id);
    if (toggled === undefined) toggled = span.innerHTML !== String.fromCharCode("9660");
    span.innerHTML = toggled ? "&#9660;" : "&#9658;";
    var type = id.split("-")[1];
    var elems = document.getElementsByClassName("filterson " + type);
    for (var i = 0; i < elems.length; i++) elems[i].style.display = toggled ? "" : "none";
}

function togglewchk(varname) {
    var varval = !eval(varname);
    weather = varval ? "on" : "";
    setCookie(varname, weather);
}

function getMWPage(name, callback) {
    $.getJSON(mw.util.wikiScript("api"), {
        action: "parse",
        text: name,
        format: "json"
    }).done(function(data) {
        callback(data.parse.text["*"]);
    });
}

function toggleStarrate() {
    starrate = $("div#starrate :checkbox")[0].checked;
    if (!isUserStarRatingsTable()) setCookie("starrate", starrate ? "on" : "");
    updateTable();
}

function toggleLabels() {
    labels = !labels;
    setCookie("labels", labels ? "on" : "");
    document.body.style.cursor = "wait";
    window.location.reload();
}

function toggleSlideshow(force) {
    slideshowchk = !slideshowchk;
    if (typeof force != "undefined") slideshowchk = force;
    setCookie("slideshowchk", slideshowchk ? "on" : "");
    var elems = document.getElementsByClassName("slideshow");
    for (var i = 0; i < elems.length; i++) elems[i].style.display = slideshowchk ? "" : "none";
    var elems = document.getElementsByClassName("slideshowschk");
    for (var i = 0; i < elems.length; i++) elems[i].checked = slideshowchk;
    if (!slideshowchk) {
        document.body.style.zIndex = 1;
        document.body.style.zoom = 1.0000001;
    } else {
        document.body.style.zIndex = 0;
        document.body.style.zoom = 1;
    }
}

function loadUserInterface(document) {
    $("title").addClass("notranslate");
    $(".firstHeading span").addClass("notranslate");
    $("#searchform").addClass("notranslate");
    $(".suggestions").addClass("notranslate");
    $(".mw-headline").addClass("ctranslate");
    $(".toctext").addClass("ctranslate");
    var colgroup = document.getElementsByClassName("colgroup");
    for (var i = 0; i < colgroup.length; ++i) {
        var table = colgroup[i];
        var list = table.id.split(".");
        findtag(table.childNodes, "TR", function addrow(item) {
            var l = 0;
            var cols = item.childNodes;
            for (var i = 0; i < cols.length && l < list.length; ++i) {
                var td = cols[i];
                if (td.nodeName == "TD") {
                    var c = list[l];
                    if (c.length > 0) if (td.getElementsByClassName(c).length == 0) td.className += " " + c;
                    ++l;
                }
            }
        });
    }
    var sections = document.getElementsByName("_section[Background]");
    for (var i = 0; i < sections.length; i++) {
        var text = sections[i].innerHTML;
        if (text.trim().split(" ").join() == "==Background==") sections[i].innerHTML = "";
    }
    var jslink = document.getElementsByClassName("jslink");
    for (var i = 0; i < jslink.length; i++) jslink[i].innerHTML = '<a href="javascript:' + jslink[i].id + '();">' + jslink[i].innerHTML + "</a>";
    var tablinks = document.getElementsByClassName("tablinks");
    for (var i = 0; i < tablinks.length; i++) {
        var links = tablinks[i].getElementsByTagName("A");
        for (var j = 0; j < links.length; j++) {
            var link = links[j];
            link.target = "tabIframe2";
        }
    }
    var tabmain = document.getElementsByClassName("tabMain");
    if (tablinks.length > 0 && tabmain.length > 0) {
        var tablink1 = tablinks[0].getElementsByTagName("A");
        if (tablink1.length > 0) tabmain[0].innerHTML = '<div class="tabIframeWrapper"><iframe class="tabContent" name="tabIframe2" src="' + tablink1[0].href + '" marginheight="8" marginwidth="8" frameborder="0"></iframe></div>';
    }
    var nofollow = document.getElementsByClassName("nofollow");
    for (var i = 0; i < nofollow.length; i++) {
        var links = nofollow[i].getElementsByTagName("A");
        for (var j = 0; j < links.length; j++) {
            var link = links[j];
            link.rel = "nofollow";
        }
    }
    var popups = document.getElementsByClassName("pops");
    for (var i = 0; i < popups.length; i++) {
        var links = popups[i].getElementsByTagName("A");
        for (var j = 0; j < links.length; j++) {
            var link = links[j];
            link.target = "_blank";
        }
    }
    var elems = document.getElementsByClassName("popforms");
    for (var i = 0; i < elems.length; i++) {
        var links = elems[i].getElementsByTagName("A");
        for (var l = 0; l < links.length; ++l) {
            var href = links[l].attributes["href"];
            if (href) {
                var str = href.value;
                str = str.replace("Special:FormEdit/File", "Special:Upload");
                href.value = str;
            }
        }
    }
    var setfield = $("ul.setfield");
    for (var i = 0; i < setfield.length; i++) {
        var sp = setfield[i].innerHTML.split("<li>");
        for (var j = 1; j < sp.length; ++j) {
            var spj = sp[j].split("<");
            var name = spj[0].trim();
            spj[0] = '<span onclick="setfield(this)" style="cursor:pointer;" >' + name + "</span>";
            sp[j] = spj.join("<");
        }
        setfield[i].innerHTML = sp.join("<li>");
    }
    var setfield = $("ul.regioncount");
    for (var i = 0; i < setfield.length; i++) {
        var sp = setfield[i].innerHTML.split("<li>");
        for (var j = 1; j < sp.length; ++j) {
            var len = sp[j].indexOf("<", sp[j].indexOf("</a") + 1);
            var text = sp[j].substring(0, len).trim().replace("(i)", '<hr id="vri">');
            text = '<span class="regioncount">' + text + "</span>";
            sp[j] = text + sp[j].substring(len);
        }
        setfield[i].innerHTML = sp.join("<li>");
    }
    var readmore = document.getElementsByClassName("readmore");
    for (var i = 0; i < readmore.length; i++) {
        var text = readmore[i].innerHTML;
        readmore[i].innerHTML = '<a href="#overviewstart" class="readmorebutton">' + text + "</a>";
    }
    var months = document.getElementsByClassName("monthv");
    for (var i = 0; i < months.length; i++) {
        var str = months[i].innerHTML;
        if (str.length == 0) continue;
        var out = '<table class="wikitable bst mbst nostranslate"><tr>';
        for (var s = 0; s < str.length; ++s) switch (str.charAt(s)) {
          case ",":
            out += '<td class="bss"></td>';
            break;

          case "X":
            out += '<td class="bsg"></td>';
            break;

          case "x":
            out += '<td class="bsy"></td>';
            break;

          case ".":
            out += "<td></td>";
            break;
        }
        out += "</tr></table>";
        months[i].innerHTML = out;
        months[i].style.display = "block";
    }
    {
        var texts = document.getElementsByClassName("uaca");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = acaconv(texts[i].innerHTML);
        var texts = document.getElementsByClassName("uacamore");
        for (var i = 0; i < texts.length; i++) texts[i].innerHTML = acaconv(texts[i].innerHTML, true);
    }
    function getUrlParam(param, id, def) {
        var value = urlget(param, "&" + id + "=", def);
        if (!value) value = urlget(param, "?" + id + "=", def);
        return value;
    }
    elem = document.getElementsByClassName("uchk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleMetric()" ' + (metric ? "checked" : "") + ">Metric</label>";
    }
    elem = document.getElementsByClassName("fchk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        var label = elem[i].innerHTML;
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleFrench()" ' + (french ? "checked" : "") + ">" + label + "</label>";
    }
    if (!currentUser) starrate = false;
    elem = document.getElementsByClassName("schk");
    for (var i = 0; i < elem.length; i++) {
        elem[i].className += " notranslate";
        var label = elem[i].innerHTML;
        elem[i].innerHTML = '<label><input class="gmnoprint" type="checkbox" onclick="toggleStarrate()" ' + (starrate ? "checked" : "") + ">" + label + "</label>";
    }
    elem = document.getElementsByClassName("schkon");
    for (var i = 0; i < elem.length; i++) elem[i].style.display = starrate ? "table-row" : "none";
    elem = document.getElementsByClassName("external");
    for (var i = 0; i < elem.length; i++) {
        var link = elem[i];
        var from = getLinkLang(link);
        if (from) {
            var to = "en";
            var ourl = link.href;
            ourl.replace("&", "%26");
            div = document.createElement("SPAN");
            div.innerHTML = ' <a rel="nofollow" class="external text" style="display:none" href="' + PROTOCOL + "translate.google.com/translate?" + "&hl=" + to + "&sl=" + from + "&tl=" + to + "&u=" + ourl + '">' + "[Translated]</a>";
            link.parentNode.insertBefore(div, link.nextSibling);
        }
    }
    var hdr = document.getElementById("firstHeading");
    var pdf = document.getElementById("idcredits");
    var kml = document.getElementById("kmlmapdisplay");
    var kmlfilep = document.getElementById("kmlfilep");
    var file = kmlfilep ? kmlfilep.innerHTML : null;
    var edit = window.location.href.toString().indexOf("&action=") > 0 || window.location.href.toString().indexOf("&diff=") > 0;
    if (hdr && pdf && kml && !edit) {
        var text = ' <select class="notranslate" id="pdfselect" value="" onchange="pdfselect(this)">';
        text += '<option selected disabled hidden style="display: none" value=""></option>';
        text += '<option value="PDF">PDF: Page</option>';
        if (file) {
            text += '<option value="KML">KML: Map</option>';
            text += '<option value="GPX">GPX: Map</option>';
        }
        text += '<img id="ptext" height="32" style="display:none;vertical-align:top" src="' + SITE_BASE_URL + '/extensions/PageForms/skins/loading.gif"/>';
        var div = document.createElement("SPAN");
        div.className = "gmnoprint";
        div.title = "Download";
        div.id = "pdfbutton";
        div.innerHTML = text;
        hdr.appendChild(div);
        var currentUser = mw.config.get("wgUserName");
        if (currentUser !== null && currentUser !== "null") {
            var pageName = mw.config.get("wgPageName");
            pageName = pageName.split("_").join(" ");
            pageName = pageName.split("'").join("%27");
            var text = ' <input id="add-to-list" title="Add to a custom list" type="submit" onclick="addToList(\'' + pageName + '\')" value="">';
            var div = document.createElement("SPAN");
            div.className = "gmnoprint";
            div.innerHTML = text;
            hdr.appendChild(div);
        }
    }
    var creditsline = document.getElementById("idcredits");
    if (creditsline) {
        var pagename = creditsline.innerHTML;
        loadcredits(pagename, "K", "Kcredits");
        loadcredits(pagename, "P", "Pcredits");
        loadcredits(pagename, "J", "Jcredits");
    }
    var referencepic = document.getElementById("referencepic");
    if (referencepic) {
        var approach = document.getElementById("Approach");
        if (approach) {
            var h2 = approach.parentNode;
            while (h2 != null && h2.nodeName != "H2") h2 = h2.parentNode;
            if (h2 != null) {
                h2.parentNode.insertBefore(referencepic, h2);
                referencepic.style.display = "block";
            }
        }
    }
    elem = document.getElementsByClassName("titleuser");
    if (elem.length > 0) {
        var floatdiv = "";
        for (var i = 0; i < elem.length; i++) {
            var str = elem[i].innerHTML.split(",");
            var img = '<img src="' + str[0] + '"/>';
            if (str.length > 1) floatdiv += '<a href="' + str[1] + '" title="Visit the main page">' + img + "</a>"; else floatdiv += img;
        }
        elem = document.getElementById("firstHeading");
        if (elem) {
            var src = elem.innerHTML;
            elem.innerHTML = '<div style="float:right;clear:right">' + floatdiv + "</div>" + src;
        }
    }
    kml_link = document.querySelector("#kmldownload a");
    if (kml_link) {
        kml_link.href = getKmlFileWithoutCache(kml_link.href);
    }
    var wdir = 1, wval = 255, wstep = 128;
    var wtimer = setInterval(function() {
        wval += wdir;
        if (wval > 255) {
            wval = 255;
            wdir = -wstep;
        }
        if (wval < 239) {
            wval = 239;
            wdir = wstep;
        }
        var welem = document.getElementsByClassName("rwwarning");
        var color = "#" + ((wval << 16) + (wval << 8)).toString(16);
        for (var i = 0; i < welem.length; ++i) {
            welem[i].style.backgroundColor = color;
            var wchild = welem[i].childNodes;
            for (var j = 0; j < wchild.length; ++j) if (wchild[j].style) wchild[j].style.backgroundColor = color;
        }
        var welem2 = document.getElementsByClassName("rwwarningbox");
        for (var i = 0; i < welem2.length; ++i) if (welem2[i].style) welem2[i].style.backgroundColor = color;
    }, 1e3);
    var realnames = document.getElementById("userrealnames");
    if (realnames) {
        var userids = [], usernames = [];
        var list = realnames.innerHTML.split('title="User:');
        for (var i = 1; i < list.length; ++i) {
            var id = list[i].split('"')[0].split(" (page")[0];
            var name = list[i].split("<")[0].split(">")[1];
            userids.push(id);
            usernames.push(name);
        }
        elem = document.getElementsByClassName("userid");
        for (var i = 0; i < elem.length; i++) {
            var id = elem[i].innerHTML;
            var n = userids.indexOf(id);
            if (n >= 0) {
                elem[i].innerHTML = usernames[n];
                elem[i].style.display = "block";
            }
        }
    }
    var autorefresh = document.getElementById("autorefresh");
    if (autorefresh != null) {
        var id = autorefresh.innerHTML;
        var fr = document.createElement("IFRAME");
        fr.src = SITE_BASE_URL + "/api.php?action=sfautoedit&form=AutoRefresh&target=Votes:AutoRefresh&query=AutoRefresh[Location]=" + id;
        fr.style.display = "none";
        document.body.appendChild(fr);
    }
    var kmlicons = document.getElementById("kmlicons");
    if (kmlicons != null) KML_ICON_LIST = kmlicons.innerHTML.split(",");
    var lines = document.getElementsByClassName("pinmap");
    for (var i = 0; i < lines.length; i++) {
        var icon;
        if (lines[i].id) {
            var idlist = lines[i].id.split(".");
            if (idlist.length > 1) icon = KML_ICON_LIST[Number(idlist[1]) * 6 + Number(idlist[0])];
        }
        var link = lines[i].parentNode.getElementsByTagName("A")[0];
        lines[i].id = id = link.innerHTML;
        lines[i].innerHTML = pinicon(lines[i].id, icon) + lines[i].innerHTML;
    }
    var maptype = document.getElementById("kmltype");
    var waterflowdiv = document.getElementById("waterflowdiv");
    var coords = "";
    var kmlmarker = document.getElementById("kmlmarker");
    if (kmlmarker) coords = kmlmarker.innerHTML.toString().split(" ").join("");
    if (coords.length > 0 && waterflowdiv) if (maptype && isUSAorCanada()) {
        function extractVal(str, label) {
            var s = str.indexOf(label);
            if (s < 0) return "";
            s = str.indexOf(":", s);
            if (s < 0) return "";
            var e = str.indexOf(" ", s);
            return str.substring(s + 1, e);
        }
        var url = LUCA_BASE_URL + "/rwr?waterflow=winfo=" + coords;
        $.getJSON(geturl(url), function(data) {
            var w = "";
            if (data && data.list && data.list.length > 0) {
                var str = data.list[0];
                var num = parseInt(extractVal(str, "Drain"));
                if (!isNaN(num)) {
                    if (metric) w = Math.round(num) + "km<sup>2</sup>"; else w = Math.round(num * .386) + "mi<sup>2</sup>";
                    w = '<span class="umi2 notranslate">~' + w + "</span>";
                    if (num > 100) w += '<hr class="cicons" id="cd5" title="May massively flood during heavy rains and remain flooded for many days afterwards">'; else if (num > 50) w += '<hr class="cicons" id="cd4" title="May massively flood during heavy rains">'; else if (num > 25) w += '<hr class="cicons" id="cd3" title="May flood during heavy rains">';
                }
            }
            waterflowdiv.innerHTML += " " + w;
        });
    }
    var tt, it, isrc = null, ttmove = 0, ttshow = 0;
    var boxes = document.getElementsByClassName("galleryboxview");
    document.onmousemove = function() {
        if (tt && it && ttmove > 0) {
            tt.style.display = "none";
            it.src = "";
        }
        ++ttmove;
        ttshow = -3;
    };
    for (var i = 0; i < boxes.length; i++) {
        boxes[i].onmouseout = function() {
            isrc = null;
        };
        boxes[i].onmouseover = function() {
            var img = $(this).find("#highres");
            if (!img || img.length == 0) return;
            isrc = img[0].innerHTML;
            if (!tt) {
                tt = document.createElement("div");
                tt.style.cssText = "background-color:inherit; position: fixed; top:5%; left:5%; zIndex:9999; width:90%; height: 90%; text-align:center; display:none";
                it = document.createElement("img");
                it.style.cssText = "width:auto; height:100%;border: 1px solid #404040;margin:10px;background-color:#f0f0f0";
                it.src = isrc;
                it.alt = "LOADING...";
                tt.appendChild(it);
                document.body.appendChild(tt);
            }
        };
    }
}

function loadFormInterface() {
    function setinput(id, inputstr, keysubmit) {
        elem = document.getElementById(id);
        if (!elem) return;
        var str = getUrlParam(id, elem.innerHTML);
        var color;
        color = "black";
        if (deftext(str)) color = "silver";
        elem.innerHTML = inputstr + "color:" + color + ';" onfocus="inputfocus(this)" onkeydown="inputkey(event,' + keysubmit + ')" value="' + str + '">';
    }
    var locfind = document.getElementById("locfind");
    if (locfind) {
        setinput("locname", '<input id="locnameval" class="submitoff" autocomplete="on" style="width:90%;', "locsearch");
        setinput("locdist", '<input id="locdistval" class="submitoff" autocomplete="on" size="15" style="', "locsearch");
        locfind.innerHTML = '<input class="submitoff" type="submit" onclick="locsearch()" value="' + locfind.innerHTML + '">';
    }
    var filters = document.getElementById("filters");
    if (filters) {
        setOptionCheckboxes();
        setTableSortLinks();
    }
    setFilterCheckboxes();
    setMetricFields();
    var locdefault = document.getElementById("locdefault");
    if (locdefault) {
        var id = "locsearchchk";
        toggleOption(id, true);
    }
    var chks = document.getElementsByClassName("slideshowchk");
    for (var i = 0; i < chks.length; i++) chks[i].innerHTML = '<label style="white-space: nowrap;"><input class="slideshowschk submitoff" type="checkbox" onclick="toggleSlideshow()" ' + (slideshowchk ? "checked" : "") + ">" + chks[i].innerHTML + "</label>";
    toggleSlideshow(slideshowchk);
    var elems = document.getElementsByClassName("optionform");
    var urllink = window.location.href;
    urllink = urllink.split("#")[0].split("?");
    if (urllink.length > 1) {
        var ulink = urllink[1].replace("&locname=", "&noloc=").replace("&locsearchchk=on", "");
        for (var i = 0; i < elems.length; i++) {
            var links = elems[i].getElementsByTagName("A");
            for (var l = 0; l < links.length; ++l) {
                var href = links[l].attributes["href"];
                if (href && href.value) {
                    var str = href.value;
                    if (str.indexOf("?") >= 0) str += "&" + ulink; else str += "?" + ulink;
                    href.value = str;
                }
            }
        }
    }
    CollapsibleLists.apply();
}

function inputkey(event, submitfunc) {
    if (event.which == 13) submitfunc();
}

function inputfocus(elem) {
    elem.style.color = "black";
    if (deftext(elem.value)) {
        elem.value = "";
    }
}

function setfield(id) {
    var list = $("#setfieldtarget input");
    if (list.length > 0 && id) list[0].value = id.innerHTML;
}

function getLinkLang(node) {
    for (var i = 1; i < 3 && node; ++i) {
        node = node.previousSibling;
        if (node && node.nodeName == "IMG") {
            var s, e;
            var src = node.src;
            if ((s = src.indexOf("Rwl_")) > 0 && (e = src.indexOf(".", s)) > 0) return src.substr(s + 4, e - s - 4);
        }
    }
    return null;
}

function addPopOutLinkSupport() {
    var popOuts = document.getElementsByClassName("mw-popout-link");
    var i;
    for (i = 0; i < popOuts.length; i++) {
        var args = popOuts[i].innerText;
        var iSpace = args.indexOf(" ");
        var link = iSpace < 0 ? args : args.substring(0, iSpace);
        var caption = iSpace < 0 ? link : args.substring(iSpace + 1);
        popOuts[i].innerHTML = '<a href="' + link + '" target="_blank">' + caption + "</a>";
    }
}

function findtag(children, tag, f) {
    function findlist(children, tag) {
        var list = [];
        for (var i = 0; i < children.length; ++i) {
            var item = children[i];
            if (item.nodeName == tag) list.push(item); else list = list.concat(findlist(item.childNodes, tag));
        }
        return list;
    }
    var list = findlist(children, tag);
    for (var i = 0; i < list.length; ++i) f(list[i]);
}

function setHeadingText() {
    setHeadingTextForRegion();
    var linkify = false;
    var location = "";
    var header = document.getElementById("firstHeading");
    if (!header.querySelector("span")) {
        console.log("Adding hacky span");
        var span = document.createElement("span");
        span.textContent = header.textContent;
        header.textContent = "";
        header.appendChild(span);
    } else {
        console.log("No hacky span needed");
    }
    var headingText = header.children[header.children.length - 1].innerHTML;
    var headingTextSubscript = "";
    function changeStandardHeader(oldTitle, headingSubscript, urlkey, newTitle) {
        if (headingText.startsWith(oldTitle)) {
            if (!newTitle) newTitle = oldTitle;
            if (!urlkey) urlkey = oldTitle;
            location = urlget(window.location.href.toString(), urlkey, "");
            var pos = location.indexOf("?");
            if (pos > 0) location = location.substring(0, pos);
            var posend = location.lastIndexOf("-");
            if (posend > 0) location = location.substring(0, posend);
            location = location.split("_").join(" ");
            headingText = location;
            headingTextSubscript = '<br><font size="+2">' + headingSubscript + "</font>";
            document.title = newTitle + " " + location;
            linkify = true;
        }
    }
    changeStandardHeader("Conditions:", "Condition Reports");
    changeStandardHeader("References:", "Reference Photo");
    changeStandardHeader("List ratings", '<span class="overallrating-header">Overall Rating</span>', "location=", "Ratings:");
    changeStandardHeader("Waterflow", "Waterflow estimate", "location=", "Waterflow:");
    var index = headingText.indexOf("(");
    var endIndex = headingText.indexOf(")");
    if (endIndex < 0) endIndex = headingText.length;
    if (index >= 0) {
        headingText = headingText.substring(0, index) + '<span class="understate">' + headingText.substring(index, endIndex + 1) + "</span>" + headingText.substring(endIndex + 1);
    }
    if (linkify) {
        headingText = '<a href="/' + location + '" title="' + location + '">' + headingText + "</a>";
    }
    header.children[header.children.length - 1].innerHTML = headingText + headingTextSubscript;
    var tooltipText;
    var edit = window.location.href.toString().indexOf("&action=") > 0 || window.location.href.toString().indexOf("&diff=") > 0;
    var permit = document.getElementById("permit");
    if (!!permit && !edit) {
        var permitStatus = permit.innerHTML;
        if (!!permitStatus && permitStatus !== "No") {
            header.classList.add("Permit");
            header.classList.add(permitStatus);
            switch (permitStatus) {
              case "Yes":
                tooltipText = "Permit required";
                break;

              case "Restricted":
                tooltipText = "Access is restricted";
                break;

              case "Closed":
                tooltipText = "Closed to entry";
                break;
            }
        }
    }
    var unexplored = document.getElementsByClassName("permit unexplored").length > 0;
    if (unexplored && !edit) {
        header.classList.add("unexplored");
        tooltipText = "Unexplored";
    }
    if (tooltipText) {
        var span = document.createElement("span");
        span.className = "firstHeadingTooltip";
        span.title = tooltipText;
        header.insertBefore(span, header.children[0]);
    }
}

function FastIntegerCompression() {}

function bytelog(val) {
    if (val < 1 << 7) {
        return 1;
    } else if (val < 1 << 14) {
        return 2;
    } else if (val < 1 << 21) {
        return 3;
    } else if (val < 1 << 28) {
        return 4;
    }
    return 5;
}

function zigzag_encode(val) {
    return val + val ^ val >> 31;
}

function zigzag_decode(val) {
    return val >> 1 ^ -(val & 1);
}

FastIntegerCompression.computeCompressedSizeInBytes = function(input) {
    var c = input.length;
    var answer = 0;
    for (var i = 0; i < c; i++) {
        answer += bytelog(input[i]);
    }
    return answer;
};

FastIntegerCompression.computeCompressedSizeInBytesSigned = function(input) {
    var c = input.length;
    var answer = 0;
    for (var i = 0; i < c; i++) {
        answer += bytelog(zigzag_encode(input[i]));
    }
    return answer;
};

FastIntegerCompression.compress = function(input) {
    var c = input.length;
    var buf = new ArrayBuffer(FastIntegerCompression.computeCompressedSizeInBytes(input));
    var view = new Int8Array(buf);
    var pos = 0;
    for (var i = 0; i < c; i++) {
        var val = input[i];
        if (val < 1 << 7) {
            view[pos++] = val;
        } else if (val < 1 << 14) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7;
        } else if (val < 1 << 21) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14;
        } else if (val < 1 << 28) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14 & 127 | 128;
            view[pos++] = val >>> 21;
        } else {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14 & 127 | 128;
            view[pos++] = val >>> 21 & 127 | 128;
            view[pos++] = val >>> 28;
        }
    }
    return buf;
};

FastIntegerCompression.computeHowManyIntegers = function(input) {
    var view = new Int8Array(input);
    var c = view.length;
    var count = 0;
    for (var i = 0; i < c; i++) {
        count += input[i] >>> 7;
    }
    return c - count;
};

FastIntegerCompression.uncompress = function(input) {
    var array = [];
    var inbyte = new Int8Array(input);
    var end = inbyte.length;
    var pos = 0;
    while (end > pos) {
        var c = inbyte[pos++];
        var v = c & 127;
        if (c >= 0) {
            array.push(v);
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 7;
        if (c >= 0) {
            array.push(v);
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 14;
        if (c >= 0) {
            array.push(v);
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 21;
        if (c >= 0) {
            array.push(v);
            continue;
        }
        c = inbyte[pos++];
        v |= c << 28;
        v >>>= 0;
        array.push(v);
    }
    return array;
};

FastIntegerCompression.compressSigned = function(input) {
    var c = input.length;
    var buf = new ArrayBuffer(FastIntegerCompression.computeCompressedSizeInBytesSigned(input));
    var view = new Int8Array(buf);
    var pos = 0;
    for (var i = 0; i < c; i++) {
        var val = zigzag_encode(input[i]);
        if (val < 1 << 7) {
            view[pos++] = val;
        } else if (val < 1 << 14) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7;
        } else if (val < 1 << 21) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14;
        } else if (val < 1 << 28) {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14 & 127 | 128;
            view[pos++] = val >>> 21;
        } else {
            view[pos++] = val & 127 | 128;
            view[pos++] = val >>> 7 & 127 | 128;
            view[pos++] = val >>> 14 & 127 | 128;
            view[pos++] = val >>> 21 & 127 | 128;
            view[pos++] = val >>> 28;
        }
    }
    return buf;
};

FastIntegerCompression.uncompressSigned = function(input) {
    var array = [];
    var inbyte = new Int8Array(input);
    var end = inbyte.length;
    var pos = 0;
    while (end > pos) {
        var c = inbyte[pos++];
        var v = c & 127;
        if (c >= 0) {
            array.push(zigzag_decode(v));
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 7;
        if (c >= 0) {
            array.push(zigzag_decode(v));
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 14;
        if (c >= 0) {
            array.push(zigzag_decode(v));
            continue;
        }
        c = inbyte[pos++];
        v |= (c & 127) << 21;
        if (c >= 0) {
            array.push(zigzag_decode(v));
            continue;
        }
        c = inbyte[pos++];
        v |= c << 28;
        array.push(zigzag_decode(v));
    }
    return array;
};

function urldecode(str) {
    return decodeURIComponent(decodeHtmlCharCodes(str)).split("+").join(" ");
}

function decodeHtmlCharCodes(str) {
    return str.replace(/(&#(\d+);)/g, function(match, capture, charCode) {
        return String.fromCharCode(charCode);
    });
}

function urlencode(str) {
    return encodeURIComponent(str);
}

function linkify(str) {
    return !!str ? str.split(" ").join("_") : str;
}

function escapequotes(str) {
    return !!str ? urlencode(str).split("'").join("'").split('"').join('"') : str;
}

function urlget(url, idstr, defstr) {
    var str = defstr;
    var pos = url.indexOf(idstr);
    if (pos >= 0) {
        pos += idstr.length;
        var posend = url.indexOf("&", pos);
        if (posend > 0) str = url.substring(pos, posend); else str = url.substring(pos);
        str = urldecode(str);
    }
    return str;
}

function getUrlParam(key, defaultValue) {
    var uri = new URL(window.location.href);
    var value = uri.searchParams.get(key);
    if (!value) value = defaultValue;
    return value;
}

function setUrlParam(url, key, value) {
    var uri = new URL(url);
    uri.searchParams.set(key, value);
    return uri.toString();
}

function getLocalUrl(url) {
    if (!url) url = window.location.href.toString();
    var protocolDelimiter = "://";
    var index = url.indexOf(protocolDelimiter);
    var protocol = url.substring(0, index);
    var endIndex = url.indexOf("/", index + protocolDelimiter.length + 1);
    var baseurl = url.substring(index + protocolDelimiter.length, endIndex);
    return {
        protocol: protocol,
        baseurl: baseurl,
        siteurl: protocol + protocolDelimiter + baseurl,
        link: url.substring(endIndex)
    };
}

function geturl(url) {
    var hostnameIndex = url.indexOf(LUCA_HOSTNAME_PROD);
    if (hostnameIndex >= 0 && LUCA_HOSTNAME_PROD !== LUCA_HOSTNAME) {
        url = LUCA_BASE_URL + url.substr(hostnameIndex + LUCA_HOSTNAME_PROD.length);
    }
    if (url.substr(0, SITE_BASE_URL.length) === SITE_BASE_URL) {
        var localUrl = window.location.href.toString();
        var checkAlternateName = function(alternateName) {
            if (localUrl.substr(0, alternateName.length) === alternateName) {
                return alternateName + url.substr(SITE_BASE_URL.length);
            }
        };
        SITE_ALTERNATE_NAMES.forEach(checkAlternateName);
    }
    return url;
}

function getKmlFileWithoutCache(url) {
    var isropewiki = getdomain(url).includes(SITE_HOSTNAME);
    if (isropewiki) url = getUrlWithoutCache(url);
    return url;
}

function getUrlWithoutCache(url) {
    var newUrl = geturl(url);
    newUrl = setUrlParam(newUrl, "ts", new Date().getTime());
    return newUrl.toString();
}

function getdomain(link) {
    var base = link.split("http");
    if (link.length <= 0) return link;
    var domain = base[base.length - 1].split("/");
    if (domain.length <= 2) return link;
    return domain[2];
}

function aref(url, label, title, attribs) {
    if (typeof title == "undefined") title = "";
    if (typeof attribs == "undefined") attribs = "";
    return '<A href="' + url + '" title="' + title + '" ' + attribs + ">" + label + "</A>";
}

function deftext(str) {
    return str == null || str === "" || str[0] === "&" || str[0] === " " || str.charCodeAt(0) === 160;
}

function MD5hash(e) {
    function h(a, b) {
        var c = a & 1073741824;
        var d = b & 1073741824;
        var e = a & 2147483648;
        var f = b & 2147483648;
        var g = (a & 1073741823) + (b & 1073741823);
        return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
    }
    function k(a, b, c, d, e, f, g) {
        a = h(a, h(h(b & c | ~b & d, e), g));
        return h(a << f | a >>> 32 - f, b);
    }
    function l(a, b, c, d, e, f, g) {
        a = h(a, h(h(b & d | c & ~d, e), g));
        return h(a << f | a >>> 32 - f, b);
    }
    function m(a, b, d, c, e, f, g) {
        a = h(a, h(h(b ^ d ^ c, e), g));
        return h(a << f | a >>> 32 - f, b);
    }
    function n(a, b, d, c, e, f, g) {
        a = h(a, h(h(d ^ (b | ~c), e), g));
        return h(a << f | a >>> 32 - f, b);
    }
    function p(a) {
        var b = "", d, c;
        for (c = 0; 3 >= c; c++) d = a >>> 8 * c & 255, d = "0" + d.toString(16), 
        b += d.substr(d.length - 2, 2);
        return b;
    }
    var f = [], q, r, s, t, a, b, c, d;
    e = function(a) {
        a = a.replace(/\r\n/g, "\n");
        for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), 
            b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
        }
        return b;
    }(e);
    f = function(b) {
        var a, c = b.length;
        a = c + 8;
        for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c; ) a = (g - g % 4) / 4, 
        f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;
        a = (g - g % 4) / 4;
        e[a] |= 128 << g % 4 * 8;
        e[d - 2] = c << 3;
        e[d - 1] = c >>> 29;
        return e;
    }(e);
    a = 1732584193;
    b = 4023233417;
    c = 2562383102;
    d = 271733878;
    for (e = 0; e < f.length; e += 16) q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), 
    d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), 
    b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), 
    d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), 
    b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), 
    d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), 
    b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), 
    d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), 
    b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), 
    d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), 
    b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), 
    d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), 
    b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), 
    d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), 
    b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), 
    d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), 
    b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), 
    d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), 
    b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), 
    d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), 
    b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), 
    d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), 
    b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), 
    d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), 
    b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), 
    d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), 
    b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), 
    d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), 
    b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), 
    d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), 
    b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), 
    d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), 
    b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), 
    d = h(d, t);
    return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
}

function initBasicEditor() {
    var tb = document.getElementById("toolbar");
    if (!tb) {
        tb = document.createElement("DIV");
        tb.id = "toolbar";
    }
    var first = null;
    var prefix = "_section";
    var list = document.getElementsByTagName("TEXTAREA");
    for (var i = 0; i < list.length; ++i) if (!!list[i].name && list[i].name.substr(0, prefix.length) == prefix) {
        if (!first) first = list[i];
        list[i].onfocus = function() {
            this.parentNode.insertBefore(tb, this);
        };
    }
    if (first) first.parentNode.insertBefore(tb, first);
    if (window.mw && !!mw.toolbar) {
        mw.loader.using("mediawiki.action.edit", function() {
            var tb = document.getElementById("toolbar");
            if (tb) tb.innerHTML = "";
            mw.toolbar.addButton(false, "Bold text", "'''", "'''", "Bold text", "mw-editbutton-bold");
            mw.toolbar.addButton(false, "Italic text", "''", "''", "Italic text", "mw-editbutton-italic");
            mw.toolbar.addButton({
                imageFile: BULLET_LIST_ICON,
                speedTip: "Bulleted list",
                tagOpen: "* ",
                tagClose: "",
                sampleText: "Bulleted list item",
                imageId: "button-bullet"
            });
            mw.toolbar.addButton({
                imageFile: PHOTO_GALLERY_ICON,
                speedTip: "Insert a picture (.jpg .gif .png .pdf)",
                tagOpen: "{{pic|",
                tagClose: "}}",
                sampleText: "name.jpg ~ caption",
                imageId: "button-pic1"
            });
            mw.toolbar.addButton({
                imageFile: MULTIPHOTO_GALLERY_ICON,
                speedTip: "Insert a picture gallery (.jpg .gif .png .pdf)",
                tagOpen: "{{pic|",
                tagClose: "}}",
                sampleText: "pic1.jpg ~ caption1 ; pic2.jpg ~ caption2 ; pic3.jpg ~ caption3",
                imageId: "button-picn"
            });
            mw.toolbar.addButton({
                imageFile: PHOTO_GALLERY_ICON2,
                speedTip: "Insert a large sketch or document (.pdf .gif .png .jpg)",
                tagOpen: "{{pic|size=X|",
                tagClose: "}}",
                sampleText: "sketch.pdf ~ caption",
                imageId: "button-picx"
            });
            mw.toolbar.addButton(false, "Internal link", "[[", "]]", "Link title", "mw-editbutton-link");
            mw.toolbar.addButton(false, "External link (remember http:// prefix)", "[", "]", PROTOCOL + "www.example.com link title", "mw-editbutton-extlink");
            mw.toolbar.addButton(false, "Level 2 headline", "\n=== ", " ===\n", "Headline text", "mw-editbutton-headline");
            mw.toolbar.addButton(false, "Ignore wiki formatting", "<nowiki>", "</nowiki>", "Insert non-formatted text here", "mw-editbutton-nowiki");
            mw.toolbar.addButton(false, "Your signature with timestamp", "--[[User:BetaRobot2|BetaRobot2]] ([[User talk:BetaRobot2|talk]]) 17:01, 11 June 2016 (EDT)", "", "", "mw-editbutton-signature");
            mw.toolbar.addButton(false, "Horizontal line (use sparingly)", "\n----\n", "", "", "mw-editbutton-hr");
            $(function() {
                mw.toolbar.init();
            });
        });
    }
}

function customizeToolbar() {
    console.log("customizeToolbar");
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "insert",
        tools: {
            embedvideo: {
                label: "Embed YouTube",
                type: "button",
                icon: "https://ropewiki.com/images/video.png",
                action: {
                    type: "callback",
                    execute: function() {
                        var url = prompt("Enter a YouTube URL (e.g. https://www.youtube.com/watch?v=dQw4w9WgXcQ)");
                        if (!url) return;
                        var match = url.match(/[?&]v=([^&]+)/) || url.match(/youtu\.be\/([^?&]+)/);
                        if (!match || !match[1]) {
                            alert("Could not extract YouTube video ID.");
                            return;
                        }
                        var videoId = match[1];
                        var wikitext = "{{#ev:youtube|" + videoId + "}}";
                        var textbox = document.getElementById("wpTextbox1");
                        if (textbox) {
                            var start = textbox.selectionStart;
                            var end = textbox.selectionEnd;
                            var currentText = textbox.value;
                            textbox.value = currentText.substring(0, start) + wikitext + currentText.substring(end);
                            textbox.selectionStart = textbox.selectionEnd = start + wikitext.length;
                            textbox.focus();
                        }
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            pic1: {
                label: "Insert a picture (.jpg .gif .png .pdf)",
                type: "button",
                icon: PHOTO_GALLERY_ICON,
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|",
                        peri: "name.jpg ~ caption",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            picn: {
                label: "Insert a picture gallery (.jpg .gif .png .pdf)",
                type: "button",
                icon: MULTIPHOTO_GALLERY_ICON,
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|",
                        peri: "pic1.jpg ~ caption1 ; pic2.jpg ~ caption2 ; pic3.jpg ~ caption3",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1").wikiEditor("addToToolbar", {
        section: "main",
        group: "format",
        tools: {
            picx: {
                label: "Insert a large sketch or document (.pdf .gif .png .jpg)",
                type: "button",
                icon: PHOTO_GALLERY_ICON2,
                action: {
                    type: "encapsulate",
                    options: {
                        pre: "{{pic|size=X|",
                        peri: "sketch.pdf ~ caption",
                        post: "}}"
                    }
                }
            }
        }
    });
    $("#wpTextbox1, .wikieditor").wikiEditor("removeFromToolbar", {
        section: "advanced",
        group: "insert",
        tool: "gallery"
    });
    $("#wpTextbox1, .wikieditor").wikiEditor("removeFromToolbar", {
        section: "main",
        group: "insert",
        tool: "file"
    });
}

function initToolbarCustomization() {
    if (typeof mw != "undefined") {
        if (!!mw && $.inArray(mw.config.get("wgAction"), [ "edit", "submit" ]) !== -1) {
            mw.loader.using("user.options", function() {
                if (mw.user.options.get("usebetatoolbar") == 1) {
                    $.when(mw.loader.using("ext.wikiEditor.toolbar"), $.ready).then(customizeToolbar);
                }
            });
            mw.hook("ext.lqt.textareaCreated").add(customizeToolbar);
        }
    }
}

$("head").prepend('<meta name="viewport" content="width=device-width, initial-scale=1.0">');

$("head").append('<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">');

initializeCookies();

initializeGlobalVariables();

addPopOutLinkSupport();

addUACAStyle();

setHeadingText();

loadSkin();

adjustFaviconElements();

initBasicEditor();

initToolbarCustomization();

jQuery(document).ready(function() {
    if (isIOS()) $(window).scrollTop(0);
    initializeLeafletMap();
    loadUserInterface(document);
    loadFormInterface();
    loadTranslation();
    setInterval(function() {
        loadTranslation();
    }, 2e3);
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit";
    document.body.appendChild(script);
});